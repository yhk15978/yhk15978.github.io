<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yhkhome</title>
  
  <subtitle>姚恒康的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yhk15978.github.io/"/>
  <updated>2019-06-21T11:38:30.708Z</updated>
  <id>https://yhk15978.github.io/</id>
  
  <author>
    <name>姚恒康</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端异步流程</title>
    <link href="https://yhk15978.github.io//posts/4a17b158/"/>
    <id>https://yhk15978.github.io//posts/4a17b158/</id>
    <published>2019-06-21T11:20:20.187Z</published>
    <updated>2019-06-21T11:38:30.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端异步流程"><a href="#前端异步流程" class="headerlink" title="前端异步流程"></a>前端异步流程</h2><h3 id="1-传统的原生异步"><a href="#1-传统的原生异步" class="headerlink" title="1. 传统的原生异步"></a>1. 传统的原生异步</h3><pre><code>- 回调函数- 事件</code></pre><h3 id="2-使用异步流程工具（-别人封装好的东西-）"><a href="#2-使用异步流程工具（-别人封装好的东西-）" class="headerlink" title="2. 使用异步流程工具（ 别人封装好的东西 ）"></a>2. 使用异步流程工具（ 别人封装好的东西 ）</h3><h4 id="es6-Promise"><a href="#es6-Promise" class="headerlink" title="- es6 Promise"></a>- es6 Promise</h4>   <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Promise 是异步编程的一种解决方案，比传统的解决方案–回调函数和事件－－更合理和更强大。它由社区最早提出和实现，ES6将其写进了语言标准，统一了语法，原生提供了Promise</span></span><br><span class="line"><span class="comment"> 所谓Promise ，简单说就是一个容器，里面保存着某个未来才回结束的事件(通常是一个异步操作）的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。</span></span><br><span class="line"><span class="comment"> Promise 对象的状态不受外界影响</span></span><br><span class="line"><span class="comment"> 三种状态:</span></span><br><span class="line"><span class="comment"> pending：进行中</span></span><br><span class="line"><span class="comment"> fulfilled :已经成功</span></span><br><span class="line"><span class="comment"> rejected 已经失败</span></span><br><span class="line"><span class="comment"> 状态改变：</span></span><br><span class="line"><span class="comment"> Promise对象的状态改变，只有两种可能：</span></span><br><span class="line"><span class="comment"> 从pending变为fulfilled</span></span><br><span class="line"><span class="comment"> 从pending变为rejected。</span></span><br><span class="line"><span class="comment"> 这两种情况只要发生，状态就凝固了，不会再变了，这时就称为resolved（已定型）*/</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =></span> {</span><br><span class="line"> resolve(<span class="string">'任务一'</span>)</span><br><span class="line"> }).then(<span class="function"><span class="params">data</span> =></span> {</span><br><span class="line"> <span class="built_in">console</span>.log(data);</span><br><span class="line"> <span class="keyword">return</span> data;</span><br><span class="line"> })</span><br><span class="line"> <span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =></span> {</span><br><span class="line"> setTimeout(<span class="function"><span class="params">()</span> =></span> {</span><br><span class="line"> resolve(<span class="string">'任务三'</span>)</span><br><span class="line"> }, <span class="number">1000</span>)</span><br><span class="line"> }).then(<span class="function"><span class="params">data</span> =></span> {</span><br><span class="line"> <span class="built_in">console</span>.log(data);</span><br><span class="line"> <span class="keyword">return</span> data;</span><br><span class="line"> })</span><br><span class="line"> <span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =></span> {</span><br><span class="line"> setTimeout(<span class="function"><span class="params">()</span> =></span> {</span><br><span class="line"> resolve(<span class="string">'任务二'</span>)</span><br><span class="line"> }, <span class="number">2000</span>)</span><br><span class="line"> }).then(<span class="function"><span class="params">data</span> =></span> {</span><br><span class="line"> <span class="built_in">console</span>.log(data)</span><br><span class="line"> <span class="keyword">return</span> data</span><br><span class="line"> })</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'主线程任务'</span>) <span class="comment">//主线程任务</span></span><br><span class="line"> <span class="comment">// all race</span></span><br><span class="line"> <span class="comment">// 如果作为参数的Promise实例自身定义了catch方法，那么它被rejected是并不会触发Promise.all()的catch方法</span></span><br><span class="line">  <span class="comment">// Promise.all中都成功返回才执行</span></span><br><span class="line"> <span class="built_in">Promise</span>.all([p1, p2, p3]).then(<span class="function"><span class="params">data</span> =></span> { <span class="comment">//data为p1,p2,p3返回值组成的数组</span></span><br><span class="line"> <span class="built_in">console</span>.log(data) <span class="comment">//[ '任务一', '任务二', '任务三' ]</span></span><br><span class="line"> }).catch(<span class="function"><span class="params">e</span> =></span> <span class="built_in">console</span>.log(e))</span><br><span class="line"> <span class="comment">// Promise.race中只要有一个成功返回就执行</span></span><br><span class="line"> <span class="built_in">Promise</span>.race([p1, p2, p3]).then(<span class="function"><span class="params">data</span> =></span> { <span class="comment">//data为p1,p2,p3中最先成功的返回值</span></span><br><span class="line"> <span class="built_in">console</span>.log(data) <span class="comment">//任务一</span></span><br><span class="line"> })</span><br><span class="line"> <span class="comment">// 以上代码执行结果为</span></span><br><span class="line"> <span class="comment">// 主线程任务</span></span><br><span class="line"> <span class="comment">// 任务一</span></span><br><span class="line"> <span class="comment">// 任务一</span></span><br><span class="line"> <span class="comment">// 任务三</span></span><br><span class="line"> <span class="comment">// 任务二</span></span><br><span class="line"> <span class="comment">// [ '任务一', '任务二', '任务三' ]</span></span><br></pre></td></tr></tbody></table></figure><h4 id="es6-generator函数"><a href="#es6-generator函数" class="headerlink" title="- es6 generator函数"></a>- es6 generator函数</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">generator函数</span></span><br><span class="line"><span class="comment">在function关键字后面加一个* 这样定义的函数就叫做generator函数</span></span><br><span class="line"><span class="comment">通过yield关键字来定义任务</span></span><br><span class="line"><span class="comment">通过fn().next() 来执行任务</span></span><br><span class="line"><span class="comment">value表示yield关键字后任务执行的结果</span></span><br><span class="line"><span class="comment">done表示当前定义的所有的任务是否执行完成的一个状态</span></span><br><span class="line"><span class="comment">理解：</span></span><br><span class="line"><span class="comment">多任务的定义，多任务执行</span></span><br><span class="line"><span class="comment">让自己定义的多个任务依次执行，上一个任务如果没有完成，下一个任务就不会开始</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fn</span>(<span class="params"></span>) </span>{</span><br><span class="line"><span class="keyword">yield</span> <span class="string">'任务一'</span></span><br><span class="line"><span class="keyword">yield</span> <span class="string">'任务二'</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'任务'</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> a = fn()</span><br><span class="line"><span class="built_in">console</span>.log(a.next()) <span class="comment">// { value: '任务一'，done: false }</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next()) <span class="comment">//{ value: '任务二', done: false }</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next()) <span class="comment">//{ value: '任务', done: true }</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'主线程任务'</span>) <span class="comment">//主线程任务</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>es6( 7 ) async 函数</p>  <figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">async函数</span></span><br><span class="line"><span class="comment">es6提供</span></span><br><span class="line"><span class="comment">配合关键字 await使用</span></span><br><span class="line"><span class="comment">await 表示，等待，任务一执行结束之后，才会执行任务二</span></span><br><span class="line"><span class="comment">async函数返回值为Promise对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="string">'任务一'</span></span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'任务二'</span>)</span><br><span class="line">}</span><br><span class="line">fn()</span><br><span class="line"><span class="keyword">const</span> fn1 = <span class="keyword">async</span>() => {</span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =></span> {</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =></span> { res(<span class="string">'任务3'</span>) }, <span class="number">2000</span>)</span><br><span class="line">    }).then(<span class="function"><span class="params">result</span> =></span> {</span><br><span class="line">        <span class="built_in">console</span>.log(result)</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">})</span><br><span class="line"><span class="keyword">let</span> req = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =></span> {</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =></span> { res(<span class="string">'任务四'</span>) }, <span class="number">1000</span>)</span><br><span class="line">    }).then(<span class="function"><span class="params">result</span> =></span> {</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">})</span><br><span class="line">    <span class="built_in">console</span>.log(req)</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) {</span><br><span class="line">    <span class="keyword">return</span> req</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">throw</span> res</span><br><span class="line">}</span><br><span class="line"><span class="comment">//返回值通过then()调用，抛出值通过catch()调用</span></span><br><span class="line">}</span><br><span class="line">fn1().then(<span class="function"><span class="params">re</span> =></span> <span class="built_in">console</span>.log(re)).catch(<span class="function"><span class="params">re</span> =></span> <span class="built_in">console</span>.log(re))</span><br><span class="line"><span class="comment">//结果:</span></span><br><span class="line"><span class="comment">// 任务一</span></span><br><span class="line"><span class="comment">// 任务二</span></span><br><span class="line"><span class="comment">// 任务3</span></span><br><span class="line"><span class="comment">// 任务四</span></span><br><span class="line"><span class="comment">// 任务四</span></span><br><span class="line"><span class="comment">// 任务3</span></span><br><span class="line"><span class="comment">// 任务3</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="node-js中的-nextTick-setImmudiate"><a href="#node-js中的-nextTick-setImmudiate" class="headerlink" title="- node.js中的 nextTick setImmudiate"></a>- node.js中的 nextTick setImmudiate</h4> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nextTick()的回调函数执行的优先级要高于setImmediate();</span><br><span class="line">process.nextTick()属于idle观察者,setImmediate()属于check观察者.在每一轮循环检查中,idle观察者先于I/O观察者,I/O观察者先于check观察者.</span><br><span class="line">在具体实现上,process.nextTick()的回调函数保存在一个数组中,</span><br><span class="line">setImmediate()的结果则是保存在链表中.</span><br><span class="line">在行为上,process.nextTick()在每轮循环中会将数组中的回调函数全部执行完.</span><br><span class="line">而setImmediate()在每轮循环中执行链表中的一个回调函数.</span><br><span class="line">nextTick > 回调函数 > setImmediate</span><br></pre></td></tr></tbody></table></figure>   <figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Node.js提供的</span></span><br><span class="line"><span class="comment">nextTick</span></span><br><span class="line"><span class="comment">setImmediate</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//加入2个nextTick()的回调函数</span></span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"nextTick延迟执行A"</span>);</span><br><span class="line">});</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"nextTick延迟执行B"</span>);</span><br><span class="line">setImmediate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"setImmediate延迟执行C"</span>);</span><br><span class="line">});</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"nextTick延迟执行D"</span>);</span><br><span class="line">});</span><br><span class="line">});</span><br><span class="line"><span class="comment">//加入两个setImmediate()回调函数</span></span><br><span class="line">setImmediate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"setImmediate延迟执行E"</span>);</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"强势插入F"</span>);</span><br><span class="line">});</span><br><span class="line">setImmediate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"setImmediate延迟执行G"</span>);</span><br><span class="line">});</span><br><span class="line">});</span><br><span class="line">setImmediate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"setImmediate延迟执行H"</span>);</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"强势插入I"</span>);</span><br><span class="line">});</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"强势插入J"</span>);</span><br><span class="line">});</span><br><span class="line">setImmediate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"setImmediate延迟执行K"</span>);</span><br><span class="line">});</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"正常执行L"</span>);</span><br><span class="line"><span class="comment">// 正常执行L</span></span><br><span class="line"><span class="comment">// nextTick延迟执行A</span></span><br><span class="line"><span class="comment">// nextTick延迟执行B</span></span><br><span class="line"><span class="comment">// nextTick延迟执行D</span></span><br><span class="line"><span class="comment">// setImmediate延迟执行E</span></span><br><span class="line"><span class="comment">// setImmediate延迟执行H</span></span><br><span class="line"><span class="comment">// setImmediate延迟执行C</span></span><br><span class="line"><span class="comment">// 强势插入F</span></span><br><span class="line"><span class="comment">// 强势插入I</span></span><br><span class="line"><span class="comment">// 强势插入J</span></span><br><span class="line"><span class="comment">// setImmediate延迟执行G</span></span><br><span class="line"><span class="comment">// setImmediate延迟执行K</span></span><br></pre></td></tr></tbody></table></figure><h4 id="第三方的-async-js-库"><a href="#第三方的-async-js-库" class="headerlink" title="- 第三方的 async.js 库"></a>- 第三方的 async.js 库</h4>  <figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">async.js</span></span><br><span class="line"><span class="comment">第三方的库</span></span><br><span class="line"><span class="comment">案例：</span></span><br><span class="line"><span class="comment">parallel</span></span><br><span class="line"><span class="comment">series</span></span><br><span class="line"><span class="comment">功能：</span></span><br><span class="line"><span class="comment">1. 可以实现异步</span></span><br><span class="line"><span class="comment">2. 串行series和并行parallel</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="built_in">require</span>( <span class="string">'async'</span> )</span><br><span class="line">    <span class="keyword">async</span>.series({</span><br><span class="line">    one: <span class="function"><span class="keyword">function</span> (<span class="params"> callback </span>) </span>{</span><br><span class="line"> setTimeout( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  callback( <span class="literal">null</span>, <span class="number">1</span>)</span><br><span class="line">},<span class="number">200</span>)</span><br><span class="line">},</span><br><span class="line">two: <span class="function"><span class="keyword">function</span> (<span class="params"> callback </span>) </span>{</span><br><span class="line">setTimeout( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line"> callback ( <span class="literal">null</span> , <span class="number">2</span> )</span><br><span class="line">},<span class="number">100</span>)</span><br><span class="line">}</span><br><span class="line">}, <span class="function"><span class="keyword">function</span> (<span class="params"> error , results </span>) </span>{</span><br><span class="line"> <span class="built_in">console</span>.log( <span class="string">'series'</span>,results )</span><br><span class="line">})</span><br><span class="line"> <span class="built_in">console</span>.log( <span class="string">'主线程'</span> )</span><br><span class="line"><span class="keyword">async</span>.parallel({</span><br><span class="line"> one: <span class="function"><span class="keyword">function</span> (<span class="params"> callback </span>) </span>{</span><br><span class="line">setTimeout( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line"> callback( <span class="literal">null</span>, <span class="number">1</span>)</span><br><span class="line">},<span class="number">200</span>)</span><br><span class="line">},</span><br><span class="line">two: <span class="function"><span class="keyword">function</span> (<span class="params"> callback </span>) </span>{</span><br><span class="line"> setTimeout( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  callback ( <span class="literal">null</span> , <span class="number">2</span> )</span><br><span class="line">},<span class="number">100</span>)</span><br><span class="line">}</span><br><span class="line">}, <span class="function"><span class="keyword">function</span> (<span class="params"> error , results </span>) </span>{</span><br><span class="line"> <span class="built_in">console</span>.log( <span class="string">'parallel'</span>,results )</span><br><span class="line">})        </span><br><span class="line"><span class="comment">// 主线程</span></span><br><span class="line"><span class="comment">// parallel { two: 2, one: 1 }</span></span><br><span class="line"><span class="comment">// series { one: 1, two: 2 }</span></span><br></pre></td></tr></tbody></table></figure><pre><code>总结：异步流程的任务是放在异步队列中的，异步队列只有在主线程执行完之后采取执行</code></pre><ol start="3"><li>参考资料<ol><li>Promise<br><a href="https://blog.csdn.net/MrJavaweb/article/details/79475949" target="_blank" rel="noopener">https://blog.csdn.net/MrJavaweb/article/details/79475949</a></li><li>Generator<br><a href="https://www.cnblogs.com/imwtr/p/5913294.html" target="_blank" rel="noopener">https://www.cnblogs.com/imwtr/p/5913294.html</a></li><li>Async-await</li><li>Node.js 中的nextTick()和setimmediate()<br><a href="https://www.cnblogs.com/5ishare/p/5268273.html" target="_blank" rel="noopener">https://www.cnblogs.com/5ishare/p/5268273.html</a></li><li>async库<br><a href="https://caolan.github.io/async/" target="_blank" rel="noopener">https://caolan.github.io/async/</a><br>参考文档<br>Event-loop<br><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html?bsh_bid=983729729" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/10/event-loop.html?bsh_bid=983729729</a><br>史上最易读懂的 Promise/A+ 完全实现<br><a href="https://zhuanlan.zhihu.com/p/21834559" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/21834559</a></li></ol></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前端异步流程&quot;&gt;&lt;a href=&quot;#前端异步流程&quot; class=&quot;headerlink&quot; title=&quot;前端异步流程&quot;&gt;&lt;/a&gt;前端异步流程&lt;/h2&gt;&lt;h3 id=&quot;1-传统的原生异步&quot;&gt;&lt;a href=&quot;#1-传统的原生异步&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="前端" scheme="https://yhk15978.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://yhk15978.github.io/categories/%E5%89%8D%E7%AB%AF/js/"/>
    
      <category term="node" scheme="https://yhk15978.github.io/categories/%E5%89%8D%E7%AB%AF/js/node/"/>
    
    
      <category term="前端" scheme="https://yhk15978.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="node" scheme="https://yhk15978.github.io/tags/node/"/>
    
      <category term="js" scheme="https://yhk15978.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue基础语法</title>
    <link href="https://yhk15978.github.io//posts/4a17b157/"/>
    <id>https://yhk15978.github.io//posts/4a17b157/</id>
    <published>2019-06-19T11:59:36.232Z</published>
    <updated>2019-06-20T13:59:08.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue基础语法"><a href="#vue基础语法" class="headerlink" title="vue基础语法"></a>vue基础语法</h1><h2 id="mutache-语法糖"><a href="#mutache-语法糖" class="headerlink" title="mutache 语法糖"></a>mutache 语法糖</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;p&gt; {{ this.msg }} &lt;/p&gt;</span><br><span class="line">    &lt;p&gt; {{ this.$data.msg }} &lt;/p&gt;</span><br><span class="line">    &lt;p&gt; {{ this._data.msg }} &lt;/p&gt;</span><br><span class="line">    &lt;p&gt; {{ msg }} &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p><code>jsx</code>: javascript + xml<br>可以让我们在dom结构中输写javascript</p><p>是 this.msg 简写<br>this.$data.msg -> this.msg -> msg</p><a id="more"></a><h4 id="mustache语法糖对数据类型的支持（-js语法的支持-）"><a href="#mustache语法糖对数据类型的支持（-js语法的支持-）" class="headerlink" title="mustache语法糖对数据类型的支持（ js语法的支持 ）"></a>mustache语法糖对数据类型的支持（ js语法的支持 ）</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id="app"&gt;</span><br><span class="line">    &lt;p&gt; number: {{ num }} &lt;/p&gt;</span><br><span class="line">    &lt;p&gt; string: {{ str }} &lt;/p&gt;</span><br><span class="line">    &lt;p&gt; boolean: {{ bool }} &lt;/p&gt;</span><br><span class="line">    &lt;p&gt; null: {{ nul?'1':'2' }} &lt;/p&gt;</span><br><span class="line">    &lt;p&gt; undefined: {{ und && 1 || 2 }} &lt;/p&gt;</span><br><span class="line">    &lt;p&gt; object: {{ obj.name }} &lt;/p&gt;</span><br><span class="line">    &lt;p&gt; array: {{ arr[0] }} &lt;/p&gt;</span><br><span class="line">    &lt;p&gt; fn: {{ fn() }} &lt;/p&gt;</span><br><span class="line">    &lt;!-- &lt;p&gt; console.log: {{ console.log( 1 ) }} &lt;/p&gt;</span><br><span class="line">    &lt;p&gt; alert: {{ alert( 2 ) }} &lt;/p&gt; --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    /*</span><br><span class="line">    数据类型：</span><br><span class="line">    第一种划分：</span><br><span class="line">    基础数据类型： number string boolean</span><br><span class="line">    复杂数据类型: Object( array function )</span><br><span class="line">    特殊数据类型: null undefined</span><br><span class="line">    第二种划分：</span><br><span class="line">    初始数据类型: number string boolean null undefined</span><br><span class="line">    引用数据类型: object( array function )</span><br><span class="line">    结论： mustache支持我们js的数据类型的</span><br><span class="line">    conosle.log 和 alert 在我们mustache语法中是不支持的</span><br><span class="line">    */</span><br><span class="line">var vm = new Vue({</span><br><span class="line">    el: '#app',</span><br><span class="line">    data: {</span><br><span class="line">        num: 100,</span><br><span class="line">        str: 'hello Vue.js',</span><br><span class="line">        bool: true,</span><br><span class="line">        nul: null,</span><br><span class="line">        und: undefined,</span><br><span class="line">        obj: {</span><br><span class="line">             name: 'yhk'</span><br><span class="line">        },</span><br><span class="line">        arr: [1,2,3,4],</span><br><span class="line">        fn: function () {</span><br><span class="line">            alert( 2 )</span><br><span class="line">            return '这是一个函数'</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="mustache-绑定-dom的属性"><a href="#mustache-绑定-dom的属性" class="headerlink" title="mustache 绑定 dom的属性"></a>mustache 绑定 dom的属性</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;p v-html = "h"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p v-text = "msg"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p v-text = " flag && 1 || 2 " &gt; &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    /*</span><br><span class="line">    案例： v-html</span><br><span class="line">    分析： 发现dom元素直接有了一个内容</span><br><span class="line">    这种属性绑定就是为了操作dom</span><br><span class="line">    结论： 这种属性绑定的形式就是为了操作dom，我们给这种属性起了一个好听的名字</span><br><span class="line">    Vue 1.0 叫它 属性指令（ 借鉴Angular来的 ）</span><br><span class="line">    Vue 2.0 统称为 ‘指令’</span><br><span class="line">    指令是用一个 v-xxx 表示</span><br><span class="line">    指令是用来操作dom</span><br><span class="line">    Vue中不允许直接操作dom!!!</span><br><span class="line">    mustache语法 --- 属性写法 的属性值是直接写数据的，不需要使用 {{ }}</span><br><span class="line">    */</span><br><span class="line">var vm = new Vue({</span><br><span class="line">    el: '#app',</span><br><span class="line">    data: {</span><br><span class="line">        msg: 'hello Vue.js',</span><br><span class="line">        h: '&lt;h3&gt; hello Vue.js &lt;/h3&gt;',</span><br><span class="line">        flag: true</span><br><span class="line">    }</span><br><span class="line">    })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>问题： 我们说vue是 MVVM 框架， 那么谁是 M 谁是 V 谁是 VM</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- V --&gt;</span><br><span class="line">&lt;div id="app"&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    /*</span><br><span class="line">    M： Model 数据</span><br><span class="line">    V： View 视图</span><br><span class="line">    VM: ViewModel 视图模型（ new Vue() ）</span><br><span class="line">    */</span><br><span class="line">    var vm = new Vue({</span><br><span class="line">        el: '#app',//给跟实例一个模板（ 挂载 ）</span><br><span class="line">        data: { //M</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="指令：-是绑定在dom属性上"><a href="#指令：-是绑定在dom属性上" class="headerlink" title="指令： ( 是绑定在dom属性上 )"></a>指令： ( 是绑定在dom属性上 )</h2><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html:"></a>v-html:</h4><p>可以解析标签型数据( 可以将一个数据展示在一个dom的内容中（ 相当于使用了 innerHTML ）)</p><h4 id="v-text："><a href="#v-text：" class="headerlink" title="v-text："></a>v-text：</h4><p>可以将一个数据展示在一个dom的内容中（ 相当于使用了 innerHTML ）<br>条件渲染的指令</p><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><p>可以控制一个dom的显示隐藏（ 这个指令操作的是dom的display属性 ）</p><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><p>可以控制一个dom的存在与否（ 创建 和 销毁 ）</p><h4 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h4><h4 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;h3&gt; v-show &lt;/h3&gt;</span><br><span class="line">    &lt;p v-show = "showFlag"&gt; v-show指令 &lt;/p&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h3&gt; v-if - 单路分支 &lt;/h3&gt;</span><br><span class="line">    &lt;p v-if = "ifFlag"&gt; v-if - 指令的单路分支 &lt;/p&gt;</span><br><span class="line">    &lt;h3&gt; v-if - 双路分支 &lt;/h3&gt;</span><br><span class="line">    &lt;p v-if = "ifFlag"&gt; 双路分支 成立 &lt;/p&gt;</span><br><span class="line">    &lt;p v-else&gt; 双路分支不成立 &lt;/p&gt;</span><br><span class="line">    &lt;h3&gt; v-if - 多路分支 &lt;/h3&gt;</span><br><span class="line">    &lt;p v-if = " type === 'A'"&gt; A &lt;/p&gt;</span><br><span class="line">    &lt;p v-else-if = " type === 'B'"&gt; B &lt;/p&gt;</span><br><span class="line">    &lt;p v-else&gt; C &lt;/p&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue({</span><br><span class="line">    el: '#app',//给跟实例一个模板（ 挂载 ）</span><br><span class="line">    data: {</span><br><span class="line">        showFlag: true,</span><br><span class="line">        ifFlag: false,</span><br><span class="line">        type: 'A'</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p> 实用题 </p><ol><li>v-if vs v-show 区别</li><li>实用： 项目中 如何选择这两个使用</li></ol><ul><li>v-if 操作的是dom元素（ 组件 ） 的创建或是销毁</li><li>v-show 操作的是dom元素的display属性</li><li>v-if可以有多种使用形式： 单路分支， 多路分支， 双路分支</li><li>v-show 只能写一个单路形式<br>一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。<br>因此，如果需要非常频繁地切换，则使用 v-show 较好；<br>如果在运行时条件很少改变，则使用 v-if 较好。</li></ul><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><ol><li>数组 v-for = “ (item,index) in arr “ item是arr中每一个元素</li><li>对象 v-for = “(item,key,index) in obj “ item是obj的属性值</li><li>json类型数据</li><li>嵌套类型数据</li></ol><h4 id="key"><a href="#key" class="headerlink" title="key:"></a>key:</h4><p>给没一个循环的列表添加一个唯一的标识<br>使用指令 v-bind 来绑定 key<br><div v-for = “ (item,index) in lists” v-bind: key = “ item.id “></div><br>如果有id，那么我们就使用id，如果没有，我们才会选择index<br>v-bind: 单项数据绑定： 将一个数据绑定在一个dom的属性上<br>简写<br><div v-for = “ (item,index) in lists” :key = “ item.id “></div></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">   &lt;h3&gt; 数组 &lt;/h3&gt;</span><br><span class="line">   &lt;ul&gt;</span><br><span class="line">       &lt;li v-for = " (item,index) in arr " v-bind:key = "index"&gt;</span><br><span class="line">            &lt;p&gt; item :{{ item }} -- index: {{ index }}&lt;/p&gt;</span><br><span class="line">       &lt;/li&gt;</span><br><span class="line">   &lt;/ul&gt;</span><br><span class="line">   &lt;hr&gt;</span><br><span class="line">   &lt;h3&gt; 对象 &lt;/h3&gt;</span><br><span class="line">   &lt;ul&gt;</span><br><span class="line">       &lt;li v-for = "(item,key,index) in obj" v-bind:key = "index"&gt;</span><br><span class="line">          &lt;p&gt; value: {{ item }} -- key: {{ key }} -- {{ index }} &lt;/p&gt;</span><br><span class="line">       &lt;/li&gt;</span><br><span class="line">   &lt;/ul&gt;</span><br><span class="line">   &lt;hr&gt;</span><br><span class="line">   &lt;h3&gt; json &lt;/h3&gt;</span><br><span class="line">   &lt;ul&gt;</span><br><span class="line">       &lt;li v-for = "(item,index) of json" v-bind:key = " item.id "&gt;</span><br><span class="line">           &lt;p&gt; id: {{ item.id }} &lt;/p&gt;</span><br><span class="line">           &lt;p&gt; task: {{ item.task }} &lt;/p&gt;</span><br><span class="line">           &lt;p&gt; {{ index }} &lt;/p&gt;</span><br><span class="line">       &lt;/li&gt;</span><br><span class="line">   &lt;/ul&gt;</span><br><span class="line">   &lt;hr&gt;</span><br><span class="line">   &lt;h3&gt; 嵌套 &lt;/h3&gt;</span><br><span class="line">   &lt;ul&gt;</span><br><span class="line">       &lt;li v-for = " item in lists " :key = "item.id"&gt;</span><br><span class="line">           &lt;p&gt; id: {{ item.id }} &lt;/p&gt;</span><br><span class="line">           &lt;ul&gt;</span><br><span class="line">               &lt;li v-for = "todo in item.todos"&gt;</span><br><span class="line">                     todos中的数据 -- {{ todo }}</span><br><span class="line">               &lt;/li&gt;</span><br><span class="line">           &lt;/ul&gt;</span><br><span class="line">       &lt;/li&gt;</span><br><span class="line">   &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  new Vue({</span><br><span class="line">       el: '#app',</span><br><span class="line">       data: {</span><br><span class="line">           arr: [1,2,3,4],</span><br><span class="line">           obj: {</span><br><span class="line">               id: 1,</span><br><span class="line">               name: '骏哥',</span><br><span class="line">               sex: 'man',</span><br><span class="line">               age: 18</span><br><span class="line">           },</span><br><span class="line">           json: [</span><br><span class="line">               {</span><br><span class="line">                   id: 1,</span><br><span class="line">                   task: '敲代码1'</span><br><span class="line">               },</span><br><span class="line">               {</span><br><span class="line">                   id: 2,</span><br><span class="line">                   task: '敲代码2'</span><br><span class="line">               }</span><br><span class="line">               ],</span><br><span class="line">               lists: [</span><br><span class="line">               {</span><br><span class="line">                   id: 1,</span><br><span class="line">                   todos: {</span><br><span class="line">                   id: 1,</span><br><span class="line">                   name: '连城'</span><br><span class="line">               }</span><br><span class="line">               },</span><br><span class="line">               {</span><br><span class="line">                   id: 2,</span><br><span class="line">                   todos: {</span><br><span class="line">                       id: 2,</span><br><span class="line">                       name: '文武'</span><br><span class="line">                 }</span><br><span class="line">                   }</span><br><span class="line">                  ]</span><br><span class="line">           }</span><br><span class="line">   })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="vue中如何给dom添加类名"><a href="#vue中如何给dom添加类名" class="headerlink" title="vue中如何给dom添加类名"></a>vue中如何给dom添加类名</h4><ol><li>直接在dom上绑定类名</li><li>vue中类名绑定 - 对象形式<br>目的： dom身上属性class 要和 数据绑定<br>解决：<code>v-bind</code><br>数据中key，我们起的和绑定的对象中的key一样，但是你得知道这两个东西不一样<br><code>&lt;p :class = "{ size,bg_color }"&gt;&lt;/p&gt;</code><br>size是自定义的属性， 它的属性值是undefined， 相当于是false<br><code>&lt;p :class = "{ size: true, bg_color: true }"&gt;&lt;/p&gt;</code><br>size也是自定义属性，他的属性是true,那么就会加上去<br><code>&lt;p :class = "{ [s]: true, [bg_color]: true }"&gt;&lt;/p&gt;</code><br>格式： <code>v-bind:class = "{ 属性： boolean }"</code><br>格式： <code>v-bind:class = "{ [data]： boolean }"</code></li><li>vue中类名绑定的形式 - 数组的形式 【 推荐 】<br>格式： <code>v-bind:class = "[ 数据 ]"</code>  </li><li>类名绑定不会覆盖原先的类名</li><li>为什么要绑定类名<br>指令是用来操作dom<br>目的： 为了将来通过数据来操作类名，类名操作dom<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        .size{</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">        }</span><br><span class="line">        .bg_color{</span><br><span class="line">          background: red;</span><br><span class="line">        }</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;h3&gt; v-class &lt;/h3&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h3&gt; vue中类名添加第一种 &lt;/h3&gt;</span><br><span class="line">    &lt;p class="size bg_color"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h3&gt; vue中类名添加第二种 - 对象的形式&lt;/h3&gt;</span><br><span class="line">    &lt;p :class = "{ size: true,bg_color: false }"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p :class = "{ size: true, bg_color: true }"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p :class = "{ [s]: true, [bg_color]: true }"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p :class = "{ [s]: 5&gt;3?true: false, [bg_color]: true }"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h3&gt; vue中类名添加的第三种形式 - 数组形式（ 推荐 ）&lt;/h3&gt;</span><br><span class="line">    &lt;p :class = "['size','bg_color']"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p :class = "[ s, bg_color ]"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p :class = "[ flag? s:'box', bg_color]"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p :class = "[ flag? s:'box', bg_color]" class = "yyb"&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue({</span><br><span class="line">    el: '#app',</span><br><span class="line">    data: {</span><br><span class="line">        msg: 'hello Vue.js',</span><br><span class="line">        s: 'size',</span><br><span class="line">        bg_color: 'bg_color',</span><br><span class="line">        flag: true</span><br><span class="line">           }</span><br><span class="line">    });</span><br><span class="line">   var a = {</span><br><span class="line">        name: 'yhk'</span><br><span class="line">        }</span><br><span class="line">   var b = {</span><br><span class="line">        name: 'mjn'</span><br><span class="line">        }</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure></li></ol><p>样式的绑定：<br>v-bind:style = “”</p><ol><li>对象的形式</li><li>数组的形式<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id="app"&gt;</span><br><span class="line">        &lt;h3&gt; style &lt;/h3&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;h3&gt; style - 对象形式 &lt;/h3&gt;</span><br><span class="line">        &lt;p :style = "{ width: size.width,height: size.height,background: 'red'}"&gt;&lt;/p&gt;</span><br><span class="line">        &lt;h3&gt; style - 数组的形式 &lt;/h3&gt;</span><br><span class="line">        &lt;p :style = "[ { width: '100px',background: 'blue'},{ height: '100px' } ]"&gt; &lt;/p&gt;</span><br><span class="line">        &lt;p :style = "[ size,bg ]"&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue({</span><br><span class="line">        el: '#app',</span><br><span class="line">        data: {</span><br><span class="line">            size: {</span><br><span class="line">                width: '100px',</span><br><span class="line">                height: '100px'</span><br><span class="line">            },</span><br><span class="line">            bg: {</span><br><span class="line">                 background: 'purple'</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>问题： javascript事件添加有几种形式</p><ol><li>事件绑定<br><code>dom.onclick = function () {}</code><br>dom: 事件源<br>on: 绑定事件的形式<br>click: 事件类型<br>function（）{} 事件处理函数</li><li>事件监听 ：<code>addeventListener</code></li><li>直接在标签中绑定事件<br><code>&lt;div onclick = "事件名称"&gt;&lt;/div&gt;</code><br>vue采用了第三种，也是通过属性的形式绑定在dom身上<br><code>&lt;div v-on:click = "事件名称"&gt;&lt;/div&gt;</code><br>简写：<br><code>&lt;button @click = "helloHandler"&gt; 点击 &lt;/button&gt;</code><br>v-on使用<br>事件源<br>事件绑定形式<br>事件类型<br>事件处理程序<br>v-on:eventType = “ handlerName “<br>简写 v-on: — > @</li></ol><p>问题： 函数调用有哪些方法？<br>直接调用 ()<br>事件<br>事件对象也可以正常使用<br>在事件处理程序中， 写e就可以了<br>问题： 如果事件处理程序中有三个参数，第三个参数才是事件对象e,如何实现<br>分析： 我们发现事件处理程序中的第三个参数 e 不在是事件对象了，而是一个undefined<br>解决： 在函数执行时，传入一个实际参数 $event 来代表事件对象</p><p>问题： 如果我们通过 length = 0 , 来清空一个数组，那么vue检测不到这个变动<br>解决方法： 使用splice<br>问题： 我们直接修改一个数组下的一个数据时，发现下标不能检测变动了<br>解决方法： 使用 Vue.set / this.$set</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;button @click = "add"&gt; + &lt;/button&gt;</span><br><span class="line">    &lt;button @click = "remove"&gt; - &lt;/button&gt;</span><br><span class="line">    &lt;button @click = "indexHandler"&gt; 修改第二条数据 &lt;/button&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for =" item in lists " :key = "item.id"&gt;</span><br><span class="line">                  {{ item.task }}</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;button @click = "arrChange"&gt; 修改第二条数据 &lt;/button&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for = " (item,index ) in arr " :key = "index"&gt;</span><br><span class="line">                  {{ item }}</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">/*</span><br><span class="line">业务： 点击这个按钮，添加一条新的数据放在列表数据中</span><br><span class="line">*/</span><br><span class="line">new Vue({</span><br><span class="line">        el: '#app',</span><br><span class="line">        data: {</span><br><span class="line">                arr: [1,2,3],</span><br><span class="line">                lists: [</span><br><span class="line">                    {</span><br><span class="line">                        id: 1,</span><br><span class="line">                        task: '锻炼1'</span><br><span class="line">                    },</span><br><span class="line">                    {</span><br><span class="line">                        id: 2,</span><br><span class="line">                        task: '敲代码'</span><br><span class="line">                    }</span><br><span class="line">                ]</span><br><span class="line">        },</span><br><span class="line">        methods: {</span><br><span class="line">                add () {</span><br><span class="line">                    // console.log( this )</span><br><span class="line">                    this.lists.push({</span><br><span class="line">                    id: this.lists.length + 1,</span><br><span class="line">                    task: '打篮球'</span><br><span class="line">                    })</span><br><span class="line">                },</span><br><span class="line">                remove () {</span><br><span class="line">                    this.lists.pop()</span><br><span class="line">                },</span><br><span class="line">                indexHandler () {</span><br><span class="line">                    //将列表中的第二个数据中的task任务修改为 撸猫</span><br><span class="line">                    this.lists[1] = {</span><br><span class="line">                            id: 2,</span><br><span class="line">                            task: '骏哥'</span><br><span class="line">                       }</span><br><span class="line">                        // 将整个列表清空</span><br><span class="line">                        // this.lists.length = 0</span><br><span class="line">                        // this.lists.splice( 0 )</span><br><span class="line">                },</span><br><span class="line">                arrChange () {</span><br><span class="line">                        // this.arr[ 1 ] = '骏哥' 不可以检测到的</span><br><span class="line">                        // this.$set( this.arr,'1','骏哥' )</span><br><span class="line">                        Vue.set( this.arr,'1','骏哥')</span><br><span class="line">                }</span><br><span class="line">        }</span><br><span class="line"> })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p>双向数据绑定<br>默认绑定value值<br>v-model应用于表单元素</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;input type="text" v-model = "msg"&gt;</span><br><span class="line">    &lt;p&gt; {{ msg }} &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    new Vue({</span><br><span class="line">        el: '#app',</span><br><span class="line">        data: {</span><br><span class="line">         msg: 'hello Vue.js'</span><br><span class="line">    }</span><br><span class="line"> })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vue基础语法&quot;&gt;&lt;a href=&quot;#vue基础语法&quot; class=&quot;headerlink&quot; title=&quot;vue基础语法&quot;&gt;&lt;/a&gt;vue基础语法&lt;/h1&gt;&lt;h2 id=&quot;mutache-语法糖&quot;&gt;&lt;a href=&quot;#mutache-语法糖&quot; class=&quot;headerlink&quot; title=&quot;mutache 语法糖&quot;&gt;&lt;/a&gt;mutache 语法糖&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div id=&quot;app&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;p&amp;gt; {{ this.msg }} &amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;p&amp;gt; {{ this.$data.msg }} &amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;p&amp;gt; {{ this._data.msg }} &amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;p&amp;gt; {{ msg }} &amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;jsx&lt;/code&gt;: javascript + xml&lt;br&gt;可以让我们在dom结构中输写javascript&lt;/p&gt;

&lt;p&gt;是 this.msg 简写&lt;br&gt;this.$data.msg -&gt; this.msg -&gt; msg&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://yhk15978.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="https://yhk15978.github.io/tags/Vue/"/>
    
      <category term="前端" scheme="https://yhk15978.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yhk15978.github.io//posts/4a17b156/"/>
    <id>https://yhk15978.github.io//posts/4a17b156/</id>
    <published>2019-06-18T13:33:32.075Z</published>
    <updated>2019-06-19T11:44:20.174Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
