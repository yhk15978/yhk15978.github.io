<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yhkhome</title>
  
  <subtitle>姚恒康的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yhk15978.github.io/"/>
  <updated>2019-07-05T03:00:25.709Z</updated>
  <id>https://yhk15978.github.io/</id>
  
  <author>
    <name>姚恒康</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>过滤器&amp;过渡效果 &amp;&amp; 动画 &amp; 生命周期！！ &amp; swiper&amp;自定义指令</title>
    <link href="https://yhk15978.github.io//posts/yhk12342/"/>
    <id>https://yhk15978.github.io//posts/yhk12342/</id>
    <published>2019-07-05T02:57:57.907Z</published>
    <updated>2019-07-05T03:00:25.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><ol><li>什么是过滤器？ 用来格式化数据的一个函数 $ 10 ‘$’ + price 日期的格式化<br>vue 1.x 版本借鉴了 angular , 提供 10 个过滤器， 包括有： 日期 小数点位数保留 货币 大小写 等<br>Vue 2.x 废弃了这 10个过滤器，但是它提供了自定义过滤器的方式</li><li>使用方式</li><li>全局定义过滤器<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt; {{ time | timeFilter('/')}} &lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure></li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">'timeFilter'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"> val,type </span>) </span>{</span><br><span class="line">            <span class="built_in">console</span>.log( val )</span><br><span class="line">        <span class="comment">//val 就是我们获得的数据</span></span><br><span class="line">        <span class="comment">// return newVal return 的结果就是格式化之后的新数据 return的结果就是页面呈现的结果</span></span><br><span class="line">            type = type || <span class="string">'-'</span></span><br><span class="line">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span> ( val )</span><br><span class="line">            <span class="comment">// 2019-6-26</span></span><br><span class="line">            <span class="keyword">return</span> date.getFullYear() + type + ( date.getMonth() + <span class="number">1</span> ) + type + date.getDate()</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><ol><li><p>局部定义过滤器</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: {</span><br><span class="line">            time: <span class="built_in">Date</span>.now()</span><br><span class="line">    },</span><br><span class="line">    filters: { <span class="comment">//过滤器的配置项</span></span><br><span class="line">            <span class="string">'timeFilter'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"> val,type </span>)</span>{</span><br><span class="line">                    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span> ( val )</span><br><span class="line">                    <span class="keyword">return</span> date.getFullYear() + type + ( date.getMonth() + <span class="number">1</span> ) + type + date.getDate()</span><br><span class="line">                  }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li><li><p>过滤器要想获得我们的数据，要通过一个叫做 ‘管道符 | ’ 来获取数据</p></li><li><p>过滤器是对已经有的数据进行格式化，也就是必须先有数据，在去格式化</p></li></ol><h2 id="过渡效果-amp-amp-动画"><a href="#过渡效果-amp-amp-动画" class="headerlink" title="过渡效果 && 动画"></a>过渡效果 && 动画</h2><ol><li>使用形式</li></ol><ul><li><p>在 CSS 过渡和动画中自动应用 class</p><p> Vue 提供了 <code>transition</code> 的封装组件，在下列情形中，可以给任何元素和组件添加进入/离开过渡</p><ul><li>条件渲染 (使用 <code>v-if</code>)</li><li>条件展示 (使用 <code>v-show</code>)</li><li>动态组件</li><li>组件根节点</li></ul></li></ul><pre><code>当插入或删除包含在 transition 组件中的元素时，Vue 将会做以下处理：1.         自动嗅探目标元素是否应用了 CSS 过渡或动画，如果是，在恰当的时机添加/删除 CSS 类名。2.         如果过渡组件提供了 JavaScript 钩子函数，这些钩子函数将在恰当的时机被调用。3.         如果没有找到 JavaScript 钩子并且也没有检测到 CSS 过渡/动画，DOM 操作 (插入/删除) 在下一帧中立即执行。在进入/离开的过渡中，会有 6 个 class 切换。1.     `v-enter`：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。2.     `v-enter-active`：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。3.    ` v-enter-to`: 2.1.8版及以上 定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 `v-enter` 被移除)，在过渡/动画完成之后移除。4.     `v-leave`: 定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。5.     `v-leave-active`：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。6.    ` v-leave-to`: 2.1.8版及以上 定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时`v-leave`被删除)，在过渡/动画完成之后移除。![5990c1dff7dc7a8fb3b34b4462bd0105.png](en-resource://database/757:1)案例：<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="demo"&gt; </span><br><span class="line">    &lt;button v-on:click="show = !show"&gt; Toggle &lt;/button&gt;     </span><br><span class="line">    &lt;transition name="fade"&gt;</span><br><span class="line">             &lt;p v-if="show"&gt;hello&lt;/p&gt; </span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue({ </span><br><span class="line">    el: <span class="string">'#demo'</span>,</span><br><span class="line">    data: { <span class="attr">show</span>: <span class="literal">true</span> }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fade-enter-active</span>, <span class="selector-class">.fade-leave-active</span> {</span><br><span class="line">         <span class="attribute">transition</span>: opacity .<span class="number">5s</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.fade-enter</span>, <span class="selector-class">.fade-leave-to</span> <span class="comment">/* .fade-leave-active below version 2.1.8 */</span> { </span><br><span class="line">         <span class="attribute">opacity</span>: <span class="number">0</span>; </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></code></pre><p>对于这些在过渡中切换的类名来说，如果你使用一个没有名字的 <code>&lt;transition&gt;</code>，则 <code>v-</code> 是这些类名的默认前缀。如果你使用了<code>&lt;transition name="my-transition"&gt;</code>，那么 <code>v-enter</code> 会替换为 <code>my-transition-enter</code>。<code>v-enter-active</code> 和 <code>v-leave-active</code> 可以控制进入/离开过渡的不同的缓和曲线</p><ul><li><p>可以配合使用第三方 CSS 动画库，如 Animate.css </p> <figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href="https://cdn.jsdelivr.net/npm/animate.css@3.5.1" rel="stylesheet" type="text/css"&gt;</span><br><span class="line">&lt;div id="example-3"&gt; </span><br><span class="line">    &lt;button @click="show = !show"&gt; Toggle render &lt;/button&gt; </span><br><span class="line">    &lt;transition name="custom-classes-transition"</span><br><span class="line">     enter-active-class="animated tada"</span><br><span class="line">     leave-active-class="animated bounceOutRight" &gt;</span><br><span class="line">        &lt;p v-if="show"&gt;hello&lt;/p&gt; </span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure></li><li><p>在过渡钩子函数中使用 JavaScript 直接操作 DOM<br> 可以在属性中声明 JavaScript 钩子</p>  <figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition </span><br><span class="line">    v-on:before-enter="beforeEnter" </span><br><span class="line">    v-on:enter="enter" </span><br><span class="line">    v-on:after-enter="afterEnter"</span><br><span class="line">    v-on:enter-cancelled="enterCancelled"</span><br><span class="line">    v-on:before-leave="beforeLeave" </span><br><span class="line">    v-on:leave="leave" </span><br><span class="line">    v-on:after-leave="afterLeave" </span><br><span class="line">    v-on:leave-cancelled="leaveCancelled" &gt;</span><br><span class="line">    &lt;!-- ... --&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></tbody></table></figure>  <figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">methods: {</span><br><span class="line">    <span class="comment">// -------- </span></span><br><span class="line">    <span class="comment">// 进入中 </span></span><br><span class="line">    <span class="comment">// -------- </span></span><br><span class="line">    beforeEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>{ </span><br><span class="line">              <span class="comment">// ... </span></span><br><span class="line">    }, </span><br><span class="line">    <span class="comment">// 当与 CSS 结合使用时 </span></span><br><span class="line">    <span class="comment">// 回调函数 done 是可选的</span></span><br><span class="line">    enter: <span class="function"><span class="keyword">function</span> (<span class="params">el, done</span>) </span>{ </span><br><span class="line">            <span class="comment">// ... </span></span><br><span class="line">            done()</span><br><span class="line">    },</span><br><span class="line">    afterEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>{</span><br><span class="line">          <span class="comment">// ... </span></span><br><span class="line">    }, </span><br><span class="line">    enterCancelled: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>{ </span><br><span class="line">          <span class="comment">// ... </span></span><br><span class="line">    }, </span><br><span class="line">    <span class="comment">// --------</span></span><br><span class="line">    <span class="comment">// 离开时</span></span><br><span class="line">    <span class="comment">// -------- </span></span><br><span class="line">    beforeLeave: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>{</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">    }, </span><br><span class="line">    <span class="comment">// 当与 CSS 结合使用时</span></span><br><span class="line">    <span class="comment">// 回调函数 done 是可选的</span></span><br><span class="line">    leave: <span class="function"><span class="keyword">function</span> (<span class="params">el, done</span>) </span>{ </span><br><span class="line">            <span class="comment">// ... </span></span><br><span class="line">            done() </span><br><span class="line">    },</span><br><span class="line">    afterLeave: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>{</span><br><span class="line">           <span class="comment">// ...</span></span><br><span class="line">    },</span><br><span class="line">    <span class="comment">// leaveCancelled 只用于 v-show 中</span></span><br><span class="line">    leaveCancelled: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>{ </span><br><span class="line">               <span class="comment">// ...</span></span><br><span class="line">    } </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>可以配合使用第三方 JavaScript 动画库，如 Velocity.js</p> <figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Velocity 和 jQuery.animate 的工作方式类似，也是用来实现 JavaScript 动画的一个很棒的选择 --&gt; </span><br><span class="line">&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;div id="example-4"&gt; </span><br><span class="line">    &lt;button @click="show = !show"&gt; Toggle &lt;/button&gt;</span><br><span class="line">    &lt;transition</span><br><span class="line">            v-on:before-enter="beforeEnter"</span><br><span class="line">            v-on:enter="enter"</span><br><span class="line">            v-on:leave="leave"</span><br><span class="line">            v-bind:css="false" &gt; </span><br><span class="line">            &lt;p v-if="show"&gt; Demo &lt;/p&gt; </span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>  <figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue({ </span><br><span class="line">    el: <span class="string">'#example-4'</span>,</span><br><span class="line">    data: { <span class="attr">show</span>: <span class="literal">false</span> },</span><br><span class="line">    methods: { </span><br><span class="line">        beforeEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>{</span><br><span class="line">                el.style.opacity = <span class="number">0</span> </span><br><span class="line">                el.style.transformOrigin = <span class="string">'left'</span></span><br><span class="line">        }, </span><br><span class="line">        enter: <span class="function"><span class="keyword">function</span> (<span class="params">el, done</span>) </span>{ </span><br><span class="line">                Velocity(el, { <span class="attr">opacity</span>: <span class="number">1</span>, <span class="attr">fontSize</span>: <span class="string">'1.4em'</span> }, { <span class="attr">duration</span>: <span class="number">300</span> }) </span><br><span class="line">                Velocity(el, { <span class="attr">fontSize</span>: <span class="string">'1em'</span> }, { <span class="attr">complete</span>: done })</span><br><span class="line">        }, </span><br><span class="line">        leave: <span class="function"><span class="keyword">function</span> (<span class="params">el, done</span>) </span>{ </span><br><span class="line">                Velocity(el, { <span class="attr">translateX</span>: <span class="string">'15px'</span>, <span class="attr">rotateZ</span>: <span class="string">'50deg'</span> }, { <span class="attr">duration</span>: <span class="number">600</span> }) </span><br><span class="line">                Velocity(el, { <span class="attr">rotateZ</span>: <span class="string">'100deg'</span> }, { <span class="attr">loop</span>: <span class="number">2</span> }) </span><br><span class="line">                Velocity(el, {</span><br><span class="line">                        rotateZ: <span class="string">'45deg'</span>,</span><br><span class="line">                        translateY: <span class="string">'30px'</span>,</span><br><span class="line">                        translateX: <span class="string">'30px'</span>, </span><br><span class="line">                        opacity: <span class="number">0</span></span><br><span class="line">             }, { <span class="attr">complete</span>: done })</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li></ul><ol start="2"><li>过渡模式 mode</li></ol><p>同时生效的进入和离开的过渡不能满足所有要求，所以 Vue 提供了 <strong>过渡模式</strong><br>in-out：新元素先进行过渡，完成之后当前元素过渡离开。<br>out-in：当前元素先进行过渡，完成之后新元素过渡进入。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;link href="https://cdn.bootcss.com/animate.css/3.7.2/animate.css" rel="stylesheet"&gt;</span><br><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;button @click = "change"&gt; 切换 &lt;/button&gt;</span><br><span class="line">    &lt;transition</span><br><span class="line">        mode = "in-out"</span><br><span class="line">        enter-active-class = "animated slideInLeft"</span><br><span class="line">        leave-active-class = "animated slideOutLeft"</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;p v-if = "flag"&gt; on &lt;/p&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">   &lt;transition</span><br><span class="line">        mode = "out-in"</span><br><span class="line">        enter-active-class = "animated slideInLeft"</span><br><span class="line">        leave-active-class = "animated slideOutLeft"</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;p v-if = "!flag"&gt; off &lt;/p&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: {</span><br><span class="line">            flag: <span class="literal">true</span></span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        change () {</span><br><span class="line">                 <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ol><li><p>什么是生命周期？<br>vue中的生命周期指的是 组件 从创建到销毁一个过程，在这个过程中，我们在每一个特定的阶段会触发一些方法（ 这些方法具备一些功能），我们给这些方法起了个名字叫做（ 生命周期钩子函数/ 组件钩子 ）</p></li><li><p>为什么要学习生命周期？<br>因为我们想在生命周期钩子中实现项目功能，那么我们必须知道每一个钩子函数的具体用途</p></li><li><p>这个生命周期是谁的生命周期？<br>组件</p></li><li><p>生命周期图示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cn.vuejs.org/images/lifecycle.png" alt="lifecycle.png" title>                </div>                <div class="image-caption">lifecycle.png</div>            </figure></li><li><p>如何使用生命周期钩子函数</p><p> Vue的生命周期分为三个阶段，分别为： 初始化，运行中， 销毁，一共8个钩子函数<br> 注意： 生命周期钩子函数不允许写成箭头函数</p><h5 id="初始化："><a href="#初始化：" class="headerlink" title="初始化："></a>初始化：</h5><p>beforeCreate </p><ol><li>组件创建前触发，目的是为了组件的生命周期 和 组件中的事件做准备</li><li>数据没有获得，真实dom也没有渲染出来</li><li>可以进行数据请求，提供了一次数据修改的机会</li><li>执行一次<br>created </li><li>组件创建结束</li><li>数据得到了，真实dom没有渲染出来</li><li>可以进行数据请求，提供了一次数据修改的机会</li><li>执行了一次<br>beforeMount</li><li>组件挂载前</li><li>任务： 判断el 判断 template<br>如果el没有，那么我们需要手动挂载，如果有，那么判断template<br>如果template有，那么进行render函数<br>如果template没有，那么通过 outerHTML 手动书写模板</li><li>数据可以获得，但是真实dom还没有渲染</li><li>可以进行数据请求，也提供了一次数据修改的机会</li><li>执行一次<br>mounted </li><li>组件挂载结束</li><li>数据获得了，真实dom也获得了</li><li>可以进行数据请求，也就可以修改数据</li><li>执行了一次</li><li>可以进行真实dom的操作了（ 可以进行第三方库的实例化了 ）<br>综上总结：</li></ol></li><li><p>数据请求一般写在created里面</p></li><li><p>第三方库实例化我们一般会往mounted中写</p><h5 id="运行中："><a href="#运行中：" class="headerlink" title="运行中："></a>运行中：</h5></li></ol><p>触发条件：数据更新<br>beforeUpdate<br>    1. 更新前<br>    2. 重新渲染 VDOM , 然后通过diff算法比较两次vdom,生成patch 补丁对象<br>    3. 这个钩子函数更多的是内部进行一些操作，我们就不在多干预了<br>    4. 可以触发多次<br> updated<br>    1. 更新结束<br>    2. 真实dom得到了，数据也得到了（ 更新后的 ）<br>    3. 动态数据获取（ 第三方库实例化 ）</p><h5 id="销毁："><a href="#销毁：" class="headerlink" title="销毁："></a>销毁：</h5><p>触发条件： 当组件销毁时：<br>beforeDestroy<br>destroyed</p><p>这两个钩子功能一致的，这两个钩子没有太大的区别</p><p>作用：<br>用来做善后的,比如计时器的关闭 第三方实例的删除</p><p>Vue的销毁有两种形式</p><ol><li><p>通过开关的形式<code>v-if</code> - 外部销毁</p></li><li><p>通过调用 $destroy 方法 - 内部销毁</p></li></ol><p>对比： 内部销毁 vs 外部销毁<br>外部销毁不仅能销毁组件，也能销毁该组件的dom结构<br>内部销毁只能销毁组件，不能销毁组件的dom结构</p><h2 id="swiper"><a href="#swiper" class="headerlink" title="swiper"></a>swiper</h2><p>普通使用：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.0.2/css/swiper.min.css"&gt;</span><br><span class="line">&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.0.2/js/swiper.js"&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="swiper-container"&gt;</span><br><span class="line">    &lt;div class="swiper-wrapper"&gt;</span><br><span class="line">            &lt;div class="swiper-slide"&gt;Slide 1&lt;/div&gt;</span><br><span class="line">            &lt;div class="swiper-slide"&gt;Slide 2&lt;/div&gt;</span><br><span class="line">            &lt;div class="swiper-slide"&gt;Slide 3&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 如果需要分页器 --&gt;</span><br><span class="line">    &lt;div class="swiper-pagination"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!-- 如果需要导航按钮 --&gt;</span><br><span class="line">    &lt;div class="swiper-button-prev"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="swiper-button-next"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!-- 如果需要滚动条 --&gt;</span><br><span class="line">    &lt;div class="swiper-scrollbar"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 第三库实例化</span></span><br><span class="line"><span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper (<span class="string">'.swiper-container'</span>, {</span><br><span class="line">        <span class="comment">// direction: 'vertical', // 垂直切换选项</span></span><br><span class="line">        loop: <span class="literal">true</span>, <span class="comment">// 循环模式选项</span></span><br><span class="line">        <span class="comment">// 如果需要分页器</span></span><br><span class="line">        pagination: {</span><br><span class="line">                el: <span class="string">'.swiper-pagination'</span>,</span><br><span class="line">        },</span><br><span class="line">        <span class="comment">// 如果需要前进后退按钮</span></span><br><span class="line">        navigation: {</span><br><span class="line">                nextEl: <span class="string">'.swiper-button-next'</span>,</span><br><span class="line">                prevEl: <span class="string">'.swiper-button-prev'</span>,</span><br><span class="line">        },</span><br><span class="line">        <span class="comment">// 如果需要滚动条</span></span><br><span class="line">        scrollbar: {</span><br><span class="line">                  el: <span class="string">'.swiper-scrollbar'</span>,</span><br><span class="line">        },</span><br><span class="line">        autoplay: <span class="literal">true</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>在Vue中使用：</p><ol><li>静态数据第三方库实例化放在 <code>mounted</code>中<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id="app"&gt;</span><br><span class="line">        &lt;Banner&gt;&lt;/Banner&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;template id = "banner"&gt;</span><br><span class="line">    &lt;div class="swiper-container"&gt;</span><br><span class="line">            &lt;div class="swiper-wrapper"&gt;</span><br><span class="line">            &lt;div class="swiper-slide"</span><br><span class="line">                v-for = "banner in banners"</span><br><span class="line">                :key = "banner.id"</span><br><span class="line">            &gt;</span><br><span class="line">                    {{ banner.text}}</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;!-- 如果需要分页器 --&gt;</span><br><span class="line">            &lt;div class="swiper-pagination"&gt;&lt;/div&gt;</span><br><span class="line">            &lt;!-- 如果需要导航按钮 --&gt;</span><br><span class="line">            &lt;div class="swiper-button-prev"&gt;&lt;/div&gt;</span><br><span class="line">            &lt;div class="swiper-button-next"&gt;&lt;/div&gt;</span><br><span class="line">            &lt;!-- 如果需要滚动条 --&gt;</span><br><span class="line">            &lt;div class="swiper-scrollbar"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure></li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//第三方库的实例化要求，必须真实dom已经存在</span></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">'Banner'</span>,{</span><br><span class="line">    template: <span class="string">'#banner'</span>,</span><br><span class="line">    data () {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            banners: [</span><br><span class="line">                    {</span><br><span class="line">                        id: <span class="number">1</span>,</span><br><span class="line">                        text: <span class="string">'slider 1'</span></span><br><span class="line">                    },</span><br><span class="line">                    {</span><br><span class="line">                        id: <span class="number">2</span>,</span><br><span class="line">                        text: <span class="string">'slider 2'</span></span><br><span class="line">                    },</span><br><span class="line">                    {</span><br><span class="line">                        id: <span class="number">3</span>,</span><br><span class="line">                        text: <span class="string">'slider 3'</span></span><br><span class="line">                    }</span><br><span class="line">            ]</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    beforeCreate () {</span><br><span class="line">    },</span><br><span class="line">    created () {</span><br><span class="line">    },</span><br><span class="line">    beforeMount () {</span><br><span class="line">    },</span><br><span class="line">    mounted () {</span><br><span class="line">        <span class="comment">//静态数据的第三方实例化</span></span><br><span class="line">        <span class="comment">// 第三库实例化</span></span><br><span class="line">        <span class="keyword">this</span>.mySwiper = <span class="keyword">new</span> Swiper (<span class="string">'.swiper-container'</span>, {</span><br><span class="line">        <span class="comment">// direction: 'vertical', // 垂直切换选项</span></span><br><span class="line">        loop: <span class="literal">true</span>, <span class="comment">// 循环模式选项</span></span><br><span class="line">        <span class="comment">// 如果需要分页器</span></span><br><span class="line">        pagination: {</span><br><span class="line">             el: <span class="string">'.swiper-pagination'</span>,</span><br><span class="line">        },</span><br><span class="line">        <span class="comment">// 如果需要前进后退按钮</span></span><br><span class="line">        navigation: {</span><br><span class="line">                nextEl: <span class="string">'.swiper-button-next'</span>,</span><br><span class="line">                prevEl: <span class="string">'.swiper-button-prev'</span>,</span><br><span class="line">        },</span><br><span class="line">        <span class="comment">// 如果需要滚动条</span></span><br><span class="line">        scrollbar: {</span><br><span class="line">                el: <span class="string">'.swiper-scrollbar'</span>,</span><br><span class="line">        },</span><br><span class="line">        autoplay: <span class="literal">true</span></span><br><span class="line">        })</span><br><span class="line">   }</span><br><span class="line">})</span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">el: <span class="string">'#app'</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>动态数据第三方库实例化放在请求数据中加上异步执行函数中，因为放在updated中每次数据变动都会重新实例化，加上if判断单例也可以，但是要是有多个第三方库就比较繁琐了<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;Banner&gt;&lt;/Banner&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;template id = "banner"&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type="text" v-model = "num"&gt;</span><br><span class="line">        &lt;div class="swiper-container"&gt;</span><br><span class="line">            &lt;div class="swiper-wrapper"&gt;</span><br><span class="line">            &lt;div class="swiper-slide"</span><br><span class="line">                v-for = "banner in banners"</span><br><span class="line">                :key = "banner.id"</span><br><span class="line">                &gt;</span><br><span class="line">                  {{ banner.text}}</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;!-- 如果需要分页器 --&gt;</span><br><span class="line">            &lt;div class="swiper-pagination"&gt;&lt;/div&gt;</span><br><span class="line">            &lt;!-- 如果需要导航按钮 --&gt;</span><br><span class="line">            &lt;div class="swiper-button-prev"&gt;&lt;/div&gt;</span><br><span class="line">            &lt;div class="swiper-button-next"&gt;&lt;/div&gt;</span><br><span class="line">            &lt;!-- 如果需要滚动条 --&gt;</span><br><span class="line">            &lt;div class="swiper-scrollbar"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure></li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第三方库的实例化要求，必须真实dom已经存在</span></span><br><span class="line"><span class="comment">业务： 动态数据请求，然后进行第三方库实例化的优化</span></span><br><span class="line"><span class="comment">理由： 将动态数据的第三方库实例化放在updated中是有弊端的，弊端是第三方库会重复实例化</span></span><br><span class="line"><span class="comment">解决：</span></span><br><span class="line"><span class="comment">1. 加判断条件 if( this.mySwiper ) return false</span></span><br><span class="line"><span class="comment">2. 将实例化放到异步队列中去</span></span><br><span class="line"><span class="comment">- 将实例化放在created的数据请求中，然后放在setTimeout中</span></span><br><span class="line"><span class="comment">- vue提供了一个它认为是最好的方案： nextTick</span></span><br><span class="line"><span class="comment">使用： Vue.nextTick this.$nextTick</span></span><br><span class="line"><span class="comment">nextTick表示组件渲染结束之后这个方法才会调用</span></span><br><span class="line"><span class="comment">最优解决方案： nextTick</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Vue.component(<span class="string">'Banner'</span>,{</span><br><span class="line">        template: <span class="string">'#banner'</span>,</span><br><span class="line">        data () {</span><br><span class="line">            <span class="keyword">return</span> {</span><br><span class="line">            banners: <span class="literal">null</span>,</span><br><span class="line">            num:<span class="number">100</span></span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        beforeCreate () {</span><br><span class="line">        },</span><br><span class="line">        created () {</span><br><span class="line">        <span class="comment">//数据请求一般写在这里</span></span><br><span class="line">        fetch(<span class="string">'./data.json'</span>)</span><br><span class="line">        .then( res =&gt; res.json())</span><br><span class="line">        .then( data =&gt; {</span><br><span class="line">        <span class="keyword">this</span>.banners = data</span><br><span class="line">        <span class="comment">// setTimeout(()=&gt;{</span></span><br><span class="line">        <span class="comment">// this.mySwiper = new Swiper ('.swiper-container', {</span></span><br><span class="line">        <span class="comment">// // direction: 'vertical', // 垂直切换选项</span></span><br><span class="line">        <span class="comment">// loop: true, // 循环模式选项</span></span><br><span class="line">        <span class="comment">// // 如果需要分页器</span></span><br><span class="line">        <span class="comment">// pagination: {</span></span><br><span class="line">        <span class="comment">// el: '.swiper-pagination',</span></span><br><span class="line">        <span class="comment">// },</span></span><br><span class="line">        <span class="comment">// // 如果需要前进后退按钮</span></span><br><span class="line">        <span class="comment">// navigation: {</span></span><br><span class="line">        <span class="comment">// nextEl: '.swiper-button-next',</span></span><br><span class="line">        <span class="comment">// prevEl: '.swiper-button-prev',</span></span><br><span class="line">        <span class="comment">// },</span></span><br><span class="line">        <span class="comment">// // 如果需要滚动条</span></span><br><span class="line">        <span class="comment">// scrollbar: {</span></span><br><span class="line">        <span class="comment">// el: '.swiper-scrollbar',</span></span><br><span class="line">        <span class="comment">// },</span></span><br><span class="line">        <span class="comment">// autoplay: true</span></span><br><span class="line">        <span class="comment">// })</span></span><br><span class="line">        <span class="comment">// },0)</span></span><br><span class="line">        <span class="keyword">this</span>.$nextTick( () =&gt; {</span><br><span class="line">        <span class="keyword">this</span>.swiper = <span class="keyword">new</span> Swiper(<span class="string">'.swiper-container'</span>,{</span><br><span class="line">                    loop: <span class="literal">true</span>,</span><br><span class="line">                    autoplay: <span class="literal">true</span>,</span><br><span class="line">                    pagination: {</span><br><span class="line">                    el: <span class="string">'.swiper-pagination'</span>,</span><br><span class="line">                    },</span><br><span class="line">                    <span class="comment">// 如果需要前进后退按钮</span></span><br><span class="line">                    navigation: {</span><br><span class="line">                    nextEl: <span class="string">'.swiper-button-next'</span>,</span><br><span class="line">                    prevEl: <span class="string">'.swiper-button-prev'</span>,</span><br><span class="line">                    },</span><br><span class="line">                    <span class="comment">// 如果需要滚动条</span></span><br><span class="line">                    scrollbar: {</span><br><span class="line">                          el: <span class="string">'.swiper-scrollbar'</span>,</span><br><span class="line">                        }</span><br><span class="line">                              })</span><br><span class="line">                        })</span><br><span class="line">                    })</span><br><span class="line">                    .catch( error =&gt; <span class="built_in">console</span>.log( error ))</span><br><span class="line">        },</span><br><span class="line">        beforeMount () {</span><br><span class="line">        },</span><br><span class="line">        mounted () {</span><br><span class="line">        <span class="comment">//静态数据的第三方实例化</span></span><br><span class="line">        <span class="comment">// 第三库实例化</span></span><br><span class="line">        },</span><br><span class="line">        updated () {</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">'updated'</span>)</span><br><span class="line">            <span class="keyword">if</span>( <span class="keyword">this</span>.mySwiper ) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">    <span class="keyword">new</span> Vue({</span><br><span class="line">        el: <span class="string">'#app'</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p>v-html<br>v-text<br>v-for<br>v-if<br>v-else-if<br>v-else<br>v-show<br>v-on<br>v-bind<br>v-model<br>以上指令可能不够用户使用，所以vue给开发者提供了自定义指令的方式<br>举例： 比如说 我想要有一个指令，来实现一个自动获得input焦点，或是一个轮播 。。。<br>有两种自定义指令的使用形式：</p><ol><li><p>全局定义 —- vue.directive()</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Vue.directive(<span class="string">'focus'</span>,{</span><br><span class="line">    <span class="comment">//指令的钩子函数</span></span><br><span class="line">    bind () { <span class="comment">//只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</span></span><br><span class="line">         <span class="built_in">console</span>.log( <span class="string">'bind'</span> )</span><br><span class="line">    },</span><br><span class="line">    inserted (el,binding,vNode,oldVnode) {</span><br><span class="line">            el.focus()</span><br><span class="line">            el.style.background = <span class="string">'red'</span></span><br><span class="line">            <span class="comment">// el.innerHTML = "&lt;h3&gt; 123 &lt;/h3&gt;"</span></span><br><span class="line">            <span class="comment">// console.log('el',el)</span></span><br><span class="line">            <span class="comment">// console.log('binding',binding)</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'vNode'</span>,vNode)</span><br><span class="line">            <span class="comment">// console.log('oldVnode',oldVnode)</span></span><br><span class="line">            <span class="built_in">console</span>.log( <span class="string">'inserted'</span> )</span><br><span class="line">    },</span><br><span class="line">    update () {</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'update'</span>)</span><br><span class="line">    },</span><br><span class="line">    componentUpdated () {{</span><br><span class="line">         <span class="built_in">console</span>.log( <span class="string">'componentUpdated '</span> )</span><br><span class="line">    }},</span><br><span class="line">    unbind () { <span class="comment">//只调用一次，指令与元素解绑时调用。</span></span><br><span class="line">              <span class="built_in">console</span>.log( <span class="string">'unbind'</span> )</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li><li><p>局部定义<br>directives: {}</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    directives: {</span><br><span class="line">        <span class="comment">// 指令的名称： 指令的配置</span></span><br><span class="line">        <span class="string">'focus'</span>: {</span><br><span class="line">        inserted ( el,binding ) {</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'binding'</span>,binding)</span><br><span class="line">            <span class="comment">// if( binding.)</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            def: {inserted: ƒ}</span></span><br><span class="line"><span class="comment">            expression: "'b'"</span></span><br><span class="line"><span class="comment">            modifiers: {a: true}</span></span><br><span class="line"><span class="comment">            name: "focus"</span></span><br><span class="line"><span class="comment">            rawName: "v-focus.a"</span></span><br><span class="line"><span class="comment">            value: "b"</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            el.value = binding.expression</span><br><span class="line">            <span class="keyword">if</span>( binding.modifiers.a ){</span><br><span class="line">                 el.style.background = <span class="string">'red'</span>;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                   el.style.background = <span class="string">'blue'</span>;</span><br><span class="line">            }</span><br><span class="line">                    el.focus()</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li><li><p>指令的钩子函数</p></li></ol><ul><li><code>bind</code>：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</li><li><code>inserted</code>：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</li><li><code>update</code>：所在组件的 VNode 更新时调用，<strong>但是可能发生在其子 VNode 更新之前</strong>。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</li><li><code>componentUpdated</code>：指令所在组件的 VNode <strong>及其子 VNode</strong> 全部更新后调用。</li><li><code>unbind</code>：只调用一次，指令与元素解绑时调用 （ 指令绑定的元素被删除 ）。</li></ul><ol start="4"><li>自定义指令钩子的参数</li></ol><ul><li><code>el</code>：指令所绑定的元素，可以用来直接操作 DOM 。</li><li>binding<br>：一个对象，包含以下属性：</li><li><code>name</code>：指令名，不包括 <code>v-</code> 前缀。</li><li><code>value</code>：指令的绑定值，例如：<code>v-my-directive="1 + 1"</code> 中，绑定值为 <code>2</code>。</li><li><code>oldValue</code>：指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li><li><code>expression</code>：字符串形式的指令表达式。例如 <code>v-my-directive="1 + 1"</code> 中，表达式为 <code>"1 + 1"</code>。</li><li><code>arg</code>：传给指令的参数，可选。例如 <code>v-my-directive:foo</code> 中，参数为 <code>"foo"</code>。</li><li><code>modifiers</code>：一个包含修饰符的对象。例如：<code>v-my-directive.foo.bar</code> 中，修饰符对象为 <code>{ foo: true, bar: true }</code>。</li><li><code>vnode</code>：Vue 编译生成的虚拟节点。移步 <a href="https://cn.vuejs.org/v2/api/#VNode-%E6%8E%A5%E5%8F%A3" target="_blank" rel="noopener">VNode API</a> 来了解更多详情。</li><li><code>oldVnode</code>：上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;过滤器&quot;&gt;&lt;a href=&quot;#过滤器&quot; class=&quot;headerlink&quot; title=&quot;过滤器&quot;&gt;&lt;/a&gt;过滤器&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;什么是过滤器？ 用来格式化数据的一个函数 $ 10 ‘$’ + price 日期的格式化&lt;br&gt;vue 1.x 版本借鉴
      
    
    </summary>
    
      <category term="前端" scheme="https://yhk15978.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://yhk15978.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="https://yhk15978.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue组件</title>
    <link href="https://yhk15978.github.io//posts/yhk10000/"/>
    <id>https://yhk15978.github.io//posts/yhk10000/</id>
    <published>2019-06-24T11:33:14.878Z</published>
    <updated>2019-06-25T13:12:37.041Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue组件"><a href="#vue组件" class="headerlink" title="vue组件"></a>vue组件</h1><h3 id="组件是什么"><a href="#组件是什么" class="headerlink" title="组件是什么"></a>组件是什么</h3><p>​    组件是html  css  js 等的一个聚合体</p><h3 id="为什么要使用组件？"><a href="#为什么要使用组件？" class="headerlink" title="为什么要使用组件？"></a>为什么要使用组件？</h3><ol><li><p>组件化</p><ol><li>将一个具备完整功能的项目的一部分进行多处使用</li><li>加快项目的进度</li><li>可以进行项目的复用</li></ol></li><li><p>要想实现组件化，那么我们使用的这一部分就必须是完整的，我们把这个完整的整体就称之为组件</p></li><li><p>插件：  index.html  img  css   js  </p></li><li><p>如果能将 html  css  js  img 等多个部分放在一起，vue将这个聚合体的文件称之为，单文件组件（ xx.vue ）</p></li></ol><h3 id="Vue-是构造器函数"><a href="#Vue-是构造器函数" class="headerlink" title="Vue 是构造器函数"></a>Vue 是构造器函数</h3><p>   Vue.extend() 是  vue用来扩展  vue功能（ 组件 ）的</p><p>   使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。</p><p><code>data</code> 选项是特例，需要注意 - 在 <code>Vue.extend()</code> 中它必须是函数</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="mount-point"&gt;&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建构造器</span></span><br><span class="line"><span class="keyword">var</span> Profile = Vue.extend({</span><br><span class="line">  template: <span class="string">'&lt;p&gt;{{firstName}} {{lastName}} aka {{alias}}&lt;/p&gt;'</span>,</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      firstName: <span class="string">'Walter'</span>,</span><br><span class="line">      lastName: <span class="string">'White'</span>,</span><br><span class="line">      alias: <span class="string">'Heisenberg'</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"><span class="comment">// 创建 Profile 实例，并挂载到一个元素上。</span></span><br><span class="line"><span class="keyword">new</span> Profile().$mount(<span class="string">'#mount-point'</span>)</span><br></pre></td></tr></tbody></table></figure><p>结果如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Walter White aka Heisenberg&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><p>Vue决定不进行  实例化  Vue.extend(),vue借鉴了react，react中组件是以标签的形式使用的，</p><p> vue 决定组件要以标签的形式呈现</p><h3 id="基础的组件创建"><a href="#基础的组件创建" class="headerlink" title="基础的组件创建"></a>基础的组件创建</h3><p>为了能在模板中使用，这些组件必须先注册以便 Vue 能够识别。</p><p>为了符合 html / html5的规则，所以组件的标签化使用必须注册，</p><p>注册就是用来解析这个标签化的组件html未能识别的标签</p><p>组件使用前必须进行注册</p><p><strong>一个组件的 data 选项必须是一个函数</strong>，因此每个实例可以维护一份被返回对象的独立的拷贝</p><p><strong>命名：</strong> </p><p>​      一个单词的大写： 注意不要和原生的h5标签重名，比如  header   footer   Header Footer</p><p>​      小写带- ， 比如   header-title</p><p>​      大驼峰：  YaoHengkang   使用 ：   yao-hengkang</p><h4 id="1、全局注册"><a href="#1、全局注册" class="headerlink" title="1、全局注册"></a>1、全局注册</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Hello = Vue.extend({</span><br><span class="line">    template: <span class="string">'&lt;div&gt; 这里是father组件 &lt;/div&gt;'</span></span><br><span class="line">  })             <span class="comment">//VueComponent( option )</span></span><br><span class="line"></span><br><span class="line">Vue.component( <span class="string">'Father'</span>, Hello )</span><br></pre></td></tr></tbody></table></figure><p>因为组件是可复用的 Vue 实例，所以它们与 <code>new Vue</code> 接收相同的选项，例如 <code>data</code>、<code>computed</code>、<code>watch</code>、<code>methods</code> 以及生命周期钩子等。仅有的例外是像 <code>el</code> 这样根实例特有的选项。</p><h4 id="2、局部注册"><a href="#2、局部注册" class="headerlink" title="2、局部注册"></a>2、局部注册</h4><p>在组件中用一个components的配置项目来表示</p><p> 只能在注册的范围内使用，其他地方是不能使用的</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;yao-hengkang&gt;&lt;/yao-hengkang&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Hello = Vue.extend({</span><br><span class="line">    template: <span class="string">'&lt;div&gt; Hello world &lt;/div&gt;'</span></span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    components: {</span><br><span class="line">      <span class="comment">// key: value  key是组件名称   value是组件配置项</span></span><br><span class="line">       <span class="string">'yao-hengkang'</span>: Hello</span><br><span class="line">    }</span><br><span class="line">  })</span><br></pre></td></tr></tbody></table></figure><h4 id="3、简写："><a href="#3、简写：" class="headerlink" title="3、简写："></a>3、简写：</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;Father&gt;&lt;/Father&gt;</span><br><span class="line">    &lt;yao-hengkang&gt;&lt;/yao-hengkang&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'Father'</span>,{</span><br><span class="line">   template: <span class="string">'&lt;div&gt; 这里是全局注册 &lt;/div&gt;'</span></span><br><span class="line"> })</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">new</span> Vue({</span><br><span class="line">   el: <span class="string">'#app'</span>,</span><br><span class="line">   components: {</span><br><span class="line">     <span class="string">'YaoHengkang'</span>: {</span><br><span class="line">       template: <span class="string">'&lt;div&gt; 这里是局部注册 &lt;/div&gt;'</span></span><br><span class="line">     }</span><br><span class="line">   }</span><br><span class="line"> })</span><br></pre></td></tr></tbody></table></figure><h4 id="4、组件的嵌套"><a href="#4、组件的嵌套" class="headerlink" title="4、组件的嵌套"></a>4、组件的嵌套</h4><p>​     父组件里面放子组件 —-》 类似于dom结构的父子级结构</p><p>​      将子组件以标签的形式放在父组件的模板中使用</p><p>​      切记，不要放在父组件的内容中</p><p>​      组件不仅可以用双标签表示，也可以使用单标签表示</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">   &lt;!-- 下面这种写法是错误的 --&gt;</span><br><span class="line">   &lt;Father&gt;</span><br><span class="line">     &lt;Son&gt;&lt;/Son&gt;</span><br><span class="line">   &lt;/Father&gt;</span><br><span class="line">   &lt;!-- 正确的应该是 --&gt;</span><br><span class="line">   &lt;Father&gt;&lt;/Father&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'Father'</span>,{</span><br><span class="line">   template: <span class="string">'&lt;div&gt; Father &lt;Son&gt;&lt;/Son&gt;&lt;/div&gt;'</span></span><br><span class="line"> })</span><br><span class="line"></span><br><span class="line"> Vue.component(<span class="string">'Son'</span>,{</span><br><span class="line">   template: <span class="string">'&lt;div&gt; son &lt;/div&gt;'</span></span><br><span class="line"> })</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">new</span> Vue({</span><br><span class="line">   el: <span class="string">'#app'</span>,</span><br><span class="line"> })</span><br></pre></td></tr></tbody></table></figure><p>或</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: {</span><br><span class="line">    <span class="string">'Father'</span>: {</span><br><span class="line">      template: <span class="string">'&lt;div&gt; father组件 &lt;Son /&gt;&lt;/div&gt;'</span>,</span><br><span class="line">      components: {</span><br><span class="line">        <span class="string">'Son'</span>: {</span><br><span class="line">          template: <span class="string">'&lt;div&gt; son组件 &lt;/div&gt;'</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h4 id="5、is规则"><a href="#5、is规则" class="headerlink" title="5、is规则"></a>5、is规则</h4><p> ul>li  ol>li   table>tr>td      select>option</p><p>​    如上直属父子级如果直接组件以标签化形式使用，那么就会出现bug</p><p>​    解决： 使用is规则: 通过is属性来绑定一个组件</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'Hello'</span>,{</span><br><span class="line">    template: <span class="string">'&lt;tr&gt; &lt;td&gt; 4 &lt;/td&gt; &lt;td&gt; 2 &lt;/td&gt;&lt;td&gt; 3 &lt;/td&gt;&lt;/tr&gt;'</span></span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">'#app'</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">  &lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;1&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;2&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;3&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;!--  会出bug ↓ --&gt;</span><br><span class="line">    &lt;hello&gt;&lt;/hello&gt;</span><br><span class="line">    &lt;!-- 通过is属性来绑定 ↓ --&gt;</span><br><span class="line">    &lt;tr is = "Hello"&gt;&lt;/tr&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="6、template使用："><a href="#6、template使用：" class="headerlink" title="6、template使用："></a>6、template使用：</h4><ol><li>实例范围内使用</li></ol><p>​          template中的内容被当做一个整体了，并且template标签是不会解析到html结构中的</p><ol start="2"><li>实例范围外使用</li></ol><p>​          实例范围外template标签是不会被直接解析的</p><p>​    组件要想使用template使用，我们采用第二种</p><p>​    但是使用第二种template使用后，有个弊端，template标签结构会在html文件中显示</p><p>​    解决： 使用webpack、gulp等工具编译，要用vue提供的单文件组件</p><h3 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h3><h4 id="为什么要进行通信"><a href="#为什么要进行通信" class="headerlink" title="为什么要进行通信"></a>为什么要进行通信</h4><p>组件可以是一个具有独立功能的整体，但是当我们要将这些组件拼接在一起时，这些组件要建立联系，这个联系我们就称之为通信</p><h4 id="组件通信的方式有以下几种"><a href="#组件通信的方式有以下几种" class="headerlink" title="组件通信的方式有以下几种"></a>组件通信的方式有以下几种</h4><h5 id="1-父子组件通信"><a href="#1-父子组件通信" class="headerlink" title="1.父子组件通信"></a>1.父子组件通信</h5><p>使用props实现</p><ol><li><p>在父组件的模板中用单项数据绑定的形式，绑定在子组件身上<br> <code>&lt;Son :money = "money"/&gt;</code></p></li><li><p>在子组件的配置项中可以使用一个props配置项来接收这个数据，接收时props可以是一个数组；</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> Vue.component(<span class="string">'Son'</span>,{</span><br><span class="line">       template: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">                     &lt;h3&gt; 这里是子组件 &lt;/h3&gt;</span></span><br><span class="line"><span class="string">                 &lt;/div&gt;`</span></span><br><span class="line">       props:[<span class="string">'money'</span>]</span><br><span class="line">     })</span><br><span class="line">​</span><br></pre></td></tr></tbody></table></figure></li><li><p>在子组件模板中，接收到的属性可以像全局对象一样直接使用<br><code>&lt;p&gt; 父亲给了我    钱  &lt;/p&gt;</code><br>问题：自定义属性的书写<br>HTML 中的特性名是大小写不敏感的，所以浏览器会把所有大写字符解释为小写字符。这意味着当你使用 DOM 中的模板时，camelCase (驼峰命名法) 的 prop 名需要使用其等价的 kebab-case (短横线分隔命名) 命名：<br>money   —-> money<br>mask-flag —-> maskFlag<br>问题：data为什么要定义为一个函数</p><ol><li>组件是一个独立的个体，那么它应该拥有自己的数据，这个数据应该是一个独立的数据</li><li>也就是说这个数据应该有独立作用域，也就是有一个独立的使用范围，这个范围就是这个组件内</li><li>js的最大特征是：函数式编程 ， 而函数恰好提供了独立作用域<br>问题： 为什么data要有返回值？返回值还是一个对象？</li><li>因为Vue是通过observer来观察data选项的，所有必须要有返回值</li><li>因为Vue要通过es5的Object.defineProperty属性对对象进行getter和setter设置</li></ol></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;Father&gt;&lt;/Father&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> Vue.component(<span class="string">'Father'</span>,{</span><br><span class="line">   template: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">               &lt;h3&gt;这里是父组件&lt;/h3&gt;</span></span><br><span class="line"><span class="string">               &lt;hr&gt;</span></span><br><span class="line"><span class="string">               &lt;son :money = "money"&gt;&lt;/son&gt;</span></span><br><span class="line"><span class="string">              &lt;/div&gt;`</span>,</span><br><span class="line">   data(){</span><br><span class="line">     <span class="keyword">return</span> {</span><br><span class="line">          money:<span class="number">1000</span></span><br><span class="line">     }</span><br><span class="line">   }</span><br><span class="line"> })</span><br><span class="line"> Vue.component(<span class="string">'Son'</span>,{</span><br><span class="line">   template: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">                 &lt;h3&gt; 这里是子组件 &lt;/h3&gt;</span></span><br><span class="line"><span class="string">                 &lt;p&gt; 父亲给了我  {{ money }}  钱  &lt;/p&gt; </span></span><br><span class="line"><span class="string">             &lt;/div&gt;`</span></span><br><span class="line">props:[<span class="string">'money'</span>]</span><br><span class="line"> })</span><br><span class="line"> <span class="keyword">new</span> Vue({</span><br><span class="line">el: <span class="string">"#app"</span>,</span><br><span class="line"></span><br><span class="line"> })</span><br></pre></td></tr></tbody></table></figure><h5 id="2-子父组件通信"><a href="#2-子父组件通信" class="headerlink" title="2.子父组件通信"></a>2.子父组件通信</h5><p>自定义事件<br>子父通信流程</p><ol><li><p>在父组件的模板中，通过事件绑定的形式，绑定一个自定义事件在子组件身上<br> <code>&lt;son @give='getHongBao'&gt;&lt;/son&gt;</code></p></li><li><p>在子组件的配置项methods中写一个事件处理程序，在事件处理程序中触发父组件绑定的自定义事件</p> <figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'Son'</span>,{</span><br><span class="line">    template: <span class="string">'#son'</span>,</span><br><span class="line">    data:()=&gt;{</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            money : <span class="number">1000</span></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    methods:{</span><br><span class="line">        giveHongBao(){</span><br><span class="line">            <span class="keyword">this</span>.money++</span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">'give'</span>,<span class="keyword">this</span>.money)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">  })</span><br></pre></td></tr></tbody></table></figure></li><li><p>将子组件定义的事件处理程序  giveFather,绑定在子组件的按钮身上</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template id="son"&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">          &lt;h3&gt;这里是子组件&lt;/h3&gt;</span><br><span class="line">          &lt;button @click='giveHongBao'&gt;发红包&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div id="app"&gt;</span><br><span class="line">      &lt;father&gt;&lt;/father&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;template id="father"&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;这里是父组件&lt;/h3&gt;</span><br><span class="line">        &lt;p&gt;儿子给了我{{ money }}&lt;/p&gt;</span><br><span class="line">        &lt;son @give='getHongBao'&gt;&lt;/son&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;template id="son"&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;这里是子组件&lt;/h3&gt;</span><br><span class="line">        &lt;button @click='giveHongBao'&gt;发红包&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  Vue.component(<span class="string">'Father'</span>,{</span><br><span class="line">    template:<span class="string">'#father'</span>,</span><br><span class="line">    data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            money:<span class="number">0</span></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    methods:{</span><br><span class="line">        getHongBao(val){</span><br><span class="line">            <span class="keyword">this</span>.money = val ;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line">Vue.component(<span class="string">'Son'</span>,{</span><br><span class="line">    template: <span class="string">'#son'</span>,</span><br><span class="line">    data:()=&gt;{</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            money : <span class="number">1000</span></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    methods:{</span><br><span class="line">        giveHongBao(){</span><br><span class="line">            <span class="keyword">this</span>.money++</span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">'give'</span>,<span class="keyword">this</span>.money)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">    el:<span class="string">"#app"</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h5 id="3-非父子组件通信"><a href="#3-非父子组件通信" class="headerlink" title="3.非父子组件通信"></a>3.非父子组件通信</h5><p>​    ref链:可以实现非父子组件间的通信，但是如果层级太深，就比较繁琐了</p><p><code>ref</code> 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 <code>$refs</code> 对象上。如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例</p><ol><li><p>先给子组件注册引用信息</p><p><code>&lt;boy ref='boy'&gt;&lt;/boy&gt;</code></p></li><li><p>父组件通过<code>$refs</code>获得子组件信息</p><p><code>this.n = this.$refs.boy.money</code></p></li><li><p>父组件通过属性将数据传递给子组件</p><p><code>&lt;girl ref='girl' :money="n"&gt;&lt;/girl&gt;</code></p></li><li><p>子组件通过<code>$attr</code>或<code>props</code>获得值</p><p><code>this.$attrs.money</code></p></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">       &lt;father&gt;&lt;/father&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;template id="father"&gt;</span><br><span class="line">       &lt;div&gt;</span><br><span class="line">           这里是father</span><br><span class="line">           &lt;button @click="look"&gt;得到boy的money&lt;/button&gt;</span><br><span class="line">           &lt;hr&gt;</span><br><span class="line">           &lt;boy ref='boy'&gt;&lt;/boy&gt;</span><br><span class="line">           &lt;hr&gt;</span><br><span class="line">           &lt;girl ref='girl' :money="n"&gt;&lt;/girl&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">   &lt;template id="boy"&gt;</span><br><span class="line">       &lt;div&gt;</span><br><span class="line">           这里是boy---</span><br><span class="line">           {{ money }}</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">   &lt;template id="girl"&gt;</span><br><span class="line">       &lt;div&gt;</span><br><span class="line">           这里是girl</span><br><span class="line">           &lt;button @click="out"&gt; 输出girl的money &lt;/button&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'Father'</span>, {</span><br><span class="line">        template: <span class="string">'#father'</span>,</span><br><span class="line">        data() {</span><br><span class="line">            <span class="keyword">return</span> {</span><br><span class="line">                n: <span class="number">0</span></span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        methods: {</span><br><span class="line">            look() {</span><br><span class="line">                <span class="keyword">this</span>.n = <span class="keyword">this</span>.$refs.boy.money</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">    Vue.component(<span class="string">'Boy'</span>, {</span><br><span class="line">        template: <span class="string">'#boy'</span>,</span><br><span class="line">        data() {</span><br><span class="line">            <span class="keyword">return</span> {</span><br><span class="line">                money: <span class="number">1000</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">    Vue.component(<span class="string">'Girl'</span>, {</span><br><span class="line">        template: <span class="string">'#girl'</span>,</span><br><span class="line">        methods: {</span><br><span class="line">            out() {</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.$attrs.money)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">    <span class="keyword">new</span> Vue({</span><br><span class="line">        el: <span class="string">"#app"</span></span><br><span class="line">    })</span><br></pre></td></tr></tbody></table></figure><p>​    bus事件总线</p><ol><li><p>新建vue实例bus</p><p>​    <code>var bus = new Vue();</code></p></li><li><p>在接收组件<code>mounted()</code>中声明事件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var _this = this</span><br><span class="line">   bus.$on('da', function () {</span><br><span class="line">       _this.flag = true</span><br><span class="line">       console.log(this) //这里是this指的是bus， 但是我们需要的this应该是brother这个组件</span><br><span class="line">   })</span><br></pre></td></tr></tbody></table></figure></li><li><p>在发送消息中定义<code>$emit</code>触发事件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: {</span><br><span class="line">           hick() {</span><br><span class="line">               bus.$emit('da')</span><br><span class="line">           }</span><br><span class="line">       }</span><br></pre></td></tr></tbody></table></figure></li></ol><p>案例：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">       &lt;old-sister&gt;&lt;/old-sister&gt;</span><br><span class="line">       &lt;brother&gt;&lt;/brother&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;template id="old-sister"&gt;</span><br><span class="line">       &lt;div&gt;</span><br><span class="line">           &lt;h3&gt; 这里是姐姐组件 &lt;/h3&gt;</span><br><span class="line">           &lt;button @click="hick"&gt; 揍弟弟 &lt;/button&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">   &lt;template id="brother"&gt;</span><br><span class="line">       &lt;div&gt;</span><br><span class="line">           &lt;h3&gt; 这里是弟弟组件 &lt;/h3&gt;</span><br><span class="line">           &lt;p v-show="flag"&gt; 呜呜呜呜呜呜呜呜呜uwuwuwuwu &lt;/p&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bus = <span class="keyword">new</span> Vue();</span><br><span class="line">   Vue.component(<span class="string">'old-sister'</span>, {</span><br><span class="line">       template: <span class="string">'#old-sister'</span>,</span><br><span class="line">       methods: {</span><br><span class="line">           hick() {</span><br><span class="line">               bus.$emit(<span class="string">'da'</span>)</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">   })</span><br><span class="line">   Vue.component(<span class="string">'Brother'</span>, {</span><br><span class="line">       template: <span class="string">'#brother'</span>,</span><br><span class="line">       data() {</span><br><span class="line">           <span class="keyword">return</span> {</span><br><span class="line">               flag: <span class="literal">false</span></span><br><span class="line">           }</span><br><span class="line">       },</span><br><span class="line">       mounted() { <span class="comment">//当前组件挂载结束，也就是我们可以在页面当中看到真实dom</span></span><br><span class="line">           <span class="comment">// mounted这个钩子函数的触发条件是组件创建时会自动触发</span></span><br><span class="line">           <span class="comment">// 事件的声明</span></span><br><span class="line">           <span class="keyword">var</span> _this = <span class="keyword">this</span></span><br><span class="line">           bus.$on(<span class="string">'da'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">               _this.flag = <span class="literal">true</span></span><br><span class="line">               <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//这里是this指的是bus， 但是我们需要的this应该是brother这个组件</span></span><br><span class="line">           })</span><br><span class="line">       }</span><br><span class="line">   })</span><br><span class="line">   <span class="keyword">new</span> Vue({</span><br><span class="line">       el: <span class="string">"#app"</span></span><br><span class="line">   })</span><br></pre></td></tr></tbody></table></figure><h5 id="非常规通信："><a href="#非常规通信：" class="headerlink" title="非常规通信："></a>非常规通信：</h5><ol><li><p>父组件将一个方法通过属性绑定的形式给了子组件，子组件先是通过props接收这个方法，再执行这个方法</p><p>MVVM框架是单向数据流，但是上面的方法违背了单项数据流</p></li><li><p>父组件传递一个 引用类型  给 子组件</p><p>子组件通过 props 接收</p><p>就会发现： 子组件修改这个数据的时候，父组件的数据也随之改变了</p><p>不推荐使用  ， 违背了单向数据流</p></li></ol><h3 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h3><ul><li><p><strong>类型</strong>：<code>Function</code></p></li><li><p><strong>详细</strong>：</p><p><code>el</code> 被新创建的 <code>vm.$el</code> 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 <code>mounted</code> 被调用时 <code>vm.$el</code> 也在文档内。</p><p>注意 <code>mounted</code> <strong>不会</strong>承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 <a href="https://cn.vuejs.org/v2/api/#vm-nextTick" target="_blank" rel="noopener">vm.$nextTick</a> 替换掉 <code>mounted</code></p></li></ul><h5 id="4-多组件状态共享（-多个组件共用同一个数据-）-（-vuex-）"><a href="#4-多组件状态共享（-多个组件共用同一个数据-）-（-vuex-）" class="headerlink" title="4.多组件状态共享（ 多个组件共用同一个数据 ） （ vuex ）"></a>4.多组件状态共享（ 多个组件共用同一个数据 ） （ vuex ）</h5><p>​    vuex</p><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><ol><li>自定义的   通过  $on  定义    $emit触发<br><code>vm.$on( event, callback )</code><br>参数：<ul><li><code>{string | Array&lt;string&gt;} event</code> </li><li><code>{Function} callback</code><br>用法：</li></ul></li></ol><p>监听当前实例上的自定义事件。事件可以由<code>vm.$emit</code>触发。回调函数会接收所有传入事件触发函数的额外参数。<br><code>vm.$emit( eventName, […args] )</code><br>参数：</p><ul><li><code>{string} eventName</code></li><li><code>[...args]</code><br>示例：<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vm.$on(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(msg)</span><br><span class="line">})</span><br><span class="line">vm.$emit(<span class="string">'test'</span>, <span class="string">'hi'</span>)</span><br><span class="line"><span class="comment">// =&gt; "hi"</span></span><br></pre></td></tr></tbody></table></figure></li></ul><ol start="2"><li><p>通过绑定在组件身上定义，通过 $emit触发<br> <code>&lt;Son @aa = "fn"/&gt;</code></p><p> 使用： 子父通信</p></li></ol><h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a><strong>动态组件</strong></h3><ol><li><p>什么是动态组件？</p><p>可以改变的组件</p></li><li><p>使用</p><p>通过 Vue 提供了一个  component  +  is  属性</p></li><li><p>动态组件指的就是 component这个组件</p></li><li><p>案例</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">   &lt;button @click = "change"&gt; 切换 &lt;/button&gt;</span><br><span class="line">   &lt;keep-alive include=""&gt;</span><br><span class="line">      &lt;component :is = "type"&gt;&lt;/component&gt;</span><br><span class="line">   &lt;/keep-alive&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure></li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'Aa'</span>,{</span><br><span class="line">       template: <span class="string">'&lt;div&gt; Aa &lt;/div&gt;'</span></span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">    Vue.component(<span class="string">'Bb'</span>,{</span><br><span class="line">       template: <span class="string">'&lt;div&gt; Bb &lt;/div&gt;'</span></span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Vue({</span><br><span class="line">       data: {</span><br><span class="line">          type: <span class="string">'Aa'</span></span><br><span class="line">       },</span><br><span class="line">       methods: {</span><br><span class="line">          change () {</span><br><span class="line">          <span class="keyword">this</span>.type = (<span class="keyword">this</span>.type === <span class="string">'Aa'</span>?<span class="string">'Bb'</span>:<span class="string">'Aa'</span>)</span><br><span class="line">          }</span><br><span class="line">       }</span><br><span class="line">    }).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li><p>Vue提供了一个叫做 keep-alive 的组件可以将我们的组件进行浏览器缓存，这样当我们切换组件时，就可以大大提高使用效率</p></li><li><p>keep-alive也可以以属性的形式呈现，但是我们如果搭配component的话，建议使用组件的形式</p></li></ol><h3 id="slot-插槽"><a href="#slot-插槽" class="headerlink" title="slot 插槽"></a><strong>slot 插槽</strong></h3><ol><li><p>作用/概念: 预先将将来要使用的内容进行保留</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;Hello&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        这里是杭州</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/Hello&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;template id="hello"&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">      &lt;h3&gt;这里是hello&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'Hello'</span>,{</span><br><span class="line">       template: <span class="string">'#hello'</span></span><br><span class="line">     })</span><br><span class="line">   </span><br><span class="line">     <span class="keyword">new</span> Vue({</span><br><span class="line">       el: <span class="string">'#app'</span></span><br><span class="line">     })</span><br></pre></td></tr></tbody></table></figure></li><li><p>具名插槽： 给slot起个名字</p><p>通过<code>solt</code>属性和<code>name</code>对应插槽位置</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">  &lt;Hello&gt;</span><br><span class="line">    &lt;header slot = 'header'&gt; 这里是头部 &lt;/header&gt;</span><br><span class="line">    &lt;footer slot = 'footer'&gt; 这里是底部 &lt;/footer&gt;</span><br><span class="line">  &lt;/Hello&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;template id="hello"&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot name = "header"&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;h3&gt;这里是hello&lt;/h3&gt;</span><br><span class="line">    &lt;slot name = "footer"&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'Hello'</span>,{</span><br><span class="line">   template: <span class="string">'#hello'</span></span><br><span class="line"> })</span><br><span class="line">   </span><br><span class="line"> <span class="keyword">new</span> Vue({</span><br><span class="line">   el: <span class="string">'#app'</span></span><br><span class="line"> })</span><br></pre></td></tr></tbody></table></figure></li></ol><ul><li><p>注意： 以上两种形式在 vue2.6以上被废弃</p></li><li><p>为什么要 用  v-slot指令来代替呢？</p><ul><li>经具名插槽和作用域插槽进行统一</li><li>要将这两个属性带有 vue的标志，并且符合vue两个最大的特性之一： 指令的概念</li></ul></li></ul><h4 id="v-slot"><a href="#v-slot" class="headerlink" title="v-slot:"></a>v-slot:</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div id="app"&gt;</span><br><span class="line">  &lt;Hello&gt;</span><br><span class="line">    &lt;template v-slot:header&gt;</span><br><span class="line">      &lt;h1&gt;Here might be a page title&lt;/h1&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;p&gt;A paragraph for the main content.&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;And another one.&lt;/p&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;template v-slot:footer&gt;</span><br><span class="line">      &lt;p&gt;Here's some contact info&lt;/p&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/Hello&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;template id ='hello'&gt;</span><br><span class="line">  &lt;div class="container"&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      &lt;!-- 我们希望把页头放这里 --&gt;</span><br><span class="line">      &lt;slot name = "header"&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">      &lt;!-- 我们希望把主要内容放这里 --&gt;</span><br><span class="line">      &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">    &lt;footer&gt;</span><br><span class="line">      &lt;!-- 我们希望把页脚放这里 --&gt;</span><br><span class="line">      &lt;slot name = 'footer'&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/footer&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'Hello'</span>,{</span><br><span class="line">      template: <span class="string">'#hello'</span></span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Vue({</span><br><span class="line">      el: <span class="string">'#app'</span></span><br><span class="line">    })</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue组件&quot;&gt;&lt;a href=&quot;#vue组件&quot; class=&quot;headerlink&quot; title=&quot;vue组件&quot;&gt;&lt;/a&gt;vue组件&lt;/h1&gt;&lt;h3 id=&quot;组件是什么&quot;&gt;&lt;a href=&quot;#组件是什么&quot; class=&quot;headerlink&quot; title=&quot;组件是
      
    
    </summary>
    
      <category term="前端" scheme="https://yhk15978.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://yhk15978.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="https://yhk15978.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>虚拟dom &amp;&amp; diff算法 &amp;&amp; key</title>
    <link href="https://yhk15978.github.io//posts/qw123/"/>
    <id>https://yhk15978.github.io//posts/qw123/</id>
    <published>2019-06-24T11:18:34.861Z</published>
    <updated>2019-06-24T11:26:53.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="虚拟dom-amp-amp-diff算法-amp-amp-key"><a href="#虚拟dom-amp-amp-diff算法-amp-amp-key" class="headerlink" title="虚拟dom && diff算法 && key"></a>虚拟dom && diff算法 && key</h1><h2 id="什么是虚拟dom-为什么要使用虚拟dom"><a href="#什么是虚拟dom-为什么要使用虚拟dom" class="headerlink" title="什么是虚拟dom,为什么要使用虚拟dom?"></a>什么是虚拟dom,为什么要使用虚拟dom?</h2><p>1、它是一个Object对象模型，用来模拟真实dom节点结构的树形结构</p><p>DOM:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="box"&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt; yhk &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>vdom:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vdom = {</span><br><span class="line">      tag: <span class="string">'div'</span>,</span><br><span class="line">      attr: {</span><br><span class="line">        className: <span class="string">'box'</span></span><br><span class="line">      },</span><br><span class="line">      content: [</span><br><span class="line">        {</span><br><span class="line">          tag: <span class="string">'ul'</span>,</span><br><span class="line">          content: [</span><br><span class="line">            {</span><br><span class="line">              tag: <span class="string">'li'</span>,</span><br><span class="line">              content: <span class="string">'yhk'</span></span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>可见DOM结构中的内容都对应在vdom中；</p><p>2、为什么要使用虚拟dom</p><p>因为直接去操作dom节点是非常耗费性能的；</p><p>这里可以参考：<a href="http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html" target="_blank" rel="noopener">网页性能管理详解</a></p><h2 id="虚拟dom的使用基本流程"><a href="#虚拟dom的使用基本流程" class="headerlink" title="虚拟dom的使用基本流程"></a>虚拟dom的使用基本流程</h2><p>1、获取数据（ajax,fetch,axios）</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = {</span><br><span class="line">     id: <span class="number">1</span>,</span><br><span class="line">     name: <span class="string">'yhk'</span></span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p>2、创建vdom</p><p>vue通过jsx + render函数来创建vdom</p><p>jsx即JavaScript + xml </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class = "box"&gt;</span><br><span class="line">       &lt;ul&gt;</span><br><span class="line">         &lt;li&gt; {{ data.name }} &lt;/li&gt;</span><br><span class="line">       &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>3、通过render函数解析jsx，将其转化成vdom结构</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var vdom = {</span><br><span class="line">      tag: 'div',</span><br><span class="line">      attr: {</span><br><span class="line">        className: 'box'</span><br><span class="line">      },</span><br><span class="line">      content: [</span><br><span class="line">        {</span><br><span class="line">          tag: 'ul',</span><br><span class="line">          content: [</span><br><span class="line">            {</span><br><span class="line">              tag: 'li',</span><br><span class="line">              content: data.name</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>4、将vdom渲染成真实dom</p><p>render函数</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">render: function (createElement) {</span><br><span class="line">  return createElement('div',{</span><br><span class="line">          'class': {</span><br><span class="line">            box: true</span><br><span class="line">          },</span><br><span class="line">  },</span><br><span class="line">  [</span><br><span class="line">     createElement('ul',[createElement('li', </span><br><span class="line">     domProps: {</span><br><span class="line">                        innerHTML: data.name</span><br><span class="line">                },)])</span><br><span class="line">  ]</span><br><span class="line">  )</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>​        createElement函数参数：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">> <span class="comment">// @returns {VNode}</span></span><br><span class="line">> createElement(</span><br><span class="line">>   <span class="comment">// {String | Object | Function}</span></span><br><span class="line">>   <span class="comment">// 一个 HTML 标签名、组件选项对象，或者</span></span><br><span class="line">>   <span class="comment">// resolve 了上述任何一种的一个 async 函数。必填项。</span></span><br><span class="line">>   <span class="string">'div'</span>,</span><br><span class="line">> </span><br><span class="line">>   <span class="comment">// {Object}</span></span><br><span class="line">>   <span class="comment">// 一个与模板中属性对应的数据对象。可选。</span></span><br><span class="line">>   {</span><br><span class="line">>     <span class="comment">//// 与 `v-bind:class` 的 API 相同，</span></span><br><span class="line">>   <span class="comment">// 接受一个字符串、对象或字符串和对象组成的数组</span></span><br><span class="line">>   <span class="string">'class'</span>: {</span><br><span class="line">>     foo: <span class="literal">true</span>,</span><br><span class="line">>     bar: <span class="literal">false</span></span><br><span class="line">>   },</span><br><span class="line">>   <span class="comment">// 与 `v-bind:style` 的 API 相同，</span></span><br><span class="line">>   <span class="comment">// 接受一个字符串、对象，或对象组成的数组</span></span><br><span class="line">>   style: {</span><br><span class="line">>     color: <span class="string">'red'</span>,</span><br><span class="line">>     fontSize: <span class="string">'14px'</span></span><br><span class="line">>   },</span><br><span class="line">>   <span class="comment">// 普通的 HTML 特性</span></span><br><span class="line">>   attrs: {</span><br><span class="line">>     id: <span class="string">'foo'</span></span><br><span class="line">>   },</span><br><span class="line">>   <span class="comment">// 组件 prop</span></span><br><span class="line">>   props: {</span><br><span class="line">>     myProp: <span class="string">'bar'</span></span><br><span class="line">>   },</span><br><span class="line">>   <span class="comment">// DOM 属性</span></span><br><span class="line">>   domProps: {</span><br><span class="line">>     innerHTML: <span class="string">'baz'</span></span><br><span class="line">>   },</span><br><span class="line">>   <span class="comment">// 事件监听器在 `on` 属性内，</span></span><br><span class="line">>   <span class="comment">// 但不再支持如 `v-on:keyup.enter` 这样的修饰器。</span></span><br><span class="line">>   <span class="comment">// 需要在处理函数中手动检查 keyCode。</span></span><br><span class="line">>   on: {</span><br><span class="line">>     click: <span class="keyword">this</span>.clickHandler</span><br><span class="line">>   },</span><br><span class="line">>   <span class="comment">// 仅用于组件，用于监听原生事件，而不是组件内部使用</span></span><br><span class="line">>   <span class="comment">// `vm.$emit` 触发的事件。</span></span><br><span class="line">>   nativeOn: {</span><br><span class="line">>     click: <span class="keyword">this</span>.nativeClickHandler</span><br><span class="line">>   },</span><br><span class="line">>   <span class="comment">// 自定义指令。注意，你无法对 `binding` 中的 `oldValue`</span></span><br><span class="line">>   <span class="comment">// 赋值，因为 Vue 已经自动为你进行了同步。</span></span><br><span class="line">>   directives: [</span><br><span class="line">>     {</span><br><span class="line">>       name: <span class="string">'my-custom-directive'</span>,</span><br><span class="line">>       value: <span class="string">'2'</span>,</span><br><span class="line">>       expression: <span class="string">'1 + 1'</span>,</span><br><span class="line">>       arg: <span class="string">'foo'</span>,</span><br><span class="line">>       modifiers: {</span><br><span class="line">>         bar: <span class="literal">true</span></span><br><span class="line">>       }</span><br><span class="line">>     }</span><br><span class="line">>   ],</span><br><span class="line">>   <span class="comment">// 作用域插槽的格式为</span></span><br><span class="line">>   <span class="comment">// { name: props => VNode | Array<VNode> }</span></span><br><span class="line">>   scopedSlots: {</span><br><span class="line">>     <span class="keyword">default</span>: <span class="function"><span class="params">props</span> =></span> createElement(<span class="string">'span'</span>, props.text)</span><br><span class="line">>   },</span><br><span class="line">>   <span class="comment">// 如果组件是其它组件的子组件，需为插槽指定名称</span></span><br><span class="line">>   slot: <span class="string">'name-of-slot'</span>,</span><br><span class="line">>   <span class="comment">// 其它特殊顶层属性</span></span><br><span class="line">>   key: <span class="string">'myKey'</span>,</span><br><span class="line">>   ref: <span class="string">'myRef'</span>,</span><br><span class="line">>   <span class="comment">// 如果你在渲染函数中给多个元素都应用了相同的 ref 名，</span></span><br><span class="line">>   <span class="comment">// 那么 `$refs.myRef` 会变成一个数组。</span></span><br><span class="line">>   refInFor: <span class="literal">true</span></span><br><span class="line">>   },</span><br><span class="line">> </span><br><span class="line">>   <span class="comment">// {String | Array}</span></span><br><span class="line">>   <span class="comment">// 子级虚拟节点 (VNodes)，由 `createElement()` 构建而成，</span></span><br><span class="line">>   <span class="comment">// 也可以使用字符串来生成“文本虚拟节点”。可选。</span></span><br><span class="line">>   [</span><br><span class="line">>     <span class="string">'先写一些文字'</span>,</span><br><span class="line">>     createElement(<span class="string">'h1'</span>, <span class="string">'一则头条'</span>),</span><br><span class="line">>     createElement(MyComponent, {</span><br><span class="line">>       props: {</span><br><span class="line">>         someProp: <span class="string">'foobar'</span></span><br><span class="line">>       }</span><br><span class="line">>     })</span><br><span class="line">>   ]</span><br><span class="line">> )</span><br><span class="line">></span><br></pre></td></tr></tbody></table></figure></blockquote><p>5、 数据更改了</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.name = 'xiaoming'</span><br></pre></td></tr></tbody></table></figure><p>生成新的vdom</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vdom = {</span><br><span class="line">  tag: 'div',</span><br><span class="line">  attr: {</span><br><span class="line">    className: 'box'</span><br><span class="line">  },</span><br><span class="line">  content: [</span><br><span class="line">    {</span><br><span class="line">      tag: 'ul',</span><br><span class="line">      content: [</span><br><span class="line">        {</span><br><span class="line">          tag: 'li',</span><br><span class="line">          content: data.name</span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>6、使用diff算法比对两次vdom,生成patch对象</p><p>  diff算法是同级比较</p><p>​        给每一个层级打一个标记，这个标记是一个数字（ 这个数字就是 key  ）</p><p>7、根据key将patch对象渲染到页面中改变的结构上，而其他没有改变的地方是不做任何修改的（ 虚拟dom的惰性原则 ）</p><h2 id="什么是diff算法"><a href="#什么是diff算法" class="headerlink" title="什么是diff算法"></a>什么是diff算法</h2><p>diff算法是比较两个文件的差异，并将两个文件不同之处，将这个不同之处生成一个补丁对象（patch） </p><p>​      diff算法来源后端</p><p>​      前端将其应用于虚拟dom的diff算法</p><p>​      vue中将 虚拟dom的diff算法放在了   patch.js文件中 </p><p>​        使用js来进行两个对象的比较（ vdom 对象模型）</p><p>​      diff算法是同级比较</p><p>​        给每一个层级打一个标记，这个标记是一个数字（ 这个数字就是 key  ）</p><p><strong>vue是一是MVVM框架，Vue高性能的原因之一就是vdom</strong></p><h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><p><code>key</code> 的特殊属性主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes。如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试修复/再利用相同类型元素的算法。使用 key，它会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。</p><p>有相同父元素的子元素必须有<strong>独特的 key</strong>。重复的 key 会造成渲染错误。</p><p> 验证  key  </p><p>  - 列表循环一定加key</p><p>  - key最好是使用具有唯一标识性的  id  </p><p>案例： 以一个案例来说明key是用来做标识的（ 同级比较 ）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for = " (item,index) in list" :key = "item.id"&gt;</span><br><span class="line">        &lt;p&gt; {{ item.text }} &lt;/p&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;button @click = "changeStyle"&gt; 修改样式 &lt;/button&gt;</span><br><span class="line">          &lt;button @click = "remove( index )"&gt;删除 &lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: {</span><br><span class="line">      list: [</span><br><span class="line">        {</span><br><span class="line">          id: <span class="number">1</span>,</span><br><span class="line">          text: <span class="string">'敲代码1'</span></span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          id: <span class="number">2</span>,</span><br><span class="line">          text: <span class="string">'敲代码2'</span></span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">      changeStyle ( e ) {</span><br><span class="line">        <span class="comment">//这里是为了看key的作用，但是真实操作中不会用到，</span></span><br><span class="line">        <span class="comment">// 理由： 我们应该避免操作真实dom</span></span><br><span class="line">        e.target.parentNode.parentNode.style.background = <span class="string">'red'</span></span><br><span class="line">      },</span><br><span class="line">      remove ( index ) {</span><br><span class="line">        <span class="keyword">this</span>.list.splice( index, <span class="number">1</span> )</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  })</span><br></pre></td></tr></tbody></table></figure><p>尝试将key改为index或者不写，在将<code>敲代码1</code>改变样式并删除后，<code>敲代码2</code>的背景色变为了红色；</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;虚拟dom-amp-amp-diff算法-amp-amp-key&quot;&gt;&lt;a href=&quot;#虚拟dom-amp-amp-diff算法-amp-amp-key&quot; class=&quot;headerlink&quot; title=&quot;虚拟dom &amp;&amp; diff算法 &amp;&amp; key&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="前端" scheme="https://yhk15978.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://yhk15978.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="https://yhk15978.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>浅谈vue原理</title>
    <link href="https://yhk15978.github.io//posts/1a123/"/>
    <id>https://yhk15978.github.io//posts/1a123/</id>
    <published>2019-06-22T02:04:45.165Z</published>
    <updated>2019-06-22T02:09:00.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浅谈vue原理"><a href="#浅谈vue原理" class="headerlink" title="浅谈vue原理"></a>浅谈vue原理</h2><ol><li>数据驱动<br>当数据发生改变时，视图也会进行更新，这叫做数据驱动，也就是数据驱动视图</li><li>深入响应式原理<br>数据模型仅仅是普通的 JavaScript 对象。而当你修改它们时，视图会进行更新</li><li>双向数据绑定原理<br>当我们使用 v-model 指令绑定了表单元素时，那么我们可以在视图直接获得数据，当视图发生改变时，数据也会进行更新<br>综上： 三者都是应用了同一个底层原理，这个底层原理由es5的 Object.defineProperty 属性来提供</li></ol><blockquote><p>Object.defineProperty(obj, prop, descriptor)<br>该方法允许精确添加或修改对象的属性。通过赋值操作添加的普通属性是可枚举的，能够在属性枚举期间呈现出来（for…in 或 Object.keys 方法）， 这些属性的值可以被改变，也可以被删除。这个方法允许修改默认的额外选项（或配置）。默认情况下，使用 Object.defineProperty() 添加的属性值是不可修改的。<br><code>obj</code><br>要在其上定义属性的对象。<br><code>prop</code><br>要定义或修改的属性的名称。<br><code>descriptor</code><br>将被定义或修改的属性描述符。<br><code>返回值</code><br>被传递给函数的对象。<br>对象里目前存在的属性描述符有两种主要形式：数据描述符和存取描述符。数据描述符是一个具有值的属性，该值可能是可写的，也可能不是可写的。存取描述符是由getter-setter函数对描述的属性。描述符必须是这两种形式之一；不能同时是两者。<br>数据描述符和存取描述符均具有以下可选键值(默认值是在使用<code>Object.defineProperty()</code>定义属性的情况下)：<br><code>configurable</code><br>当且仅当该属性的 <code>configurable</code> 为 true 时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。默认为 false。<br><code>enumerable</code>当且仅当该属性的<code>enumerable</code>为true时，该属性才能够出现在对象的枚举属性中。默认为 false。<br>数据描述符同时具有以下可选键值：<br><code>value</code>该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。默认为 undefined。<br><code>writable</code>当且仅当该属性的<code>writable</code>为true时，<code>value</code>才能被赋值运算符改变。默认为 false。<br>存取描述符同时具有以下可选键值：<br><code>get</code>一个给属性提供 <code>getter</code> 的方法，如果没有 <code>getter</code> 则为<code>undefined</code>。当访问该属性时，该方法会被执行，方法执行时没有参数传入，但是会传入this对象（由于继承关系，这里的this并不一定是定义该属性的对象）。默认为<code>undefined</code>。<code>set</code>一个给属性提供 <code>setter</code>的方法，如果没有 <code>setter</code> 则为 <code>undefined</code>。当属性值修改时，触发执行该方法。该方法将接受唯一参数，即该属性新的参数值。默认为 <code>undefined</code>。</p></blockquote><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>);</span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.querySelector(<span class="string">'p'</span>);</span><br><span class="line"><span class="keyword">var</span> obj = {</span><br><span class="line">         name: <span class="string">""</span>,</span><br><span class="line">    }</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"name"</span>, {</span><br><span class="line">        <span class="keyword">get</span>() {</span><br><span class="line">             <span class="keyword">return</span> <span class="string">"你好"</span>;</span><br><span class="line">        },</span><br><span class="line">        <span class="keyword">set</span>(val) {</span><br><span class="line">                p.innerHTML = val;</span><br><span class="line">        }</span><br><span class="line">   })</span><br><span class="line">input.oninput = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">          obj.name= <span class="keyword">this</span>.value;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>vue中底层原理的实现主要是依赖 存储器（ getter/setter ）</li><li>我们利用了数据劫持和事件的发布订阅来实现双向数据绑定，当我们在vue data选项中定义数据时，vue会通过观察者对象（ observer ）将data选项中的所有key，经过Object.defineProperty 的getter 和setter进行设置，当我们通过 v-model指令绑定元素是， 自动触发getter,getter会返回一个初始值，这样我们在视图中就可以看到数据了，当视图中内容改变时，会触发setter,setter会通知vue，视图已经进行了更新，vue会重新生成 虚拟DOM , 继而通过 新旧 虚拟DOM 对比， 生成patch对象，再将patch对应渲染到视图中</li></ul><p>Vue.set/this.$set 的原理（ 数组的下标和length不响应 ）</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({ <span class="attr">data</span>:{ <span class="attr">a</span>:<span class="number">1</span> } }) <span class="comment">// `vm.a` 是响应式的</span></span><br><span class="line">      vm.b = <span class="number">2</span> <span class="comment">// `vm.b` 是非响应式的</span></span><br></pre></td></tr></tbody></table></figure><p>对于已经创建的实例，Vue 不允许动态添加根级别的响应式属性。但是，可以使用<code>Vue.set(object, propertyName, value)</code>方法向嵌套对象添加响应式属性。例如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(vm.someObject, <span class="string">'b'</span>, <span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><p>您还可以使用 <code>vm.$set</code> 实例方法，这也是全局 <code>Vue.set</code>方法的别名：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$<span class="keyword">set</span>(this.someObject,'b',2)</span><br></pre></td></tr></tbody></table></figure><p>有时你可能需要为已有对象赋值多个新属性，比如使用 <code>Object.assign()</code> 或 <code>_.extend()</code>。但是，这样添加到对象上的新属性不会触发更新。在这种情况下，你应该用原对象与要混合进去的对象的属性一起创建一个新的对象。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代替 `Object.assign(this.someObject, { a: 1, b: 2 })`</span></span><br><span class="line"><span class="keyword">this</span>.someObject = <span class="built_in">Object</span>.assign({}, <span class="keyword">this</span>.someObject, { <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> })</span><br></pre></td></tr></tbody></table></figure><p>Object.assign()：</p><p> 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。<br> </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = { <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> };</span><br><span class="line"><span class="keyword">const</span> source = { <span class="attr">b</span>: <span class="number">4</span>, <span class="attr">c</span>: <span class="number">5</span> };</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> returnedTarget = <span class="built_in">Object</span>.assign(target, source);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(target);</span><br><span class="line"><span class="comment">// expected output: Object { a: 1, b: 4, c: 5 }</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(returnedTarget);</span><br><span class="line"><span class="comment">// expected output: Object { a: 1, b: 4, c: 5 }</span></span><br></pre></td></tr></tbody></table></figure><p></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;浅谈vue原理&quot;&gt;&lt;a href=&quot;#浅谈vue原理&quot; class=&quot;headerlink&quot; title=&quot;浅谈vue原理&quot;&gt;&lt;/a&gt;浅谈vue原理&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;数据驱动&lt;br&gt;当数据发生改变时，视图也会进行更新，这叫做数据驱动，也就是数据驱动视图&lt;
      
    
    </summary>
    
      <category term="前端" scheme="https://yhk15978.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://yhk15978.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="https://yhk15978.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>框架级的数据请求</title>
    <link href="https://yhk15978.github.io//posts/1/"/>
    <id>https://yhk15978.github.io//posts/1/</id>
    <published>2019-06-22T01:44:14.166Z</published>
    <updated>2019-06-22T02:14:14.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="框架级的数据请求"><a href="#框架级的数据请求" class="headerlink" title="框架级的数据请求"></a>框架级的数据请求</h2><h3 id="1-axios-第三方库"><a href="#1-axios-第三方库" class="headerlink" title="1. axios(第三方库)"></a>1. axios(第三方库)</h3><h4 id="axios-get"><a href="#axios-get" class="headerlink" title="axios get:"></a>axios get:</h4> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script src="https://cdn.bootcss.com/vue/2.6.10/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src="https://cdn.bootcss.com/axios/0.19.0-beta.1/axios.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;button @click="getMData"&gt;get - mock - json&lt;/button&gt;</span><br><span class="line">    &lt;button @click="getOnLineData"&gt;get - backend online- api&lt;/button&gt;</span><br><span class="line">    &lt;button @click="getMPhpData"&gt;get - myself - php -api&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>  <figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    methods: {</span><br><span class="line">        getMData() {</span><br><span class="line">            axios({</span><br><span class="line">                url: <span class="string">"../data/data.json"</span>,</span><br><span class="line">                method: <span class="string">"GET"</span></span><br><span class="line">            })</span><br><span class="line">            .then(<span class="function"><span class="params">res</span> =></span> {</span><br><span class="line">                  <span class="built_in">console</span>.log(res)</span><br><span class="line">            })</span><br><span class="line">            .catch(<span class="function"><span class="params">error</span> =></span> conosle.log(error))</span><br><span class="line">        },</span><br><span class="line">        getOnLineData() {</span><br><span class="line">            axios({</span><br><span class="line">                url: <span class="string">"https://m.maizuo.com/gateway"</span>,</span><br><span class="line">                method: <span class="string">"GET"</span>,</span><br><span class="line">                params: {</span><br><span class="line">                    <span class="string">'cityId'</span>: <span class="number">440100</span>,</span><br><span class="line">                    <span class="string">'pageNum'</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">'pageSize'</span>: <span class="number">20</span>,</span><br><span class="line">                    <span class="string">'type'</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">'k'</span>: <span class="number">6848113</span>,</span><br><span class="line">                },</span><br><span class="line">                headers: {</span><br><span class="line">                    <span class="string">'X-Client-Info'</span>: <span class="string">'{"a":"3000","ch":"1002","v":"5.0.4","e":"15610873798997956485756"}'</span>,</span><br><span class="line">                    <span class="string">'X-Host'</span>: <span class="string">'mall.film-ticket.film.list'</span></span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">            .then(<span class="function"><span class="params">res</span> =></span> {</span><br><span class="line">                   <span class="built_in">console</span>.log(res)</span><br><span class="line">            })</span><br><span class="line">            .catch(<span class="function"><span class="params">error</span> =></span> conosle.log(error))</span><br><span class="line">        },</span><br><span class="line">        getMPhpData() {</span><br><span class="line">        axios({</span><br><span class="line">            url: <span class="string">'http://localhost:8080/get.php'</span>,</span><br><span class="line">            method: <span class="string">'GET'</span>,</span><br><span class="line">            params: {</span><br><span class="line">                a: <span class="number">1</span>,</span><br><span class="line">                b: <span class="number">2</span></span><br><span class="line">            }</span><br><span class="line">            })</span><br><span class="line">            .then(<span class="function"><span class="params">res</span> =></span> {</span><br><span class="line">                   <span class="built_in">console</span>.log(res)</span><br><span class="line">            })</span><br><span class="line">            .catch(<span class="function"><span class="params">error</span> =></span> conosle.log(error))</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h4 id="axios-post"><a href="#axios-post" class="headerlink" title="axios post:"></a>axios post:</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    methods: {</span><br><span class="line">        postData() {</span><br><span class="line">            <span class="keyword">var</span> params = <span class="keyword">new</span> URLSearchParams() <span class="comment">//得到params对象，用来接收参数</span></span><br><span class="line">            <span class="comment">// params.append( key, value ) key就是参数名，value就是参数值</span></span><br><span class="line">            params.append(<span class="string">'a'</span>, <span class="number">2</span>)</span><br><span class="line">            params.append(<span class="string">'b'</span>, <span class="number">2</span>)</span><br><span class="line">            axios({</span><br><span class="line">                url: <span class="string">"http://localhost:8080/post.php"</span>,</span><br><span class="line">                method: <span class="string">"POST"</span>,</span><br><span class="line">                <span class="comment">// data:{</span></span><br><span class="line">                    <span class="comment">// a:2,</span></span><br><span class="line">                    <span class="comment">// b:2</span></span><br><span class="line">                <span class="comment">// }后台不能正常接收数据，要处理未处理的数据才能返回</span></span><br><span class="line">                data: params,</span><br><span class="line">                headers: {</span><br><span class="line">                <span class="string">'Content-Type'</span>: <span class="string">"application/x-www-form-urlencoded"</span> <span class="comment">//请求头设置为表单提交的请求头</span></span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">            .then(<span class="function"><span class="params">res</span> =></span> {</span><br><span class="line">                <span class="built_in">console</span>.log(res)</span><br><span class="line">            })</span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =></span> {</span><br><span class="line">                 <span class="built_in">console</span>.log(err)</span><br><span class="line">            })</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="2-fetch-javascript-原生提供"><a href="#2-fetch-javascript-原生提供" class="headerlink" title="2. fetch ( javascript 原生提供 )"></a>2. fetch ( javascript 原生提供 )</h3><p>fetch是原生javascript提供的 ， 所以它 可以当做全局变量使用 ，它是挂载在window对象身上的</p><p>fetch get&post:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;button @click="getData"&gt; get &lt;/button&gt;</span><br><span class="line">    &lt;button @click="postData"&gt; post &lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    methods: {</span><br><span class="line">        getData() {</span><br><span class="line">            fetch(<span class="string">'http://localhost:8080/get.php?a=1&b=2'</span>, {</span><br><span class="line">                    method: <span class="string">'GET'</span>,</span><br><span class="line">            }).then(<span class="function"><span class="params">res</span> =></span> res.json())<span class="comment">//对数据进行格式化</span></span><br><span class="line">                  .then(<span class="function">(<span class="params">data</span>) =></span> {</span><br><span class="line">                      <span class="built_in">console</span>.log(data)</span><br><span class="line">                     })</span><br><span class="line">                    .catch(<span class="function"><span class="params">err</span> =></span> {</span><br><span class="line">                        <span class="built_in">console</span>.log(err)</span><br><span class="line">                    })</span><br><span class="line">        },</span><br><span class="line">        postData() {</span><br><span class="line">            fetch(<span class="string">'http://localhost:8080/post.php'</span>, {</span><br><span class="line">                      method: <span class="string">'POST'</span>,</span><br><span class="line">                    <span class="comment">// mode: 'cors',</span></span><br><span class="line">                    <span class="comment">// headers: {</span></span><br><span class="line">                    <span class="comment">// 'content-type': 'application/json'</span></span><br><span class="line">                    <span class="comment">// },</span></span><br><span class="line">                    <span class="comment">// body:JSON.stringify({a:1,b:2})//MDN中案例，无效</span></span><br><span class="line">                headers: <span class="keyword">new</span> Headers({</span><br><span class="line">                          <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span> <span class="comment">// 指定提交方式为表单提交</span></span><br><span class="line">                }),</span><br><span class="line">                body: <span class="keyword">new</span> URLSearchParams([</span><br><span class="line">                        [<span class="string">"a"</span>, <span class="number">1</span>],</span><br><span class="line">                        [<span class="string">"b"</span>, <span class="number">2</span>]</span><br><span class="line">                        ]).toString()</span><br><span class="line">                }).then(<span class="function"><span class="params">res</span> =></span> res.json())</span><br><span class="line">                    .then(<span class="function">(<span class="params">data</span>) =></span> {</span><br><span class="line">                             <span class="built_in">console</span>.log(data)</span><br><span class="line">                    })</span><br><span class="line">                    .catch(<span class="function"><span class="params">err</span> =></span> {</span><br><span class="line">                              <span class="built_in">console</span>.log(err)</span><br><span class="line">                    })</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><ul><li>fetch要手动进行一次数据格式化，但是axios是内部进行了数据的格式化</li><li>fetch get 方法请求数据，参数要直接连接在url上</li><li>fetch 格式化数据 有三种 处理方法</li><li>.json() 格式化 json 类型数据， 将 json类型 string 转换成 json 对象</li><li>.text() 格式化文本</li><li>.blob() 格式化二进制数据</li><li>fetch 如果按照官网文档书写post请求，也有坑， 携带数据出现了问题</li><li>fetch post处理</li><li>设置请求头</li><li>通过 new URLSearchPrams 来携带参数</li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">查看更多在MDN</a></p><h3 id="3-vue这边的数据请求的发展"><a href="#3-vue这边的数据请求的发展" class="headerlink" title="3. vue这边的数据请求的发展"></a>3. vue这边的数据请求的发展</h3><ul><li>vue-resource ( Vue 以前自己封装使用的请求类库 ) ，但是 vue-resource作者已经放弃更新了</li><li>vue-resource 作者推荐我们使用 axios</li><li>vue-resource 用法 和 axios 相似度 90% +</li><li>vue2.0我们基本上使用的都是 fetch / axios</li><li>vue-resource 是有<code>jsonp</code>的</li><li>vue-resource 如果在vue中使用，是挂载当前的 实例（ 组件 ） 的$http属性身上的</li><li>举例 <code>this.$http( options )</code> <code>this.$http.get()</code> <code>this.$http.post</code><br>  vue-resource   下载安装引入   vue1.x 推荐    支持jsonp<pre><code>使用:    返回的是promise对象this.$http.get('url地址?key=value&key=value').then(succFN,errorFn)this.$http.get('url地址',{配置}).then(succFN,errorFn)this.$http.post('url地址',{数据},{配置}).then(succFN,errorFn)this.$http.jsonp('url地址',{配置}).then(succFN,errorFn)    params:{ //携带参数        wd:'bulala'      },    jsonp:'cb', //约束回调函数的key,    jsonpCallback:'show',//回调函数名</code></pre></li></ul><p>请求:<br>    body: post需要携带的数据<br>        支持string  a=1&b=2<br>        对象<需要设置emulateJSON：true><br>        URLSearchParams 类型 new Xxx() -> x.set(key,value)<br>    params: {key:value}  携带数据  get<br>    headers: {}  携带请求头<br>    method：’get’ get/post/…..   string<br>    timeout: number  超时<br>    progress：fn   进度<br>    credentials: false  是否携带跨源凭证<br>    emulateJSON：true post请求是需要携带的请求头<br>    jsonp:’回调函数键’ 默认是callback<br>响应：<br>    body      返回的数据  对象  (JSONP.parse)<br>    bodyText  返回的数据  文本格式  toString</p><p>axios    下载安装引入    vue2.x只有推荐        支持jsonp ??</p><p>axios({<br>    url: 地址<br>    method: 提交方法   get/post/put……..<br>    params: get提交参数<br>    data: post提交参数  参数==URLSearchParams  new URLSearchParams().set(key,value)<br>    timeout:超时间<br>    headers： 请求头<br>})<br>拦截器  interceptor<br>在  then   和 catch 之前我们想做的事</p><h2 id="axios-下载安装引入"><a href="#axios-下载安装引入" class="headerlink" title="axios    下载安装引入"></a>axios    下载安装引入</h2><p>   vue2.x推荐<br>希望可以this.$http 去使用axios，需要 配置: Vue.prototype.$http=axios;</p><p>this.$http|axios({配置}).then(成功回调(res)).catch(失败回调(res))<br>this.$http|axios.get(url,{配置}).then(成功回调(res)).catch(失败回调(res))<br>this.$http|axios.post(url,pollfill).then(成功回调(res)).catch(失败回调(res))</p><p>post请求:<br>    pollfill = new URLSearchParams() -> params.append(‘a’, 111);<br>    this.$http|axios.post(url,pollfill).then(成功回调(res)).catch(失败回调(res))</p><pre><code>this.$http|axios({    url:'',    method:'post',    data:pollfill})</code></pre><p>配置:<br>    url:’’ 地址<br>    method: ‘’ 提交姿势<br>    params：{} get提交的数据<br>    data:{} post提交数据<br>res:<br>    data:  数据</p><h3 id="4-axios-和-fetch-没有jsonp-数据请求类型的"><a href="#4-axios-和-fetch-没有jsonp-数据请求类型的" class="headerlink" title="4. axios 和 fetch 没有jsonp 数据请求类型的"></a>4. axios 和 fetch 没有jsonp 数据请求类型的</h3><ul><li>axios 和 fetch 都是promise</li><li>axios会对我们请求来的结果进行再一次的封装（ 让安全性提高 ）</li></ul><p><a href="https://www.jianshu.com/p/8bc48f8fde75" target="_blank" rel="noopener">ajax和axios、fetch的区别</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;框架级的数据请求&quot;&gt;&lt;a href=&quot;#框架级的数据请求&quot; class=&quot;headerlink&quot; title=&quot;框架级的数据请求&quot;&gt;&lt;/a&gt;框架级的数据请求&lt;/h2&gt;&lt;h3 id=&quot;1-axios-第三方库&quot;&gt;&lt;a href=&quot;#1-axios-第三方库&quot; cla
      
    
    </summary>
    
      <category term="前端" scheme="https://yhk15978.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://yhk15978.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="https://yhk15978.github.io/tags/Vue/"/>
    
      <category term="数据请求" scheme="https://yhk15978.github.io/tags/%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>npm scripts  npm脚本</title>
    <link href="https://yhk15978.github.io//posts/4a17b235/"/>
    <id>https://yhk15978.github.io//posts/4a17b235/</id>
    <published>2019-06-21T12:38:25.690Z</published>
    <updated>2019-06-21T14:24:16.549Z</updated>
    
    <content type="html"><![CDATA[<p>转载自：阮一峰<a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html</a></p><h2 id="一、什么是-npm-脚本？"><a href="#一、什么是-npm-脚本？" class="headerlink" title="一、什么是 npm 脚本？"></a>一、什么是 npm 脚本？</h2><p>npm 允许在<code>package.json</code>文件里面，使用<code>scripts</code>字段定义脚本命令。</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">// ...</span><br><span class="line">"scripts": {</span><br><span class="line">"build": "node build.js"</span><br><span class="line">}}</span><br></pre></td></tr></tbody></table></figure><p>上面代码是<code>package.json</code>文件的一个片段，里面的<code>scripts</code>字段是一个对象。它的每一个属性，对应一段脚本。比如，<code>build</code>命令对应的脚本是<code>node build.js</code>。</p><p>命令行下使用<code>npm run</code>命令，就可以执行这段脚本。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br><span class="line"># 等同于执行</span><br><span class="line">$ node build.js</span><br></pre></td></tr></tbody></table></figure><p>这些定义在<code>package.json</code>里面的脚本，就称为 npm 脚本。它的优点很多。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">项目的相关脚本，可以集中在一个地方。</span><br><span class="line">不同项目的脚本命令，只要功能相同，就可以有同样的对外接口。用户不需要知道怎么测试你的项目，只要运行npm run test即可。</span><br><span class="line">可以利用 npm 提供的很多辅助功能。</span><br></pre></td></tr></tbody></table></figure><p>查看当前项目的所有 npm 脚本命令，可以使用不带任何参数的<code>npm run</code>命令。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run</span><br></pre></td></tr></tbody></table></figure><h2 id="二、原理"><a href="#二、原理" class="headerlink" title="二、原理"></a>二、原理</h2><p>npm 脚本的原理非常简单。每当执行<code>npm run</code>，就会自动新建一个 Shell，在这个 Shell 里面执行指定的脚本命令。因此，只要是 Shell（一般是 Bash）可以运行的命令，就可以写在 npm 脚本里面。</p><p>比较特别的是，<code>npm run</code>新建的这个 Shell，会将当前目录的<code>node_modules/.bin</code>子目录加入<code>PATH</code>变量，执行结束后，再将PATH变量恢复原样。</p><p>这意味着，当前目录的<code>node_modules/.bin</code>子目录里面的所有脚本，都可以直接用脚本名调用，而不必加上路径。比如，当前项目的依赖里面有<code>Mocha</code>，只要直接写<code>mocha test</code>就可以了。</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"test": "mocha test"</span><br></pre></td></tr></tbody></table></figure><p>而不用写成下面这样。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"test": "./node_modules/.bin/mocha test"</span><br></pre></td></tr></tbody></table></figure><p>由于 npm 脚本的唯一要求就是可以在 Shell 执行，因此它不一定是 Node 脚本，任何可执行文件都可以写在里面。<br>npm 脚本的退出码，也遵守 Shell 脚本规则。如果退出码不是<code>0</code>，npm 就认为这个脚本执行失败。</p><h2 id="三、通配符"><a href="#三、通配符" class="headerlink" title="三、通配符"></a>三、通配符</h2><p>由于 npm 脚本就是 Shell 脚本，因为可以使用 Shell 通配符。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"lint": "jshint *.js"</span><br><span class="line">"lint": "jshint **/*.js"</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，<code>*</code>表示任意文件名，<code>**</code>表示任意一层子目录。<br>如果要将通配符传入原始命令，防止被 Shell 转义，要将星号转义。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"test": "tap test/\*.js"</span><br></pre></td></tr></tbody></table></figure><h2 id="四、传参"><a href="#四、传参" class="headerlink" title="四、传参"></a>四、传参</h2><p>向 npm 脚本传入参数，要使用<code>--</code>标明</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"lint": "jshint **.js"</span><br></pre></td></tr></tbody></table></figure><p>向上面的<code>npm run lint</code>命令传入参数，必须写成下面这样。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run lint --  --reporter checkstyle > checkstyle.xml</span><br></pre></td></tr></tbody></table></figure><p>也可以在package.json里面再封装一个命令。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"lint": "jshint **.js",</span><br><span class="line">"lint:checkstyle": "npm run lint -- --reporter checkstyle > checkstyle.xml"</span><br></pre></td></tr></tbody></table></figure><h2 id="五、执行顺序"><a href="#五、执行顺序" class="headerlink" title="五、执行顺序"></a>五、执行顺序</h2><p>如果 npm 脚本里面需要执行多个任务，那么需要明确它们的执行顺序。<br>如果是并行执行（即同时的平行执行），可以使用<code>&</code>符号。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run script1.js & npm run script2.js</span><br></pre></td></tr></tbody></table></figure><p>如果是继发执行（即只有前一个任务成功，才执行下一个任务），可以使用<code>&&</code>符号。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run script1.js && npm run script2.js</span><br></pre></td></tr></tbody></table></figure><p>这两个符号是 Bash 的功能。此外，还可以使用 node 的任务管理模块：<a href="https://github.com/paulpflug/script-runner" target="_blank" rel="noopener">script-runner</a>、<a href="https://github.com/mysticatea/npm-run-all" target="_blank" rel="noopener">npm-run-all</a>、<a href="https://github.com/coderaiser/redrun" target="_blank" rel="noopener">redrun</a>。</p><h2 id="六、默认值"><a href="#六、默认值" class="headerlink" title="六、默认值"></a>六、默认值</h2><p>一般来说，npm 脚本由用户提供。但是，npm 对两个脚本提供了默认值。也就是说，这两个脚本不用定义，就可以直接使用。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"start":"node sever.js",</span><br><span class="line">"install":"node-gyp rebuild"</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，<code>npm run start</code>的默认值是<code>node server.js</code>，前提是项目根目录下有<code>server.js</code>这个脚本；<code>npm run install</code>的默认值是<code>node-gyp rebuild</code>，前提是项目根目录下有<code>binding.gyp</code>文件。</p><h2 id="七、钩子"><a href="#七、钩子" class="headerlink" title="七、钩子"></a>七、钩子</h2><p>npm 脚本有<code>pre</code>和<code>post</code>两个钩子。举例来说，<code>build</code>脚本命令的钩子就是<code>prebuild</code>和<code>postbuild</code>。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"prebuild": "echo I run before the build script",</span><br><span class="line">"build": "cross-env NODE_ENV=production webpack",</span><br><span class="line">"postbuild": "echo I run after the build script"</span><br></pre></td></tr></tbody></table></figure><p>用户执行<code>npm run build</code>的时候，会自动按照下面的顺序执行。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run prebuild && npm run build && npm run postbuild</span><br></pre></td></tr></tbody></table></figure><p>因此，可以在这两个钩子里面，完成一些准备工作和清理工作。下面是一个例子。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"clean": "rimraf ./dist && mkdir dist",</span><br><span class="line">"prebuild": "npm run clean",</span><br><span class="line">"build": "cross-env NODE_ENV=production webpack"</span><br></pre></td></tr></tbody></table></figure><p>npm 默认提供下面这些钩子</p><ul><li>prepublish，postpublish</li><li>preinstall，postinstallpreuninstall，</li><li>postuninstallpreversion，postversionpretest</li><li>posttestprestop，poststopprestart，</li><li>poststartprerestart，postrestart</li></ul><p>自定义的脚本命令也可以加上<code>pre</code>和<code>post</code>钩子。比如，<code>myscript</code>这个脚本命令，也有<code>premyscript</code>和<code>postmyscript</code>钩子。不过，双重的<code>pre</code>和<code>post</code>无效，比如<code>prepretest</code>和<code>postposttest</code>是无效的。<br>npm 提供一个<code>npm_lifecycle_event</code>变量，返回当前正在运行的脚本名称，比如<code>pretest</code>、<code>test</code>、<code>posttest</code>等等。所以，可以利用这个变量，在同一个脚本文件里面，为不同的<code>npm scripts</code>命令编写代码。请看下面的例子。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> TARGET = process.env.npm_lifecycle_event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (TARGET === <span class="string">'test'</span>) {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Running the test task!`</span>);}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (TARGET === <span class="string">'pretest'</span>) {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Running the pretest task!`</span>);}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (TARGET === <span class="string">'posttest'</span>) {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Running the posttest task!`</span>);}</span><br></pre></td></tr></tbody></table></figure><p>注意，<code>prepublish</code>这个钩子不仅会在<code>npm publish</code>命令之前运行，还会在<code>npm install</code>（不带任何参数）命令之前运行。这种行为很容易让用户感到困惑，所以 npm 4 引入了一个新的钩子<code>prepare</code>，行为等同于<code>prepublish</code>，而从 npm 5 开始，<code>prepublish</code>将只在<code>npm publish</code>命令之前运行。</p><h2 id="八、简写形式"><a href="#八、简写形式" class="headerlink" title="八、简写形式"></a>八、简写形式</h2><p>四个常用的 npm 脚本有简写形式。</p><ul><li>npm start是npm run start</li><li>npm stop是npm run stop的简写</li><li>npm test是npm run test的简写</li><li>npm restart是npm run stop && npm run restart && npm run start的简写</li></ul><p><code>npm start</code>、<code>npm stop</code>和<code>npm restart</code>都比较好理解，而<code>npm restart</code>是一个复合命令，实际上会执行三个脚本命令：<code>stop</code>、<code>restart</code>、<code>start</code>。具体的执行顺序如下。</p><ol><li>prerestart</li><li>prestop</li><li>stop</li><li>poststop</li><li>restart</li><li>prestart</li><li>start</li><li>poststart</li><li>postrestart</li></ol><h2 id="九、变量"><a href="#九、变量" class="headerlink" title="九、变量"></a>九、变量</h2><p>npm 脚本有一个非常强大的功能，就是可以使用 npm 的内部变量。<br>首先，通过<code>npm_package_</code>前缀，npm 脚本可以拿到<code>package.json</code>里面的字段。比如，下面是一个<code>package.json</code>。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "name": "foo", </span><br><span class="line">  "version": "1.2.5",</span><br><span class="line">  "scripts": {</span><br><span class="line">    "view": "node view.js"</span><br><span class="line">  }}</span><br></pre></td></tr></tbody></table></figure><p>那么，变量<code>npm_package_name</code>返回<code>foo</code>，变量<code>npm_package_version</code>返回<code>1.2.5</code>。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// view.js</span></span><br><span class="line"><span class="built_in">console</span>.log(process.env.npm_package_name); <span class="comment">// foo</span></span><br><span class="line"><span class="built_in">console</span>.log(process.env.npm_package_version); <span class="comment">// 1.2.5</span></span><br></pre></td></tr></tbody></table></figure><p>上面代码中，我们通过环境变量<code>process.env</code>对象，拿到<code>package.json</code>的字段值。如果是 Bash 脚本，可以用<code>$npm_package_name</code>和<code>$npm_package_version</code>取到这两个值。</p><p><code>npm_package_</code>前缀也支持嵌套的<code>package.json</code>字段。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"repository": {</span><br><span class="line">   "type": "git",</span><br><span class="line">   "url": "xxx"</span><br><span class="line"> },</span><br><span class="line"> scripts: {</span><br><span class="line">   "view": "echo $npm_package_repository_type"</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，<code>repository</code>字段的<code>type</code>属性，可以通过<code>npm_package_repository_type</code>取到。下面是另外一个例子。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"scripts": {</span><br><span class="line">  "install": "foo.js"}</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，<code>npm_package_scripts_install</code>变量的值等于<code>foo.js</code>。</p><p>然后，npm 脚本还可以通过<code>npm_config_</code>前缀，拿到 npm 的配置变量，即<code>npm config get xxx</code>命令返回的值。比如，当前模块的发行标签，可以通过<code>npm_config_tag</code>取到。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"view": "echo $npm_config_tag",</span><br></pre></td></tr></tbody></table></figure><p>注意，<code>package.json</code>里面的<code>config</code>对象，可以被环境变量覆盖。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{ </span><br><span class="line">  "name" : "foo",</span><br><span class="line">  "config" : { "port" : "8080" },</span><br><span class="line">  "scripts" : { "start" : "node server.js" }}</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，<code>npm_package_config_port</code>变量返回的是8080。这个值可以用下面的方法覆盖。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config set foo:port 80</span><br></pre></td></tr></tbody></table></figure><p>最后，<code>env</code>命令可以列出所有环境变量。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"env": "env"</span><br></pre></td></tr></tbody></table></figure><h2 id="十、常用脚本示例"><a href="#十、常用脚本示例" class="headerlink" title="十、常用脚本示例"></a>十、常用脚本示例</h2><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 删除目录</span><br><span class="line">"clean": "rimraf dist/*",</span><br><span class="line">// 本地搭建一个 HTTP 服务</span><br><span class="line">"serve": "http-server -p 9090 dist/",</span><br><span class="line">// 打开浏览器</span><br><span class="line">"open:dev": "opener http://localhost:9090",</span><br><span class="line">// 实时刷新</span><br><span class="line"> "livereload": "live-reload --port 9091 dist/",</span><br><span class="line">// 构建 HTML 文件</span><br><span class="line">"build:html": "jade index.jade > dist/index.html",</span><br><span class="line">// 只要 CSS 文件有变动，就重新执行构建</span><br><span class="line">"watch:css": "watch 'npm run build:css' assets/styles/",</span><br><span class="line">// 只要 HTML 文件有变动，就重新执行构建</span><br><span class="line">"watch:html": "watch 'npm run build:html' assets/html",</span><br><span class="line">// 部署到 Amazon S3</span><br><span class="line">"deploy:prod": "s3-cli sync ./dist/ s3://example-com/prod-site/",</span><br><span class="line">// 构建 favicon</span><br><span class="line">"build:favicon": "node scripts/favicon.js",</span><br></pre></td></tr></tbody></table></figure><h2 id="十一、-npm-scripts-npm脚本"><a href="#十一、-npm-scripts-npm脚本" class="headerlink" title="十一、 npm scripts npm脚本"></a>十一、 npm scripts npm脚本</h2><ol><li>明白为什么要使用npm脚本 集中存储当前项目的所有脚本命令</li><li>npm脚本使用 npm run xxx</li><li>npm多脚本执行 npm run xxx & npm run xxx npm run xxx && npm run xxx</li><li>npm脚本可以简写，但是仅限一下几个<br>npm start<br>npm stop<br>npm test<br>npm restart</li></ol><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"scripts"</span>,</span><br><span class="line"><span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line"><span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line"><span class="attr">"scripts"</span>: {</span><br><span class="line"><span class="attr">"pretest"</span>: <span class="string">"echo pretest"</span>,</span><br><span class="line"><span class="attr">"test"</span>: <span class="string">"echo test"</span>,</span><br><span class="line"><span class="attr">"posttest"</span>: <span class="string">"echo posttest"</span>,</span><br><span class="line"><span class="attr">"dev"</span>: <span class="string">"node server.js"</span>,</span><br><span class="line"><span class="attr">"build"</span>: <span class="string">"npm run dev"</span>,</span><br><span class="line"><span class="attr">"app"</span>: <span class="string">"node app.js"</span>,</span><br><span class="line"><span class="attr">"yyb"</span>: <span class="string">"npm run app&npm run dev"</span>,</span><br><span class="line"><span class="attr">"junge"</span>: <span class="string">"npm run app&&npm run dev"</span>,</span><br><span class="line"><span class="attr">"env"</span>: <span class="string">"env"</span></span><br><span class="line">},</span><br><span class="line"><span class="attr">"keywords"</span>: [],</span><br><span class="line"><span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="十一、参考链接"><a href="#十一、参考链接" class="headerlink" title="十一、参考链接"></a>十一、参考链接</h2><h5 id="http-www-ruanyifeng-com-blog-2016-10-npm-scripts-htmlby-ruanyifeng"><a href="#http-www-ruanyifeng-com-blog-2016-10-npm-scripts-htmlby-ruanyifeng" class="headerlink" title="* http://www.ruanyifeng.com/blog/2016/10/npm_scripts.htmlby ruanyifeng"></a>* <a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html</a>by ruanyifeng</h5><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载自：阮一峰&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.ruanyifeng.com/blog/20
      
    
    </summary>
    
      <category term="前端" scheme="https://yhk15978.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="nodejs" scheme="https://yhk15978.github.io/categories/%E5%89%8D%E7%AB%AF/nodejs/"/>
    
    
      <category term="nodejs" scheme="https://yhk15978.github.io/tags/nodejs/"/>
    
      <category term="前端" scheme="https://yhk15978.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://yhk15978.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 常用模块</title>
    <link href="https://yhk15978.github.io//posts/4a17b109/"/>
    <id>https://yhk15978.github.io//posts/4a17b109/</id>
    <published>2019-06-21T12:26:48.145Z</published>
    <updated>2019-06-21T12:28:59.511Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Node-js-常用模块"><a href="#Node-js-常用模块" class="headerlink" title="Node.js 常用模块"></a>Node.js 常用模块</h2><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><ol><li>url.parse(urlString[, parseQueryString[, slashesDenoteHost]]) 将url字符转成url对象</li></ol><ul><li><code>urlString</code> 要解析的 URL 字符串。</li><li><code>parseQueryString</code> 如果设为 <code>true</code>，则返回的 URL 对象的 <code>query</code> 属性会是一个使用 <a href="http://nodejs.cn/s/i23Gdh" target="_blank" rel="noopener"><code>querystring</code></a> 模块的 <code>parse()</code> 生成的对象。 如果设为 <code>false</code>，则 <code>query</code> 会是一个未解析未解码的字符串。 默认为 <code>false</code>。</li><li><code>slashesDenoteHost</code> 如果设为 <code>true</code>，则 <code>//</code> 之后至下一个 <code>/</code> 之前的字符串会解析作为 <code>host</code>。 例如， <code>//foo/bar</code> 会解析为 <code>{host: 'foo', pathname: '/bar'}</code> 而不是 <code>{pathname: '//foo/bar'}</code>。 默认为 <code>false</code>。</li></ul><ol start="2"><li>url.format(URL[, options])将url对象转成url字符</li></ol><ul><li><code>URL</code> 一个对象</li><li><code>options</code></li><li><code>auth</code> 如果序列化的URL字符串应该包含用户名和密码为<code>true</code>，否则为<code>false</code>。默认为<code>true</code>。</li><li><code>fragment</code> 如果序列化的URL字符串应该包含分段为<code>true</code>，否则为<code>false</code>。默认为<code>true</code>。</li><li><code>search</code>如果序列化的URL字符串应该包含搜索查询为<code>true</code>，否则为<code>false</code>。默认为<code>true</code>。</li><li><code>unicode</code> <code>true</code> 如果出现在URL字符串主机元素里的Unicode字符应该被直接编码而不是使用Punycode编码为<code>true</code>，默认为<code>false</code>。</li></ul><p>3.url.resolve(from, to)url路径的拼接，替换</p><ul><li><code>from</code> 解析时相对的基本 URL。</li><li><code>to</code>要解析的超链接 URL。</li><li>例子：<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line">url.resolve(<span class="string">'/one/two/three'</span>, <span class="string">'four'</span>); <span class="comment">// '/one/two/four'</span></span><br><span class="line">url.resolve(<span class="string">'http://example.com/'</span>, <span class="string">'/one'</span>); <span class="comment">// 'http://example.com/one'</span></span><br><span class="line">url.resolve(<span class="string">'http://example.com/one'</span>, <span class="string">'/two'</span>); <span class="comment">// 'http://example.com/two'</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="querystring（查询字符串）"><a href="#querystring（查询字符串）" class="headerlink" title="querystring（查询字符串）"></a>querystring（查询字符串）</h3><ol><li>querystring.stringify(obj[, sep[, eq[, options]]])解析对象部分转成URLsearch</li></ol><ul><li><code>obj</code> 要序列化为 URL 查询字符串的对象。</li><li><code>sep</code>用于在查询字符串中分隔键值对的子字符串。<strong>默认值:</strong> <code>'&'</code>。</li><li><code>eq</code> 用于在查询字符串中分隔键和值的子字符串。<strong>默认值:</strong> <code>'='</code>。</li><li><code>options</code></li><li><code>encodeURIComponent</code> 在查询字符串中将 URL 不安全字符转换为百分比编码时使用的函数。<strong>默认值:</strong> <code>querystring.escape()</code>。<code>querystring.stringify()</code> 方法通过迭代对象的自身属性从给定的 <code>obj</code> 生成 URL 查询字符串<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">querystring.stringify({ <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: [<span class="string">'qux'</span>, <span class="string">'quux'</span>], <span class="attr">corge</span>: <span class="string">''</span> });</span><br><span class="line"><span class="comment">// 返回 'foo=bar&baz=qux&baz=quux&corge='</span></span><br><span class="line">querystring.stringify({ <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="string">'qux'</span> }, <span class="string">';'</span>, <span class="string">':'</span>);</span><br><span class="line"><span class="comment">// 返回 'foo:bar;baz:qux'</span></span><br></pre></td></tr></tbody></table></figure></li></ul><p>默认情况下，查询字符串中需要百分比编码的字符将编码为 UTF-8。 如果需要其他编码，则需要指定其他 <code>encodeURIComponent</code> 选项：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设 gbkEncodeURIComponent 函数已存在。</span></span><br><span class="line">querystring.stringify({ <span class="attr">w</span>: <span class="string">'中文'</span>, <span class="attr">foo</span>: <span class="string">'bar'</span> }, <span class="literal">null</span>, <span class="literal">null</span>,</span><br><span class="line">{ <span class="attr">encodeURIComponent</span>: gbkEncodeURIComponent });</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>querystring.parse(str[, sep[, eq[, options]]]) 解析URLsearch部分转成对象</li></ol><ul><li><code>str</code> 要解析的 URL 查询字符串。</li><li><code>sep</code> 用于在查询字符串中分隔键值对的子字符串。<strong>默认值:</strong> <code>'&'</code>。</li><li><code>eq</code>用于在查询字符串中分隔键和值的子字符串。<strong>默认值:</strong> <code>'='</code>。</li><li><code>options</code></li><li><code>decodeURIComponent</code>解码查询字符串中的百分比编码字符时使用的函数。<strong>默认值:</strong> <code>querystring.unescape()</code>。</li><li><code>maxKeys</code> 指定要解析的键的最大数量。指定 <code>0</code> 可移除键的计数限制。<strong>默认值:</strong> <code>1000</code>。<code>querystring.parse()</code> 方法将 URL 查询字符串 <code>str</code> 解析为键值对的集合。<br>例如，查询字符串 <code>'foo=bar&abc=xyz&abc=123'</code> 被解析为：<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">foo: <span class="string">'bar'</span>,</span><br><span class="line">abc: [<span class="string">'xyz'</span>, <span class="string">'123'</span>]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><p><code>querystring.parse()</code> 方法返回的对象不是原型继承自 JavaScript <code>Object</code>。 这意味着典型的 <code>Object</code> 方法如 <code>obj.toString()</code>、 <code>obj.hasOwnProperty()</code> 等都没有定义并且不起作用。<br>默认情况下，将假定查询字符串中的百分比编码字符使用 UTF-8 编码。 如果使用其他字符编码，则需要指定其他 <code>decodeURIComponent</code> 选项：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设 gbkDecodeURIComponent 函数已存在。</span></span><br><span class="line">querystring.parse(<span class="string">'w=%D6%D0%CE%C4&foo=bar'</span>, <span class="literal">null</span>, <span class="literal">null</span>,</span><br><span class="line">{ <span class="attr">decodeURIComponent</span>: gbkDecodeURIComponent });</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>querystring.escape(str) 可以将中文转成url百分比编码</li></ol><ul><li><code>str</code><br><code>querystring.escape()</code> 方法以对 URL 查询字符串的特定要求进行了优化的方式对给定的 <code>str</code> 执行 URL 百分比编码。<br><code>querystring.escape()</code> 方法由 <code>querystring.stringify()</code> 使用，通常不会直接使用。 它的导出主要是为了允许应用程序代码在必要时通过将 <code>querystring.escape</code> 指定给替代函数来提供替换的百分比编码实现。</li></ul><ol start="4"><li>querystring.unescape(str)可以将url百分比编码解码</li></ol><ul><li><code>str</code><br><code>querystring.unescape()</code> 方法在给定的 <code>str</code> 上执行 URL 百分比编码字符的解码。<br><code>querystring.unescape()</code> 方法由 <code>querystring.parse()</code> 使用，通常不会直接使用它。 它的导出主要是为了允许应用程序代码在必要时通过将 <code>querystring.unescape</code> 分配给替代函数来提供替换的解码实现。<br>默认情况下， <code>querystring.unescape()</code> 方法将尝试使用 JavaScript 内置的 <code>decodeURIComponent()</code> 方法进行解码。 如果失败，将使用更安全的不会丢失格式错误的 URL 的等价方法。<h3 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h3></li></ul><ol><li>http.get(options[, callback])http.get(url[,options][, callback])</li></ol><ul><li><code>url</code> string| url</li><li><code>options</code> 接受与 <a href="http://nodejs.cn/s/d1myoL" target="_blank" rel="noopener"><code>http.request()</code></a> 相同的 <code>options</code>，且 <code>method</code> 始终设置为 <code>GET</code>。从原型继承的属性将被忽略。</li><li><code>callback</code>Function</li><li>返回:http.ClientRequest<br>由于大多数请求都是没有主体的 GET 请求，因此 Node.js 提供了这个便捷的方法。 这个方法与 <a href="http://nodejs.cn/s/d1myoL" target="_blank" rel="noopener"><code>http.request()</code></a> 的唯一区别是它将方法设置为 GET 并自动调用 <code>req.end()</code>。 注意，由于 <a href="http://nodejs.cn/s/2F5RHd" target="_blank" rel="noopener"><code>http.ClientRequest</code></a> 章节中所述的原因，回调必须注意消费响应数据。<br><code>callback</code> 调用时只有一个参数，该参数是 <a href="http://nodejs.cn/s/2RqpEw" target="_blank" rel="noopener"><code>http.IncomingMessage</code></a> 的实例。<br>获取 JSON 的示例：<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">http.get(<span class="string">'http://nodejs.cn/index.json'</span>, (res) => {</span><br><span class="line"><span class="keyword">const</span> { statusCode } = res;</span><br><span class="line"><span class="keyword">const</span> contentType = res.headers[<span class="string">'content-type'</span>];</span><br><span class="line"><span class="keyword">let</span> error;</span><br><span class="line"><span class="keyword">if</span> (statusCode !== <span class="number">200</span>) {</span><br><span class="line">error = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请求失败\n'</span> +</span><br><span class="line"><span class="string">`状态码: <span class="subst">${statusCode}</span>`</span>);</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="regexp">/^application\/json/</span>.test(contentType)) {</span><br><span class="line">error = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'无效的 content-type.\n'</span> +</span><br><span class="line"><span class="string">`期望的是 application/json 但接收到的是 <span class="subst">${contentType}</span>`</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (error) {</span><br><span class="line"><span class="built_in">console</span>.error(error.message);</span><br><span class="line"><span class="comment">// 消费响应数据来释放内存。</span></span><br><span class="line">res.resume();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">res.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line"><span class="keyword">let</span> rawData = <span class="string">''</span>;</span><br><span class="line">res.on(<span class="string">'data'</span>, (chunk) => { rawData += chunk; });</span><br><span class="line">res.on(<span class="string">'end'</span>, () => {</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line"><span class="keyword">const</span> parsedData = <span class="built_in">JSON</span>.parse(rawData);</span><br><span class="line"><span class="built_in">console</span>.log(parsedData);</span><br><span class="line">} <span class="keyword">catch</span> (e) {</span><br><span class="line"><span class="built_in">console</span>.error(e.message);</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line">}).on(<span class="string">'error'</span>, (e) => {</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">`出现错误: <span class="subst">${e.message}</span>`</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></li></ul><ol start="2"><li>http.request(options[, callback]) http.request(url[, options][, callback])</li></ol><ul><li><code>url</code><string> |url</string></li><li><code>options</code> Object</li><li><code>protocol</code> <string>使用的协议。<strong>默认值:</strong> <code>'http:'</code>。</string></li><li><code>host</code> <string>请求发送至的服务器的域名或 IP 地址。<strong>默认值:</strong> <code>'localhost'</code>。</string></li><li><code>hostname</code><string> <code>host</code> 的别名。为了支持 <a href="http://nodejs.cn/s/b28B2A" target="_blank" rel="noopener"><code>url.parse()</code></a>，如果同时指定 <code>host</code> 和 <code>hostname</code>，则使用 <code>hostname</code>。</string></li><li><code>family</code> number当解析 <code>host</code> 或 <code>hostname</code> 时使用的 IP 地址族。有效值为 <code>4</code> 或 <code>6</code>。如果没有指定，则同时使用 IP v4 和 v6。</li><li><code>port</code> number远程服务器的端口。<strong>默认值:</strong> <code>80</code>。</li><li><code>localAddress</code> <string>为网络连接绑定的本地接口。</string></li><li><code>socketPath</code> <string>Unix 域套接字。如果指定了 <code>host</code> 或 <code>port</code> 之一（它们指定了 TCP 套接字），则不能使用此选项。</string></li><li><code>method</code><string> 一个字符串，指定 HTTP 请求的方法。<strong>默认值:</strong> <code>'GET'</code>。</string></li><li><code>path</code> <string>请求的路径。应包括查询字符串（如果有）。例如 <code>'/index.html?page=12'</code>。当请求的路径包含非法的字符时，则抛出异常。目前只有空格被拒绝，但未来可能会有所变化。<strong>默认值:</strong> <code>'/'</code>。</string></li><li><code>headers</code>Object 包含请求头的对象。</li><li><code>auth</code> <string>基本的身份验证，即 <code>'user:password'</code>，用于计算授权请求头。</string></li><li><code>agent</code> <http.Agent>| <boolean>控制 <a href="http://nodejs.cn/s/HRCnER" target="_blank" rel="noopener"><code>Agent</code></a> 的行为。可能的值有：</boolean></li><li><code>undefined</code> (默认): 对此主机和端口使用 <a href="http://nodejs.cn/s/g7BhW2" target="_blank" rel="noopener"><code>http.globalAgent</code></a>。</li><li><code>Agent</code> 对象: 显式地使用传入的 <code>Agent</code>。</li><li><code>false</code>: 使用新建的具有默认值的 <code>Agent</code>。</li><li><code>createConnection</code> <function>当 <code>agent</code> 选项未被使用时，用来为请求生成套接字或流的函数。这可用于避免创建自定义的 <code>Agent</code> 类以覆盖默认的 <code>createConnection</code> 函数。详见 <a href="http://nodejs.cn/s/nH3X12" target="_blank" rel="noopener"><code>agent.createConnection()</code></a>。任何<a href="http://nodejs.cn/s/2iRabr" target="_blank" rel="noopener">双工流</a>都是有效的返回值。</function></li><li><code>timeout</code><number>: 指定套接字超时的数值，以毫秒为单位。这会在套接字被连接之前设置超时。</number></li><li><code>setHost</code> <boolean>: 指定是否自动添加 <code>Host</code> 请求头。<strong>默认值:</strong> <code>true</code>。</boolean></li><li><code>callback</code> <function></function></li><li>返回: <http.ClientRequest><br>Node.js 为每个服务器维护多个连接以发出 HTTP 请求。 此函数允许显式地发出请求。<br><code>url</code> 可以是字符串或 <a href="http://nodejs.cn/s/5dwq7G" target="_blank" rel="noopener"><code>URL</code></a> 对象。 如果 <code>url</code> 是一个字符串，则会自动使用 <a href="http://nodejs.cn/s/b28B2A" target="_blank" rel="noopener"><code>url.parse()</code></a> 解析它。 如果它是一个 <a href="http://nodejs.cn/s/5dwq7G" target="_blank" rel="noopener"><code>URL</code></a> 对象，则会自动转换为普通的 <code>options</code> 对象。<br>如果同时指定了 <code>url</code> 和 <code>options</code>，则对象会被合并，其中 <code>options</code> 属性优先。<br>可选的 <code>callback</code> 参数会作为单次监听器被添加到 <a href="http://nodejs.cn/s/qwaiK8" target="_blank" rel="noopener"><code>'response'</code></a> 事件。<br><code>http.request()</code> 返回 <a href="http://nodejs.cn/s/2F5RHd" target="_blank" rel="noopener"><code>http.ClientRequest</code></a> 类的实例。 <code>ClientRequest</code> 实例是一个可写流。 如果需要使用 POST 请求上传文件，则写入到 <code>ClientRequest</code> 对象。<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> postData = querystring.stringify({</span><br><span class="line"><span class="string">'msg'</span>: <span class="string">'你好世界'</span></span><br><span class="line">});</span><br><span class="line"><span class="keyword">const</span> options = {</span><br><span class="line">hostname: <span class="string">'nodejs.cn'</span>,</span><br><span class="line">port: <span class="number">80</span>,</span><br><span class="line">path: <span class="string">'/upload'</span>,</span><br><span class="line">method: <span class="string">'POST'</span>,</span><br><span class="line">headers: {</span><br><span class="line"><span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line"><span class="string">'Content-Length'</span>: Buffer.byteLength(postData)</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="keyword">const</span> req = http.request(options, (res) => {</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`状态码: <span class="subst">${res.statusCode}</span>`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`响应头: <span class="subst">${<span class="built_in">JSON</span>.stringify(res.headers)}</span>`</span>);</span><br><span class="line">res.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line">res.on(<span class="string">'data'</span>, (chunk) => {</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`响应主体: <span class="subst">${chunk}</span>`</span>);</span><br><span class="line">});</span><br><span class="line">res.on(<span class="string">'end'</span>, () => {</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'响应中已无数据'</span>);</span><br><span class="line">});</span><br><span class="line">});</span><br><span class="line">req.on(<span class="string">'error'</span>, (e) => {</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">`请求遇到问题: <span class="subst">${e.message}</span>`</span>);</span><br><span class="line">});</span><br><span class="line"><span class="comment">// 将数据写入请求主体。</span></span><br><span class="line">req.write(postData);</span><br><span class="line">req.end();</span><br></pre></td></tr></tbody></table></figure></li></ul><p>注意，在示例中调用了 <code>req.end()</code>。 使用 <code>http.request()</code> 时，必须始终调用 <code>req.end()</code> 来表示请求的结束，即使没有数据被写入请求主体。<br>如果在请求期间遇到任何错误（DNS 解析错误、TCP 层的错误、或实际的 HTTP 解析错误），则会在返回的请求对象上触发 <code>'error'</code> 事件。 与所有 <code>'error'</code> 事件一样，如果没有注册监听器，则会抛出错误。<br>以下是需要注意的一些特殊的请求头。</p><ul><li>发送 <code>'Connection: keep-alive'</code> 会通知 Node.js 与服务器的连接应该持续到下一个请求。</li><li>发送 <code>'Content-Length'</code> 请求头会禁用默认的分块编码。</li><li>发送 <code>'Expect'</code> 请求头会立即发送请求头。通常情况下，当发送 <code>'Expect: 100-continue'</code> 时，应设置超时时间和 <code>'continue'</code> 事件的监听器。详见 RFC2616 的第 8.2.3 节。</li><li>发送授权请求头会使用 <code>auth</code> 选项覆盖以计算基本的身份验证。<br>使用 <a href="http://nodejs.cn/s/5dwq7G" target="_blank" rel="noopener"><code>URL</code></a> 作为 <code>options</code> 的示例：<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = <span class="keyword">new</span> URL(<span class="string">'http://abc:xyz@nodejs.cn'</span>);</span><br><span class="line"><span class="keyword">const</span> req = http.request(options, (res) => {</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></li></ul><p>在成功的请求中，会按以下顺序触发以下事件：</p><ul><li><code>'socket'</code> 事件</li><li><code>'response'</code> 事件</li><li><code>res</code> 对象上任意次数的 <code>'data'</code> 事件（如果响应主体为空，则根本不会触发 <code>'data'</code> 事件，例如在大多数重定向中）</li><li><code>res</code> 对象上的 <code>'end'</code> 事件</li><li><code>'close'</code> 事件<br>如果出现连接错误，则触发以下事件：</li><li><code>'socket'</code> 事件</li><li><code>'error'</code> 事件</li><li><code>'close'</code> 事件<br>如果在连接成功之前调用 <code>req.abort()</code>，则按以下顺序触发以下事件：</li><li><code>'socket'</code> 事件</li><li>(在这里调用 <code>req.abort()</code>)</li><li><code>'abort'</code> 事件</li><li><code>'error'</code> 事件并带上错误信息 <code>'Error: socket hang up'</code> 和错误码 <code>'ECONNRESET'</code></li><li><code>'close'</code> 事件<br>如果在响应被接收之后调用 <code>req.abort()</code>，则按以下顺序触发以下事件：</li><li><code>'socket'</code> 事件</li><li><code>'response'</code> 事件</li><li><code>res</code> 对象上任意次数的 <code>'data'</code> 事件</li><li>(在这里调用 <code>req.abort()</code>)</li><li><code>'abort'</code> 事件</li><li><code>res</code> 对象上的 <code>'aborted'</code> 事件</li><li><code>'close'</code> 事件</li><li><code>res</code> 对象上的 <code>'end'</code> 事件</li><li><code>res</code> 对象上的 <code>'close'</code> 事件<br>注意，设置 <code>timeout</code> 选项或使用 <code>setTimeout()</code> 函数不会中止请求或执行除添加 <code>'timeout'</code> 事件之外的任何操作。</li></ul><ol start="3"><li>http.createServer([options][, requestlistener]) 创建服务</li></ol><ul><li><code>options</code> <object></object></li><li><code>IncomingMessage</code> <http.IncomingMessage> 指定要使用的 <code>IncomingMessage</code> 类。用于扩展原始的 <code>IncomingMessage</code>。<strong>默认值:</strong><code>IncomingMessage</code>。</li><li><code>ServerResponse</code> <http.ServerResponse > 指定要使用的 <code>ServerResponse</code> 类。用于扩展原始 <code>ServerResponse</code>。<strong>默认值:</strong> <code>ServerResponse</code>。</li><li><code>requestListener</code><function></function></li><li>返回: <http.Server><br>返回新建的 <a href="http://nodejs.cn/s/jLiRTh" target="_blank" rel="noopener"><code>http.Server</code></a> 实例。<br><code>requestListener</code> 是一个自动添加到 <a href="http://nodejs.cn/s/2qCn57" target="_blank" rel="noopener"><code>'request'</code></a> 事件的函数。<br>// server.listen 是开启监听<br>// 第一个参数是port<br>// 第二个参数可选 是回调<br>server.listen(port, () => {<br>console.log(<code>server is running on ${port}</code>);<br>});</li></ul><ol start="4"><li>阿萨<h3 id="fs（文件系统）"><a href="#fs（文件系统）" class="headerlink" title="fs（文件系统）"></a>fs（文件系统）</h3></li><li>fs.readFile(path[, options], callback) 读取文件</li></ol><ul><li><code>path</code>文件名或文件描述符。</li><li><code>options</code></li><li><code>encoding</code> <strong>默认值:</strong> <code>null</code>。</li><li><code>flag</code> 参阅<a href="http://nodejs.cn/s/JjbY8n" target="_blank" rel="noopener">支持的文件系统标志</a>。<strong>默认值:</strong> <code>'r'</code>。</li><li><code>callback</code></li><li><code>err</code></li><li><code>data</code><br>异步地读取文件的全部内容。<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(<span class="string">'/etc/passwd'</span>, (err, data) => {</span><br><span class="line"><span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></li></ul><p>回调会传入两个参数 <code>(err, data)</code>，其中 <code>data</code> 是文件的内容。<br>如果没有指定 <code>encoding</code>，则返回原始的 buffer。<br>如果 <code>options</code> 是字符串，则它指定字符编码：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(<span class="string">'/etc/passwd'</span>, <span class="string">'utf8'</span>, callback);</span><br></pre></td></tr></tbody></table></figure><p>当 <code>path</code> 是目录时， <code>fs.readFile()</code> 与 <a href="http://nodejs.cn/s/LxKo1q" target="_blank" rel="noopener"><code>fs.readFileSync()</code></a> 的行为是特定于平台的。 在 macOS、Linux 和 Windows 上，将返回错误。 在 FreeBSD 上，将返回目录内容的表示。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 macOS、Linux 和 Windows 上：</span></span><br><span class="line">fs.readFile(<span class="string">'<目录>'</span>, (err, data) => {</span><br><span class="line"><span class="comment">// => [Error: EISDIR: illegal operation on a directory, read <目录>]</span></span><br><span class="line">});</span><br><span class="line"><span class="comment">// 在 FreeBSD 上：</span></span><br><span class="line">fs.readFile(<span class="string">'<目录>'</span>, (err, data) => {</span><br><span class="line"><span class="comment">// => null, <data></span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p><code>fs.readFile()</code> 函数会缓冲整个文件。 为了最小化内存成本，尽可能通过 <code>fs.createReadStream()</code> 进行流式传输。</p><ol start="2"><li>fs.writeFile(file, data[, options], callback) 写入文件</li></ol><ul><li><code>file</code> <a href="http://nodejs.cn/s/9Tw2bK" target="_blank" rel="noopener"></a> | <a href="http://nodejs.cn/s/6x1hD3" target="_blank" rel="noopener"></a> | <a href="http://nodejs.cn/s/5dwq7G" target="_blank" rel="noopener"></a> | <a href="http://nodejs.cn/s/SXbo1v" target="_blank" rel="noopener"></a> 文件名或文件描述符。</li><li><code>data</code> <a href="http://nodejs.cn/s/9Tw2bK" target="_blank" rel="noopener"></a> | <a href="http://nodejs.cn/s/6x1hD3" target="_blank" rel="noopener"></a> | <a href="http://nodejs.cn/s/oh3CkV" target="_blank" rel="noopener"></a> | <a href="http://nodejs.cn/s/yCdVkD" target="_blank" rel="noopener"></a></li><li><code>options</code> <a href="http://nodejs.cn/s/jzn6Ao" target="_blank" rel="noopener"></a> | <a href="http://nodejs.cn/s/9Tw2bK" target="_blank" rel="noopener"></a></li><li><code>encoding</code> <a href="http://nodejs.cn/s/9Tw2bK" target="_blank" rel="noopener"></a> | <a href="http://nodejs.cn/s/334hvC" target="_blank" rel="noopener"></a> <strong>默认值:</strong> <code>'utf8'</code>。</li><li><code>mode</code> <a href="http://nodejs.cn/s/SXbo1v" target="_blank" rel="noopener"></a> <strong>默认值:</strong> <code>0o666</code>。</li><li><code>flag</code> <a href="http://nodejs.cn/s/9Tw2bK" target="_blank" rel="noopener"></a> 参阅<a href="http://nodejs.cn/s/JjbY8n" target="_blank" rel="noopener">支持的文件系统标志</a>。<strong>默认值:</strong> <code>'w'</code>。</li><li><code>callback</code> <a href="http://nodejs.cn/s/ceTQa6" target="_blank" rel="noopener"></a></li><li><code>err</code> <a href="http://nodejs.cn/s/qZ873x" target="_blank" rel="noopener"></a><br>异步地将数据写入到一个文件，如果文件已存在则覆盖该文件。 <code>data</code> 可以是字符串或 buffer。<br>如果 <code>data</code> 是一个 buffer，则 <code>encoding</code> 选项会被忽略。<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(Buffer.from(<span class="string">'Node.js中文网'</span>));</span><br><span class="line">fs.writeFile(<span class="string">'文件.txt'</span>, data, (err) => {</span><br><span class="line"><span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'文件已被保存'</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></li></ul><p>如果 <code>options</code> 是一个字符串，则它指定字符编码：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFile(<span class="string">'文件.txt'</span>, <span class="string">'Node.js中文网'</span>, <span class="string">'utf8'</span>, callback);</span><br></pre></td></tr></tbody></table></figure><p>在同一个文件上多次使用 <code>fs.writeFile()</code> 且不等待回调是不安全的。 对于这种情况，建议使用 <a href="http://nodejs.cn/s/VdSJQa" target="_blank" rel="noopener"><code>fs.createWriteStream()</code></a>。</p><h3 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h3><p><a href="http://nodejs.cn/api/fs/file_descriptors_2.html" target="_blank" rel="noopener">中英对照</a><a href="http://nodejs.cn/s/4CExjP" target="_blank" rel="noopener">提交修改</a></p><ol><li>任何指定的文件描述符都必须支持写入。</li><li>如果将文件描述符指定为 <code>file</code>，则不会自动关闭它。</li><li>写入将从文件的开头开始。例如，如果文件已经有内容 <code>'Hello World</code>‘ 并且新写入的内容是 <code>'Aloha'</code>，则该文件的内容将是 <code>'Aloha World'</code> 而不仅仅是 <code>'Aloha'</code>。</li><li>fs.rename(oldPath, newPath, callback)</li></ol><ul><li><code>oldPath</code></li><li><code>newPath</code></li><li><code>callback</code></li><li><code>err</code><br>异步地将 <code>oldPath</code> 上的文件重命名为 <code>newPath</code> 提供的路径名。 如果 <code>newPath</code> 已存在，则覆盖它。 除了可能的异常，完成回调没有其他参数。<br>也可参阅 <a href="http://nodejs.cn/s/YbqghQ" target="_blank" rel="noopener"><code>rename(2)</code></a>。<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.rename(<span class="string">'旧文件.txt'</span>, <span class="string">'新文件.txt'</span>, (err) => {</span><br><span class="line"><span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'重命名完成'</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></li></ul><ol start="4"><li>fs.readdir(path[, options], callback)</li></ol><ul><li><code>path</code></li><li><code>options</code></li><li><code>encoding</code><strong>默认值:</strong> <code>'utf8'</code>。</li><li><code>withFileTypes</code>) <strong>默认值:</strong> <code>false</code>。</li><li><code>callback</code></li><li><code>err</code></li><li><code>files</code><br>异步的 <a href="http://nodejs.cn/s/QvrbKw" target="_blank" rel="noopener"><code>readdir(3)</code></a>。 读取目录的内容。 回调有两个参数 <code>(err, files)</code>，其中 <code>files</code> 是目录中的文件名的数组（不包括 <code>'.'</code> 和 <code>'..'</code>）。<br>可选的 <code>options</code> 参数可以是指定编码的字符串，也可以是具有 <code>encoding</code> 属性的对象，该属性指定用于传给回调的文件名的字符编码。 如果 <code>encoding</code> 设置为 <code>'buffer'</code>，则返回的文件名是 <code>Buffer</code> 对象。<br>如果 <code>options.withFileTypes</code> 设置为 <code>true</code>，则 <code>files</code> 数组将包含 <a href="http://nodejs.cn/s/mNLVJ7" target="_blank" rel="noopener"><code>fs.Dirent</code></a> 对象。</li></ul><ol start="5"><li>fs.mkdir(path[, options], callback)</li></ol><ul><li><code>path</code></li><li><code>options</code></li><li><code>recursive</code> <strong>默认值:</strong> <code>false</code>。</li><li><code>mode</code> Windows 上不支持。<strong>默认值:</strong> <code>0o777</code>。</li><li><code>callback</code></li><li><code>err</code><br>异步地创建目录。 除了可能的异常，完成回调没有其他参数。<br>可选的 <code>options</code> 参数可以是指定模式（权限和粘滞位）的整数，也可以是具有 <code>mode</code> 属性和 <code>recursive</code> 属性（指示是否应创建父文件夹）的对象。<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 /tmp/a/apple 目录，无论是否存在 /tmp 和 /tmp/a 目录。</span></span><br><span class="line">fs.mkdir(<span class="string">'/tmp/a/apple'</span>, { <span class="attr">recursive</span>: <span class="literal">true</span> }, (err) => {</span><br><span class="line"><span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></li></ul><ol start="6"><li>fs.copyFile(src, dest[, flags], callback)</li></ol><ul><li><code>src</code>要拷贝的源文件名。</li><li><code>dest</code>拷贝操作的目标文件名。</li><li><code>flags</code>用于拷贝操作的修饰符。<strong>默认值:</strong> <code>0</code>。</li><li><code>callback</code><br>异步地将 <code>src</code> 拷贝到 <code>dest</code>。 默认情况下，如果 <code>dest</code> 已经存在，则覆盖它。 除了可能的异常，回调函数没有其他参数。 Node.js 不保证拷贝操作的原子性。 如果在打开目标文件用于写入后发生错误，则 Node.js 将尝试删除目标文件。<br><code>flags</code> 是一个可选的整数，指定拷贝操作的行为。 可以创建由两个或更多个值按位或组成的掩码（比如 <code>fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE</code>）。</li><li><code>fs.constants.COPYFILE_EXCL</code> - 如果 <code>dest</code> 已存在，则拷贝操作将失败。</li><li><code>fs.constants.COPYFILE_FICLONE</code> - 拷贝操作将尝试创建写时拷贝（copy-on-write）链接。如果平台不支持写时拷贝，则使用后备的拷贝机制。</li><li><code>fs.constants.COPYFILE_FICLONE_FORCE</code> - 拷贝操作将尝试创建写时拷贝链接。如果平台不支持写时拷贝，则拷贝操作将失败。<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 默认情况下将创建或覆盖目标文件。</span></span><br><span class="line">fs.copyFile(<span class="string">'源文件.txt'</span>, <span class="string">'目标文件.txt'</span>, (err) => {</span><br><span class="line"><span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'源文件已拷贝到目标文件'</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></li></ul><p>如果第三个参数是数字，则它指定 <code>flags</code>:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> { COPYFILE_EXCL } = fs.constants;</span><br><span class="line"><span class="comment">// 通过使用 COPYFILE_EXCL，如果目标文件存在，则操作将失败。</span></span><br><span class="line">fs.copyFile(<span class="string">'源文件.txt'</span>, <span class="string">'目标文件.txt'</span>, COPYFILE_EXCL, callback);</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Node-js-常用模块&quot;&gt;&lt;a href=&quot;#Node-js-常用模块&quot; class=&quot;headerlink&quot; title=&quot;Node.js 常用模块&quot;&gt;&lt;/a&gt;Node.js 常用模块&lt;/h2&gt;&lt;h3 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class
      
    
    </summary>
    
      <category term="前端" scheme="https://yhk15978.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="nodejs" scheme="https://yhk15978.github.io/categories/%E5%89%8D%E7%AB%AF/nodejs/"/>
    
    
      <category term="nodejs" scheme="https://yhk15978.github.io/tags/nodejs/"/>
    
      <category term="前端" scheme="https://yhk15978.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://yhk15978.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>http爬虫和模块化</title>
    <link href="https://yhk15978.github.io//posts/4a117b12/"/>
    <id>https://yhk15978.github.io//posts/4a117b12/</id>
    <published>2019-06-21T12:16:08.207Z</published>
    <updated>2019-06-21T12:25:07.437Z</updated>
    
    <content type="html"><![CDATA[<h2 id="http爬虫-和-模块化"><a href="#http爬虫-和-模块化" class="headerlink" title="http爬虫  和 模块化"></a>http爬虫  和 模块化</h2><ol><li><p>http爬虫</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">"https"</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = https.get(<span class="string">"https://www.17k.com/all"</span>, (res) => { <span class="comment">// res   response 响应( 回馈 )</span></span><br><span class="line"></span><br><span class="line">    res.setEncoding(<span class="string">'utf8'</span>); <span class="comment">// 得到结果的编码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> rawData = <span class="string">''</span>;</span><br><span class="line">    res.on(<span class="string">'data'</span>, (chunk) => {</span><br><span class="line"></span><br><span class="line">        rawData += chunk;</span><br><span class="line">    });</span><br><span class="line">    res.on(<span class="string">'end'</span>, () => {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//console.log(rawData) // html    string</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> $ = cheerio.load(rawData)</span><br><span class="line"></span><br><span class="line">            $(<span class="string">'.td3 a'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i, ele</span>) </span>{</span><br><span class="line">                <span class="built_in">console</span>.log($(<span class="keyword">this</span>).text())</span><br><span class="line">            })</span><br><span class="line"></span><br><span class="line">        } <span class="keyword">catch</span> (e) {</span><br><span class="line">            <span class="built_in">console</span>.error(e.message);</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}).on(<span class="string">'error'</span>, (e) => {</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">`Got error: <span class="subst">${e.message}</span>`</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">req.end()</span><br></pre></td></tr></tbody></table></figure></li><li><p>http web服务器渲染数据发送前台</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">"https"</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8000</span>;</span><br><span class="line"><span class="keyword">const</span> host = <span class="string">'localhost'</span>;</span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>{</span><br><span class="line">    response.writeHead(<span class="number">200</span>, {</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/html;charset=utf8'</span></span><br><span class="line">            <span class="comment">// 'Content-Type': 'text/html'</span></span><br><span class="line">    })</span><br><span class="line">    <span class="keyword">const</span> req = https.get(<span class="string">"https://www.17k.com/all"</span>, (res) => { <span class="comment">// res   response 响应( 回馈 )</span></span><br><span class="line"></span><br><span class="line">        res.setEncoding(<span class="string">'utf8'</span>); <span class="comment">// 得到结果的编码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> rawData = <span class="string">''</span>;</span><br><span class="line">        res.on(<span class="string">'data'</span>, (chunk) => {</span><br><span class="line"></span><br><span class="line">            rawData += chunk;</span><br><span class="line">        });</span><br><span class="line">        res.on(<span class="string">'end'</span>, () => {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="comment">//console.log(rawData) // html    string</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">const</span> $ = cheerio.load(rawData)</span><br><span class="line"></span><br><span class="line">                $(<span class="string">'.td3 a'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i, ele</span>) </span>{</span><br><span class="line">                    response.write(<span class="string">`<h4><span class="subst">${ $(<span class="keyword">this</span>).text() }</span></h4>`</span>)</span><br><span class="line">                })</span><br><span class="line">                response.end();</span><br><span class="line">            } <span class="keyword">catch</span> (e) {</span><br><span class="line">                <span class="built_in">console</span>.error(e.message);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }).on(<span class="string">'error'</span>, (e) => {</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">`Got error: <span class="subst">${e.message}</span>`</span>);</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    req.end()</span><br><span class="line">}).listen(port, host, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`http://<span class="subst">${host}</span>:<span class="subst">${port}</span>`</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li><li><p>中文乱码</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  服务器： </span></span><br><span class="line"><span class="comment">    可以运行在服务端一个网站（站点） </span></span><br><span class="line"><span class="comment">    种类：  </span></span><br><span class="line"><span class="comment">        1. web服务器（ 静态服务器 ） ，可以运行在浏览器中的服务器</span></span><br><span class="line"><span class="comment">        2. api服务器 （ 后端接口 ） 后端语言暴露一个数据接口，用于前端数据请求（ ajax  fetch ）</span></span><br><span class="line"><span class="comment">  Node.js中原生创建web服务器</span></span><br><span class="line"><span class="comment">    http模块</span></span><br><span class="line"><span class="comment">      createServer( callback ) 创建服务器</span></span><br><span class="line"><span class="comment">        callback中接收三个参数   request   response</span></span><br><span class="line"><span class="comment">      listen(port,host,callback) 监听服务器（ 反馈服务器状态 ）</span></span><br><span class="line"><span class="comment">        port  端口</span></span><br><span class="line"><span class="comment">        host  域名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Node.js中中文乱码</span></span><br><span class="line"><span class="comment">    1. 设置请求头</span></span><br><span class="line"><span class="comment">      response.writeHead( 200, {</span></span><br><span class="line"><span class="comment">        'Content-Type': 'text/html;charset=UTF8'  // 小写也可以  utf8</span></span><br><span class="line"><span class="comment">      })</span></span><br><span class="line"><span class="comment">    2. 发送一个meta标签</span></span><br><span class="line"><span class="comment">      response.write('<meta charset="UTF-8">')</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    3. toString()  在当前应用场景中还不行</span></span><br><span class="line"><span class="comment">      二进制有效</span></span><br><span class="line"><span class="comment">      将二进制  --- 》 string</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      名词： chunk  分片</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    我们刚才发送了一个html给前台，那么这种渲染数据的形式我们称之为： ‘后端渲染’，也称之为：‘服务端渲染’，英文叫法： ‘ssr’</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="2-前端模块化"><a href="#2-前端模块化" class="headerlink" title="2. 前端模块化"></a>2. 前端模块化</h2><p>   问题： 为什么前端要使用模块化？</p><pre><code>      模块化： 是具有特定功能的一个对象（ 广义理解 ）  模块定义的流程：        1.定义模块（对象）        2.导出模块         3.引用模块好处： </code></pre><ol><li><p>可以存储多个独立的功能块</p><ol start="2"><li>复用性高</li></ol></li><li><p>种类</p><ol><li>AMD（ require.js）</li><li>CMD ( sea.js )</li><li>Common.js</li></ol></li><li><p>AMD定义一个模块</p><p>define</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// AMD</span><br><span class="line">/*</span><br><span class="line">目录</span><br><span class="line">admDir</span><br><span class="line">a.js</span><br><span class="line">index.js</span><br><span class="line">*/</span><br><span class="line">// AMD定义  a.js</span><br><span class="line">    define ({</span><br><span class="line">        a: 1,</span><br><span class="line">        b: 2,</span><br><span class="line">        add: function(){}</span><br><span class="line">    })</span><br><span class="line">// AMD引用 index.js</span><br><span class="line">require([./a.js],function( moduleA ){</span><br><span class="line">        //moduleA指的就是定义来的对象</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li></ol><ol start="4"><li><p>CMD定义模块</p><p>define</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//CMD</span><br><span class="line">/*</span><br><span class="line">目录结构</span><br><span class="line">b.js</span><br><span class="line">index.js</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">// 模块定义  b.js</span><br><span class="line">define(function(require, exports, module) {</span><br><span class="line"></span><br><span class="line">    // 模块代码</span><br><span class="line"></span><br><span class="line">    });</span><br><span class="line">//模块引用 index.js</span><br><span class="line">require('./b.js',function( moduleB ){</span><br><span class="line">        //moduleB就是b模块中导出的内容</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li><li><p>Common.js</p><p><strong>Node.js使用了Common.js的规范</strong></p><p>易错的理解：</p><pre><code>common.js是属于node的   ×node属于common.js   ×</code></pre><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//common.js</span><br><span class="line">/*</span><br><span class="line">目录结构：</span><br><span class="line">name.js</span><br><span class="line">index.js</span><br><span class="line">*/</span><br><span class="line">//模块的定义 name.js</span><br><span class="line">const nameObj = {</span><br><span class="line">        name: 'Gabriel Yan '</span><br><span class="line">}</span><br><span class="line">//模块的导出  name.js</span><br><span class="line">module.exports = nameObj</span><br><span class="line">//模块的引用</span><br><span class="line">const nameObj = require('./name.js')</span><br></pre></td></tr></tbody></table></figure></li></ol><p>Node.js中Common.js规范的使用有三种类型：</p><ol><li><p>内置模块（ 内置模块指的是挂载在Node.js全局对象身上的api ）</p></li><li><p>自定义模块</p><ol><li><p>模块的定义</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//举例</span><br><span class="line">const student = {</span><br><span class="line">    id: 1,</span><br><span class="line">    name: 'Gabriel Yan'</span><br><span class="line">}</span><br><span class="line">const fn = function(){}</span><br></pre></td></tr></tbody></table></figure></li></ol></li></ol><ol start="2"><li><p>模块的导出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 第一种导出</span><br><span class="line">module.exports = student // 安全性不高  默认导出一个</span><br><span class="line">//第二种导出</span><br><span class="line">module.exports = { //批量导出，按需引用</span><br><span class="line">    student,fn</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><ol start="3"><li><p>模块的引用</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 这种引用对应第一种导出</span><br><span class="line">const student = require('./xxx.js')</span><br><span class="line">// 这种引用对应第二种导出</span><br><span class="line">const { student , fn } = require( './xxx.js ' )</span><br></pre></td></tr></tbody></table></figure><p><strong>注意：</strong></p><p><strong>在自定义模块引用时，require一定要写好路径</strong></p></li></ol><ol start="3"><li><p>第三方模块</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 别人已经封装好的模块</span><br><span class="line">2. 这个模块具备一些特定的功能</span><br><span class="line">3. 这些模块存放在  www.npmjs.com 这个网站中</span><br><span class="line">这些模块的文档也记录在内</span><br><span class="line"></span><br><span class="line">格式： var/let/const 变量名 = require( 模块名称 )</span><br><span class="line"></span><br><span class="line">  总结： </span><br><span class="line">      第一步，使用npm/cnpm 安装</span><br><span class="line">      第二部，在文件中引入</span><br><span class="line">      第三部，在www.npmjs.com这个网站中找到这个模块的文档，根据文档来使用</span><br></pre></td></tr></tbody></table></figure></li></ol><p>思考： 我们是不是能将自己封装的自定义模块变成第三方模块？</p><p>分析： </p><pre><code>第三方模块具备的特性：</code></pre><ol><li>有一定的功能<pre><code>2. 存储在: http://www.npmjs.com 中</code></pre></li></ol><p>解决： 自定义模块的上传（ <a href="http://www.npmjs.com" target="_blank" rel="noopener">http://www.npmjs.com</a> ）</p><ol><li><p>创建package.json文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init -y</span><br></pre></td></tr></tbody></table></figure></li><li><p>在<a href="http://www.npmjs.com" target="_blank" rel="noopener">http://www.npmjs.com</a> 这个网站注册一个账号</p><p>注意：第一次登陆会发送一个邮件给你的邮箱（ 这个发送是手动的  ），然后大家登陆邮箱激活</p></li><li><p>检查你的电脑的源是不是npm源</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nrm ls</span><br></pre></td></tr></tbody></table></figure><p>如果是，就不会理会</p><p>如果不是，那么切换到npm源</p></li><li><p>命令行登录npmjs仓库</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm adduser</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建模块并导出模块</p></li><li><p>查看你的包名称是否已经被使用</p></li><li><p>发布包</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm publish</span><br></pre></td></tr></tbody></table></figure></li></ol><p><strong>犯错点：</strong> </p><ol><li>邮箱没有激活 （ 最多的 ）</li><li>npm源没有切换</li><li>整个电脑的npm就不能使用</li></ol><p>-D  === –save-dev</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//举例</span><br><span class="line"></span><br><span class="line">cnpm  i  jquery -D  === cnpm i jquery --save-dev  // 开发环境下使用</span><br><span class="line">cnpm i jquery -S ===  cnpm i jquery --save // 生产环境下使用</span><br></pre></td></tr></tbody></table></figure><p>​    </p><p>Node.js跨域</p><p>跨域； </p><pre><code>前端跨域    jsonp    反向代理（ 创建一个虚拟后端服务器，让这个后端服务器帮助我们请求数据）后端跨域    node  php  java</code></pre><ol><li><p>设置请求头</p></li><li><p>使用第三方的中间件（ cors ）</p><p>中间件： 就是具有一定功能的一个函数</p></li></ol><h2 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h2><h3 id="1-amd"><a href="#1-amd" class="headerlink" title="1. amd"></a>1. amd</h3><ul><li><p>AMD规范采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。这里介绍用require.js实现AMD规范的模块化：用<code>require.config()</code>指定引用路径等，用<code>define()</code>定义模块，用<code>require()</code>加载模块。</p><p>首先我们需要引入require.js文件和一个入口文件main.js。main.js中配置<code>require.config()</code>并规定项目中用到的基础模块。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/** 网页中引入require.js及main.js **/</span><br><span class="line"><script src="js/require.js" data-main="js/main"></script></span><br><span class="line"></span><br><span class="line">/** main.js 入口文件/主模块 **/</span><br><span class="line">// 首先用config()指定各模块路径和引用名</span><br><span class="line">require.config({</span><br><span class="line">  baseUrl: "js/lib",</span><br><span class="line">  paths: {</span><br><span class="line">    "jquery": "jquery.min",  //实际路径为js/lib/jquery.min.js</span><br><span class="line">    "underscore": "underscore.min",</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line">// 执行基本操作</span><br><span class="line">require(["jquery","underscore"],function($,_){</span><br><span class="line">  // some code here</span><br><span class="line">});</span><br><span class="line">复制代码</span><br></pre></td></tr></tbody></table></figure><p>引用模块的时候，我们将模块名放在<code>[]</code>中作为<code>reqiure()</code>的第一参数；如果我们定义的模块本身也依赖其他模块,那就需要将它们放在<code>[]</code>中作为<code>define()</code>的第一参数。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 定义math.js模块</span><br><span class="line">define(function () {</span><br><span class="line">    var basicNum = 0;</span><br><span class="line">    var add = function (x, y) {</span><br><span class="line">        return x + y;</span><br><span class="line">    };</span><br><span class="line">    return {</span><br><span class="line">        add: add,</span><br><span class="line">        basicNum :basicNum</span><br><span class="line">    };</span><br><span class="line">});</span><br><span class="line">// 定义一个依赖underscore.js的模块</span><br><span class="line">define(['underscore'],function(_){</span><br><span class="line">  var classify = function(list){</span><br><span class="line">    _.countBy(list,function(num){</span><br><span class="line">      return num > 30 ? 'old' : 'young';</span><br><span class="line">    })</span><br><span class="line">  };</span><br><span class="line">  return {</span><br><span class="line">    classify :classify</span><br><span class="line">  };</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">// 引用模块，将模块放在[]内</span><br><span class="line">require(['jquery', 'math'],function($, math){</span><br><span class="line">  var sum = math.add(10,20);</span><br><span class="line">  $("#sum").html(sum);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></li></ul><p>​        </p><h3 id="2-cmd"><a href="#2-cmd" class="headerlink" title="2. cmd"></a>2. cmd</h3><pre><code>- require.js在申明依赖的模块时会在第一之间加载并执行模块内的代码：  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">define(["a", "b", "c", "d", "e", "f"], function(a, b, c, d, e, f) { </span><br><span class="line">    // 等于在最前面声明并初始化了要用到的所有模块</span><br><span class="line">    if (false) {</span><br><span class="line">      // 即便没用到某个模块 b，但 b 还是提前执行了</span><br><span class="line">      b.foo()</span><br><span class="line">    } </span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>  CMD是另一种js模块化方案，它与AMD很类似，不同点在于：AMD 推崇依赖前置、提前执行，CMD推崇依赖就近、延迟执行。此规范其实是在sea.js推广过程中产生的。  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/** AMD写法 **/</span><br><span class="line">define(["a", "b", "c", "d", "e", "f"], function(a, b, c, d, e, f) { </span><br><span class="line">     // 等于在最前面声明并初始化了要用到的所有模块</span><br><span class="line">    a.doSomething();</span><br><span class="line">    if (false) {</span><br><span class="line">        // 即便没用到某个模块 b，但 b 还是提前执行了</span><br><span class="line">        b.doSomething()</span><br><span class="line">    } </span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">/** CMD写法 **/</span><br><span class="line">define(function(require, exports, module) {</span><br><span class="line">    var a = require('./a'); //在需要时申明</span><br><span class="line">    a.doSomething();</span><br><span class="line">    if (false) {</span><br><span class="line">        var b = require('./b');</span><br><span class="line">        b.doSomething();</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">/** sea.js **/</span><br><span class="line">// 定义模块 math.js</span><br><span class="line">define(function(require, exports, module) {</span><br><span class="line">    var $ = require('jquery.js');</span><br><span class="line">    var add = function(a,b){</span><br><span class="line">        return a+b;</span><br><span class="line">    }</span><br><span class="line">    exports.add = add;</span><br><span class="line">});</span><br><span class="line">// 加载模块</span><br><span class="line">seajs.use(['math.js'], function(math){</span><br><span class="line">    var sum = math.add(1+2);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></code></pre><h3 id="3-ES6-Module"><a href="#3-ES6-Module" class="headerlink" title="3.ES6 Module"></a>3.ES6 Module</h3><pre><code>-     ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，旨在成为浏览器和服务器通用的模块解决方案。其模块功能主要由两个命令构成：`export`和`import`。`export`命令用于规定模块的对外接口，`import`命令用于输入其他模块提供的功能。  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/** 定义模块 math.js **/</span><br><span class="line">var basicNum = 0;</span><br><span class="line">var add = function (a, b) {</span><br><span class="line">    return a + b;</span><br><span class="line">};</span><br><span class="line">export { basicNum, add };</span><br><span class="line"></span><br><span class="line">/** 引用模块 **/</span><br><span class="line">import { basicNum, add } from './math';</span><br><span class="line">function test(ele) {</span><br><span class="line">    ele.textContent = add(99 + basicNum);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></code></pre><p>​           ​       </p><p>   如上例所示，使用<code>import</code>命令的时候，用户需要知道所要加载的变量名或函数名。其实ES6还提供了<code>export default</code>命令，为模块指定默认输出，对应的<code>import</code>语句不需要使用大括号。这也更趋近于ADM的引用写法。</p><pre><code><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/** export default **/</span><br><span class="line">//定义输出</span><br><span class="line">export default { basicNum, add };</span><br><span class="line">//引入</span><br><span class="line">import math from './math';</span><br><span class="line">function test(ele) {</span><br><span class="line">    ele.textContent = math.add(99 + math.basicNum);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></code></pre><p>   ES6的模块不是对象，<code>import</code>命令会被 JavaScript 引擎静态分析，在编译时就引入模块代码，而不是在代码运行时加载，所以无法实现条件加载。也正因为这个，使得静态分析成为可能。</p><h3 id="4-ES6-模块与-CommonJS-模块的差异"><a href="#4-ES6-模块与-CommonJS-模块的差异" class="headerlink" title="4.ES6 模块与 CommonJS 模块的差异"></a>4.ES6 模块与 CommonJS 模块的差异</h3><ul><li><ol><li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</li></ol><ul><li>CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。</li><li>ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令<code>import</code>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的<code>import</code>有点像 Unix 系统的“符号连接”，原始值变了，<code>import</code>加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</li></ul><ol start="2"><li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</li></ol><ul><li>运行时加载: CommonJS 模块就是对象；即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”。</li><li>编译时加载: ES6 模块不是对象，而是通过 <code>export</code> 命令显式指定输出的代码，<code>import</code>时采用静态命令的形式。即在<code>import</code>时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。</li></ul><p>CommonJS 加载的是一个对象（即<code>module.exports</code>属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;http爬虫-和-模块化&quot;&gt;&lt;a href=&quot;#http爬虫-和-模块化&quot; class=&quot;headerlink&quot; title=&quot;http爬虫  和 模块化&quot;&gt;&lt;/a&gt;http爬虫  和 模块化&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;http爬虫&lt;/p&gt;
&lt;figure 
      
    
    </summary>
    
      <category term="nodejs" scheme="https://yhk15978.github.io/categories/nodejs/"/>
    
      <category term="前端模块化" scheme="https://yhk15978.github.io/categories/nodejs/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
    
      <category term="nodejs" scheme="https://yhk15978.github.io/tags/nodejs/"/>
    
      <category term="前端" scheme="https://yhk15978.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://yhk15978.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="https://yhk15978.github.io//posts/0/"/>
    <id>https://yhk15978.github.io//posts/0/</id>
    <published>2019-06-21T12:10:16.785Z</published>
    <updated>2019-06-21T12:13:47.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">show dbs      查看数据库</span><br><span class="line">use dbname    创建数据库 如果不存在创建数据库，否则切换到数据库</span><br><span class="line">show collections 显示数据库集合</span><br><span class="line"></span><br><span class="line">1.添加数据</span><br><span class="line"></span><br><span class="line">db.web.save({"name": "meiejuna"})  创建了名称为 web 的名称，名</span><br><span class="line">db.web.insert({"name": "meijuna"})  </span><br><span class="line">插入相同的数据，sava 覆盖，insert 报错</span><br><span class="line"></span><br><span class="line">2.删除数据</span><br><span class="line">      </span><br><span class="line">   db.students.remove( {} )      删除 students 集合下的所有数据</span><br><span class="line">   db.students.remove({"name": "meijuna" }) 删除 students 集合为 name 为 meijuna 的数据</span><br><span class="line">   db.students.drop() or db.runCommand({""})删除 students 集合</span><br><span class="line">   db.runCommand( { dropDaatabase: 1 } )    删除当前数据库</span><br><span class="line">   </span><br><span class="line">3.修改数据</span><br><span class="line"></span><br><span class="line">db.students.updata({"name": "meijuna"},set:{"sex":"women"})                单行修改</span><br><span class="line">db.students.updata({"name": "meijuna"},{$set:{"sex":"women"}}, true, true) 多行修改</span><br><span class="line">     //{查找条件} , { 修改内容 }      匹配所有条件数据 修改所有匹配项</span><br><span class="line"></span><br><span class="line">4.查找数据</span><br><span class="line">  db.students.find()          查找 students 集合中的 所有    数据</span><br><span class="line">  db.students.findONe()       查找 students 集合中的 第一条  数据</span><br><span class="line">  db.students.find().pretty() 可视化查询 </span><br><span class="line">  </span><br><span class="line">5.排序 </span><br><span class="line">db.students.find().sort({"age": 1}) 1 升 -1 降序</span><br><span class="line"></span><br><span class="line">6.截取</span><br><span class="line">db.students.find().skip(2)  下标为 2 开始截取</span><br><span class="line">db.students.find().limit(2)   截取 2 条数据</span><br><span class="line"></span><br><span class="line">7.筛选显示</span><br><span class="line">db.students.find({age:20},{_id:0,age:1,name:1})</span><br><span class="line">        0,筛选的结果不显示，1筛选结果显示</span><br></pre></td></tr></tbody></table></figure><h2 id="SQL简介"><a href="#SQL简介" class="headerlink" title="SQL简介"></a>SQL简介</h2><ul><li>关系型数据库 以行和列的形式存储数据，以便于用户理解。这一系列的行和列被称为表，一组表组成了数据库。表与表之间的数据记录有关系。</li><li><strong>关系型</strong>数据库有：<strong>mySql</strong> <strong>oracle</strong>   <strong>SqlServer</strong>  <strong>Access</strong>  *<em>db2 *</em> 等</li></ul><h2 id="NoSQL简介"><a href="#NoSQL简介" class="headerlink" title="NoSQL简介"></a>NoSQL简介</h2><ul><li>NoSQL，指的是非关系型的数据库。NoSQL有时也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称。</li><li>NoSQL用于超大规模数据的存储。（例如谷歌或Facebook每天为他们的用户收集万亿比特的数据）。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</li><li><strong>非关系型</strong>数据库: <strong>MongoDB</strong>，<strong>Redis</strong>，<strong>HBase</strong>，*<em>CouchDB *</em> 等</li></ul><h2 id="非关系型数据库与关系型数据库区别"><a href="#非关系型数据库与关系型数据库区别" class="headerlink" title="非关系型数据库与关系型数据库区别"></a>非关系型数据库与关系型数据库区别</h2><h3 id="关系型数据库的优势："><a href="#关系型数据库的优势：" class="headerlink" title="关系型数据库的优势："></a>关系型数据库的优势：</h3><h4 id="1-复杂查询"><a href="#1-复杂查询" class="headerlink" title="1. 复杂查询"></a>1. 复杂查询</h4><ul><li>可以用SQL语句方便的在多个表之间做非常复杂的数据查询。 </li></ul><h4 id="2-事务支持"><a href="#2-事务支持" class="headerlink" title="2. 事务支持"></a>2. 事务支持</h4><ul><li>使得对于安全性能很高的数据访问要求得以实现。</li></ul><h3 id="非关系型数据库的优势："><a href="#非关系型数据库的优势：" class="headerlink" title="非关系型数据库的优势："></a>非关系型数据库的优势：</h3><h4 id="1-性能"><a href="#1-性能" class="headerlink" title="1. 性能"></a>1. 性能</h4><ul><li>NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。</li></ul><h4 id="2-可扩展性"><a href="#2-可扩展性" class="headerlink" title="2. 可扩展性"></a>2. 可扩展性</h4><ul><li>同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。</li></ul><h2 id="MongoDB优点"><a href="#MongoDB优点" class="headerlink" title="MongoDB优点"></a>MongoDB优点</h2><p>它的特点是高性能、易部署、易使用，存储数据非常方便。</p><p>主要功能特性有：</p><ul><li>面向集合存储，易存储对象类型的数据。</li><li>模式自由。</li><li>支持动态查询。</li><li>支持完全索引，包含内部对象。</li><li>支持查询。</li><li>支持复制和故障恢复。</li><li>使用高效的二进制数据存储，包括大型对象（如视频等）。</li><li>自动处理碎片，以支持云计算层次的扩展性</li><li>支持RUBY，PYTHON，JAVA，C++，PHP等多种语言。</li><li>文件存储格式为BSON（一种JSON的扩展）</li></ul><p>#### </p><h2 id="BSON-存储格式"><a href="#BSON-存储格式" class="headerlink" title="BSON 存储格式"></a>BSON 存储格式</h2><p>BSON是一种类似<a href="http://baike.baidu.com/view/136475.htm" target="_blank" rel="noopener">json</a>的二进制形式的存储格式，简称Binary JSON，它和JSON一样，支持内嵌的<strong>文档对象</strong>和<strong>数组对象</strong>，但是<strong>BSON</strong>有JSON没有的一些数据类型，**如Date和BinData类型。</p><p>BSON有三个特点：<strong>轻量性</strong>、<strong>可遍历性</strong>、<strong>高效性</strong>。 </p><p>非关系型数据库文件存储格式为 <strong>BSON</strong>（一种JSON的扩展）。</p><h2 id="MongoDB下载与安装"><a href="#MongoDB下载与安装" class="headerlink" title="MongoDB下载与安装"></a>MongoDB下载与安装</h2><h3 id="1-MongoDB下载："><a href="#1-MongoDB下载：" class="headerlink" title="1. MongoDB下载："></a>1. MongoDB下载：</h3><p><a href="https://www.mongodb.com/download-center#community" target="_blank" rel="noopener">https://www.mongodb.com/download-center#community</a></p><h3 id="2-设置环境变量"><a href="#2-设置环境变量" class="headerlink" title="2. 设置环境变量"></a>2. 设置环境变量</h3><p>在环境变量窗口中一般有两个变量，一个是你当前所使用的用户独有的环境变量，另一个是所有用户都可以访问的系统变量。其实如果在你的电脑上你只使用一个用户的话，那么不管你修改的用户的环境变量还是系统变量，效果都是一样的。为了以防未来会新建其他用户，那么我建议你修改系统变量而不是某个用户独有的环境变量。</p><h3 id="3-测试连接"><a href="#3-测试连接" class="headerlink" title="3. 测试连接"></a>3. 测试连接</h3><ul><li>管理员身份运行 cmd 输入 <code>mongo</code></li><li>启动 mongdb 服务 <code>net start mongdb</code></li><li>关闭 mongdb 服务 <code>net stop MongoDB</code></li></ul><h3 id="4-安装可视化工具-Robo-3T"><a href="#4-安装可视化工具-Robo-3T" class="headerlink" title="4. 安装可视化工具(Robo 3T)"></a>4. 安装可视化工具(Robo 3T)</h3><p><a href="https://robomongo.org/download" target="_blank" rel="noopener">https://robomongo.org/download</a></p><p>node 使用 MongoDB</p><p>连接 MongoDB</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 下载 mongoose </span></span><br><span class="line">cnpm i mongoose -D </span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 引入 mongoose </span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>( <span class="string">'mongoose'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 连接 mongoose </span></span><br><span class="line"><span class="comment">// 连接本地mongodb ，本机的ip 127.0.0.1，端口：27017 数据库：student</span></span><br><span class="line">mongoose.connect(<span class="string">"mongodb://127.0.0.1:27017/student"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>{</span><br><span class="line">   <span class="keyword">if</span>(!err){ </span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"connected to Mongodb"</span>); <span class="comment">//连接成功</span></span><br><span class="line">   }<span class="keyword">else</span>{</span><br><span class="line">     <span class="keyword">throw</span> err;<span class="comment">//如果连接失败，则抛出异常</span></span><br><span class="line">   }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>存储数据</p><p>Schema不仅<strong>定义了文档结构和使用性能</strong>，还可以有扩展插件、实例方法、静态方法、复合索引、文档生命周期钩子。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Schema  ：   一种以文件形式存储的数据库模型骨架，不具备数据库的操作能力</span><br><span class="line"></span><br><span class="line">Model   ：   由Schema发布生成的模型，具有抽象属性和行为的数据库操作对</span><br><span class="line"></span><br><span class="line">Entity  ：   由Model创建的实体，他的操作也会影响数据库</span><br></pre></td></tr></tbody></table></figure><p>存储数据步骤：定义Schema (骨架) > 创建model（模型）>  Entity实例化方法。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>( <span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line">mongoose.connect( <span class="string">'mongodb://127.0.0.1:27017/meijuna'</span>,(error) => {</span><br><span class="line">  <span class="keyword">if</span> ( error ) {</span><br><span class="line">    <span class="keyword">throw</span> error</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'database is connected~'</span>)</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> Schema({  <span class="comment">//定义数据模型</span></span><br><span class="line">  username: <span class="built_in">String</span>,</span><br><span class="line">  password: <span class="built_in">String</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过模式studentSchema  创建一个模型studentModel </span></span><br><span class="line"><span class="keyword">var</span> studentModel = mongoose.model(<span class="string">"students"</span>,studentSchema );</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> studentModel (); </span><br><span class="line">instance1.name=<span class="string">"tangyan"</span>;</span><br><span class="line">instance1.age=<span class="string">"18"</span>;</span><br><span class="line"></span><br><span class="line">instance1.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>{   <span class="comment">//通过save方法保存</span></span><br><span class="line">    <span class="keyword">if</span> (err) {</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'保存失败'</span>);  </span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"> });</span><br></pre></td></tr></tbody></table></figure><p>查询数据</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 查</span><br><span class="line">userModel.find({}, ( error, result ) => {</span><br><span class="line"> if ( error ) throw error </span><br><span class="line">console.log ( result )</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>修改数据</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">userModel.find({ <span class="attr">username</span>: <span class="string">'aaa'</span>}, ( error, result) =>{</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> _id = result[<span class="number">0</span>]._id</span><br><span class="line"></span><br><span class="line">  userModel.findById(_id, ( error, doc ) => {    <span class="comment">// 修改</span></span><br><span class="line">    <span class="keyword">if</span> (error ) <span class="keyword">throw</span> error</span><br><span class="line">    <span class="built_in">console</span>.log( doc );</span><br><span class="line">    doc.username = <span class="string">"meijuna"</span>;</span><br><span class="line">    doc.save ( <span class="function">(<span class="params">error</span>) =></span> {</span><br><span class="line">      <span class="keyword">throw</span> error</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"数据修改成功"</span>)</span><br><span class="line">    })</span><br><span class="line">  })</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>删除数据</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">userModel.find({ <span class="attr">username</span>: <span class="string">'aaa'</span>}, ( error, result) =>{</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error</span><br><span class="line">  <span class="keyword">const</span> _id = result[<span class="number">0</span>]._id</span><br><span class="line"></span><br><span class="line">  userModel.findById(_id, ( error, doc ) => {    <span class="comment">// 删除</span></span><br><span class="line">    <span class="keyword">if</span> (error ) <span class="keyword">throw</span> error</span><br><span class="line"></span><br><span class="line">    doc.remove( <span class="function">(<span class="params">error</span>) =></span> {</span><br><span class="line">        <span class="keyword">if</span> (error) <span class="keyword">throw</span> error</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'数据删除成功！'</span>)</span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">  })</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>注册</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://127.0.0.1:27017/meijuna'</span>, (error) => {</span><br><span class="line">  <span class="keyword">if</span> (error) {</span><br><span class="line">    <span class="keyword">throw</span> error</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'database is connected !!!'</span>)</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> Schema({ <span class="comment">//定义数据模型</span></span><br><span class="line">  username: <span class="built_in">String</span>,</span><br><span class="line">  password: <span class="built_in">String</span></span><br><span class="line">})</span><br><span class="line"><span class="keyword">const</span> userModel = mongoose.model(<span class="string">'users'</span>, userSchema) <span class="comment">//模型创建</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> userModel(); <span class="comment">//创建实体</span></span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, (req, res, next) => {</span><br><span class="line">  <span class="keyword">const</span> { username,  password } = req.query;</span><br><span class="line">  <span class="built_in">console</span>.log(username,password);</span><br><span class="line">   userModel.find({}, (error, result) => {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> flag = result.some(<span class="function">(<span class="params">item</span>) =></span> {</span><br><span class="line">      <span class="keyword">return</span> item.username === username</span><br><span class="line">    })</span><br><span class="line">    <span class="keyword">if</span> (flag) { <span class="comment">//用户名存在</span></span><br><span class="line">      res.render(<span class="string">'register'</span>, {</span><br><span class="line">        data: <span class="built_in">JSON</span>.stringify({</span><br><span class="line">          ret: <span class="literal">true</span>, <span class="comment">//身份验证 权限验证</span></span><br><span class="line">          status: <span class="number">2</span> <span class="comment">//0 表示失败 1：成功  2：</span></span><br><span class="line">        })</span><br><span class="line">      })</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      user.username = username;</span><br><span class="line">      user.password = password;</span><br><span class="line">      user.save();</span><br><span class="line"></span><br><span class="line">      res.render(<span class="string">'register'</span>, {</span><br><span class="line">        data: <span class="built_in">JSON</span>.stringify({</span><br><span class="line">          ret : <span class="literal">true</span>,</span><br><span class="line">          status: <span class="number">1</span></span><br><span class="line">        })</span><br><span class="line">      })</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MongoDB&quot;&gt;&lt;a href=&quot;#MongoDB&quot; class=&quot;headerlink&quot; title=&quot;MongoDB&quot;&gt;&lt;/a&gt;MongoDB&lt;/h1&gt;&lt;p&gt;MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩
      
    
    </summary>
    
      <category term="数据库" scheme="https://yhk15978.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="https://yhk15978.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>express Node 核心框架</title>
    <link href="https://yhk15978.github.io//posts/4a17b112/"/>
    <id>https://yhk15978.github.io//posts/4a17b112/</id>
    <published>2019-06-21T12:02:11.085Z</published>
    <updated>2019-06-21T12:08:01.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="express-Node-核心框架"><a href="#express-Node-核心框架" class="headerlink" title="express Node 核心框架"></a>express Node 核心框架</h1><p>express是一个功能极简, 完全是由路由和中间件构成的一个web开发框架,是非侵入式的框架</p><h2 id="1-为什么要使用-express"><a href="#1-为什么要使用-express" class="headerlink" title="1. 为什么要使用 express ?"></a>1. 为什么要使用 express ?</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- express 是 Node 的核心框架</span><br><span class="line"></span><br><span class="line">- express 可以帮助我们快速构建 web 服务器 / api 服务器</span><br><span class="line"></span><br><span class="line">- express 提供了一个快速生成工具 express-generator</span><br><span class="line"></span><br><span class="line">   - 快速生成工具： 帮助我们快速创建一个项目的工具</span><br></pre></td></tr></tbody></table></figure><h2 id="2-安装方式"><a href="#2-安装方式" class="headerlink" title="2. 安装方式"></a>2. 安装方式</h2><h3 id="1-全局安装"><a href="#1-全局安装" class="headerlink" title="1. 全局安装"></a>1. 全局安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm i express-generator -g  </span><br><span class="line">or </span><br><span class="line"><span class="meta">$</span> yarn add express-generator -g</span><br></pre></td></tr></tbody></table></figure><h3 id="2-npx-安装"><a href="#2-npx-安装" class="headerlink" title="2. npx 安装"></a>2. npx 安装</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(如果npm版本在 5.2+，那可以不用全局，用npx)</span><br><span class="line"></span><br><span class="line">$ npx express -e express_demo</span><br><span class="line"></span><br><span class="line">-e : 指的是我们使用一个叫 ejs 的模板（ejs.js 可以兼容html标签, 可以在标签中写 js ）</span><br></pre></td></tr></tbody></table></figure><h2 id="3-项目目录"><a href="#3-项目目录" class="headerlink" title="3. 项目目录"></a>3. 项目目录</h2><ul><li>bin <ul><li>www 启动了一个静态服务器 （ web服务器 ）</li></ul></li><li>node_modules 这个项目的依赖包</li><li>public 静态资源文件 ( html，css，images)</li><li>routes 路由文件夹</li><li>view<ul><li>xxx.ejs （ 项目模板 )</li></ul></li><li>app.js  ( 这个项目的入口文件 )</li></ul><h2 id="4-app-js-文件代码解读"><a href="#4-app-js-文件代码解读" class="headerlink" title="4. app.js 文件代码解读"></a>4. app.js 文件代码解读</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- app对象的功能</span><br><span class="line">  1.  通过app.use来使用具有特定功能的函数 ( 又叫中间件 )</span><br><span class="line">- 中间件分类</span><br><span class="line">  1.  应用中间件 （ cors )</span><br><span class="line">  2.  路由中间件 app.get( '/' , (req, res, next ) => { } ) </span><br><span class="line">  3.  错误处理中间件 function( err, req, res, next ) { }</span><br></pre></td></tr></tbody></table></figure><h2 id="5-express-创建-api-服务器-（-创建接口-）"><a href="#5-express-创建-api-服务器-（-创建接口-）" class="headerlink" title="5. express 创建 api 服务器 （ 创建接口 ）"></a>5. express 创建 api 服务器 （ 创建接口 ）</h2><ul><li>api  服务器是给前端提供接口数据</li><li>api 服务器需要使用的给测试工具来测试，不能用浏览器展示</li><li>注意： 后端个前端发送的数据类型是 JSON 字符串，前端需要 JSON.parse() 转换成对象</li></ul><h2 id="6-restful-api-规则"><a href="#6-restful-api-规则" class="headerlink" title="6. restful api 规则"></a>6. restful api 规则</h2><pre><code>restful aip 规则 是一个暴露接口的规则 ，实现是一个接口使用不同的数据请求方式来实现不同的功能</code></pre><p>总结：</p><ol><li>使用restful api 来暴露接口（ 多个数据请求的接口 ）</li><li>cors中间件的跨域</li><li>前端发来的数据， 后端如何接受</li></ol><ul><li>get req.query</li><li>post req.body</li></ul><h2 id="7-数据请求格式"><a href="#7-数据请求格式" class="headerlink" title="7. 数据请求格式"></a>7. 数据请求格式</h2><h3 id="1-get"><a href="#1-get" class="headerlink" title="1. get"></a>1. get</h3><ul><li>发送数据时，携带的参数时，形式是 Query string Parameters</li><li>后端 req.query 获取前端传来的数据</li></ul><h3 id="2-post"><a href="#2-post" class="headerlink" title="2. post"></a>2. post</h3><ul><li>发送数据时，携带的参数时，形式是 Form Data</li><li>前端 req.body 获取前端传来的数据</li></ul><h2 id="8-ecj-模板"><a href="#8-ecj-模板" class="headerlink" title="8. ecj 模板"></a>8. ecj 模板</h2><p><a href="https://ejs.bootcss.com/" target="_blank" rel="noopener">ecj 官网</a></p><p>EJS 是一套简单的模板语言，帮你利用 JavaScript 代码生成 HTML 页面。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ejs模板语法:</span><br><span class="line"></span><br><span class="line">    <% jsCode %>执行正常js代码</span><br><span class="line">    <% =data %>转移输出</span><br><span class="line">    <% -"data" %>非转义输出</span><br></pre></td></tr></tbody></table></figure><h2 id="后端接口文档-模板来写"><a href="#后端接口文档-模板来写" class="headerlink" title="后端接口文档 ( 模板来写 )"></a>后端接口文档 ( 模板来写 )</h2><p><a href="https://www.showdoc.cc/" target="_blank" rel="noopener">https://www.showdoc.cc/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;express-Node-核心框架&quot;&gt;&lt;a href=&quot;#express-Node-核心框架&quot; class=&quot;headerlink&quot; title=&quot;express Node 核心框架&quot;&gt;&lt;/a&gt;express Node 核心框架&lt;/h1&gt;&lt;p&gt;express是一个
      
    
    </summary>
    
      <category term="前端" scheme="https://yhk15978.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="nodejs" scheme="https://yhk15978.github.io/tags/nodejs/"/>
    
      <category term="前端" scheme="https://yhk15978.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端异步流程</title>
    <link href="https://yhk15978.github.io//posts/4a17b158/"/>
    <id>https://yhk15978.github.io//posts/4a17b158/</id>
    <published>2019-06-21T11:20:20.187Z</published>
    <updated>2019-06-21T12:04:04.266Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端异步流程"><a href="#前端异步流程" class="headerlink" title="前端异步流程"></a>前端异步流程</h2><h3 id="1-传统的原生异步"><a href="#1-传统的原生异步" class="headerlink" title="1. 传统的原生异步"></a>1. 传统的原生异步</h3><pre><code>- 回调函数- 事件</code></pre><h3 id="2-使用异步流程工具（-别人封装好的东西-）"><a href="#2-使用异步流程工具（-别人封装好的东西-）" class="headerlink" title="2. 使用异步流程工具（ 别人封装好的东西 ）"></a>2. 使用异步流程工具（ 别人封装好的东西 ）</h3><h4 id="es6-Promise"><a href="#es6-Promise" class="headerlink" title="- es6 Promise"></a>- es6 Promise</h4>   <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Promise 是异步编程的一种解决方案，比传统的解决方案–回调函数和事件－－更合理和更强大。它由社区最早提出和实现，ES6将其写进了语言标准，统一了语法，原生提供了Promise</span></span><br><span class="line"><span class="comment"> 所谓Promise ，简单说就是一个容器，里面保存着某个未来才回结束的事件(通常是一个异步操作）的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。</span></span><br><span class="line"><span class="comment"> Promise 对象的状态不受外界影响</span></span><br><span class="line"><span class="comment"> 三种状态:</span></span><br><span class="line"><span class="comment"> pending：进行中</span></span><br><span class="line"><span class="comment"> fulfilled :已经成功</span></span><br><span class="line"><span class="comment"> rejected 已经失败</span></span><br><span class="line"><span class="comment"> 状态改变：</span></span><br><span class="line"><span class="comment"> Promise对象的状态改变，只有两种可能：</span></span><br><span class="line"><span class="comment"> 从pending变为fulfilled</span></span><br><span class="line"><span class="comment"> 从pending变为rejected。</span></span><br><span class="line"><span class="comment"> 这两种情况只要发生，状态就凝固了，不会再变了，这时就称为resolved（已定型）*/</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =></span> {</span><br><span class="line"> resolve(<span class="string">'任务一'</span>)</span><br><span class="line"> }).then(<span class="function"><span class="params">data</span> =></span> {</span><br><span class="line"> <span class="built_in">console</span>.log(data);</span><br><span class="line"> <span class="keyword">return</span> data;</span><br><span class="line"> })</span><br><span class="line"> <span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =></span> {</span><br><span class="line"> setTimeout(<span class="function"><span class="params">()</span> =></span> {</span><br><span class="line"> resolve(<span class="string">'任务三'</span>)</span><br><span class="line"> }, <span class="number">1000</span>)</span><br><span class="line"> }).then(<span class="function"><span class="params">data</span> =></span> {</span><br><span class="line"> <span class="built_in">console</span>.log(data);</span><br><span class="line"> <span class="keyword">return</span> data;</span><br><span class="line"> })</span><br><span class="line"> <span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =></span> {</span><br><span class="line"> setTimeout(<span class="function"><span class="params">()</span> =></span> {</span><br><span class="line"> resolve(<span class="string">'任务二'</span>)</span><br><span class="line"> }, <span class="number">2000</span>)</span><br><span class="line"> }).then(<span class="function"><span class="params">data</span> =></span> {</span><br><span class="line"> <span class="built_in">console</span>.log(data)</span><br><span class="line"> <span class="keyword">return</span> data</span><br><span class="line"> })</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'主线程任务'</span>) <span class="comment">//主线程任务</span></span><br><span class="line"> <span class="comment">// all race</span></span><br><span class="line"> <span class="comment">// 如果作为参数的Promise实例自身定义了catch方法，那么它被rejected是并不会触发Promise.all()的catch方法</span></span><br><span class="line">  <span class="comment">// Promise.all中都成功返回才执行</span></span><br><span class="line"> <span class="built_in">Promise</span>.all([p1, p2, p3]).then(<span class="function"><span class="params">data</span> =></span> { <span class="comment">//data为p1,p2,p3返回值组成的数组</span></span><br><span class="line"> <span class="built_in">console</span>.log(data) <span class="comment">//[ '任务一', '任务二', '任务三' ]</span></span><br><span class="line"> }).catch(<span class="function"><span class="params">e</span> =></span> <span class="built_in">console</span>.log(e))</span><br><span class="line"> <span class="comment">// Promise.race中只要有一个成功返回就执行</span></span><br><span class="line"> <span class="built_in">Promise</span>.race([p1, p2, p3]).then(<span class="function"><span class="params">data</span> =></span> { <span class="comment">//data为p1,p2,p3中最先成功的返回值</span></span><br><span class="line"> <span class="built_in">console</span>.log(data) <span class="comment">//任务一</span></span><br><span class="line"> })</span><br><span class="line"> <span class="comment">// 以上代码执行结果为</span></span><br><span class="line"> <span class="comment">// 主线程任务</span></span><br><span class="line"> <span class="comment">// 任务一</span></span><br><span class="line"> <span class="comment">// 任务一</span></span><br><span class="line"> <span class="comment">// 任务三</span></span><br><span class="line"> <span class="comment">// 任务二</span></span><br><span class="line"> <span class="comment">// [ '任务一', '任务二', '任务三' ]</span></span><br></pre></td></tr></tbody></table></figure><h4 id="es6-generator函数"><a href="#es6-generator函数" class="headerlink" title="- es6 generator函数"></a>- es6 generator函数</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">generator函数</span></span><br><span class="line"><span class="comment">在function关键字后面加一个* 这样定义的函数就叫做generator函数</span></span><br><span class="line"><span class="comment">通过yield关键字来定义任务</span></span><br><span class="line"><span class="comment">通过fn().next() 来执行任务</span></span><br><span class="line"><span class="comment">value表示yield关键字后任务执行的结果</span></span><br><span class="line"><span class="comment">done表示当前定义的所有的任务是否执行完成的一个状态</span></span><br><span class="line"><span class="comment">理解：</span></span><br><span class="line"><span class="comment">多任务的定义，多任务执行</span></span><br><span class="line"><span class="comment">让自己定义的多个任务依次执行，上一个任务如果没有完成，下一个任务就不会开始</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fn</span>(<span class="params"></span>) </span>{</span><br><span class="line"><span class="keyword">yield</span> <span class="string">'任务一'</span></span><br><span class="line"><span class="keyword">yield</span> <span class="string">'任务二'</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'任务'</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> a = fn()</span><br><span class="line"><span class="built_in">console</span>.log(a.next()) <span class="comment">// { value: '任务一'，done: false }</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next()) <span class="comment">//{ value: '任务二', done: false }</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next()) <span class="comment">//{ value: '任务', done: true }</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'主线程任务'</span>) <span class="comment">//主线程任务</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>es6( 7 ) async 函数</p>  <figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">async函数</span></span><br><span class="line"><span class="comment">es6提供</span></span><br><span class="line"><span class="comment">配合关键字 await使用</span></span><br><span class="line"><span class="comment">await 表示，等待，任务一执行结束之后，才会执行任务二</span></span><br><span class="line"><span class="comment">async函数返回值为Promise对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="string">'任务一'</span></span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'任务二'</span>)</span><br><span class="line">}</span><br><span class="line">fn()</span><br><span class="line"><span class="keyword">const</span> fn1 = <span class="keyword">async</span>() => {</span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =></span> {</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =></span> { res(<span class="string">'任务3'</span>) }, <span class="number">2000</span>)</span><br><span class="line">    }).then(<span class="function"><span class="params">result</span> =></span> {</span><br><span class="line">        <span class="built_in">console</span>.log(result)</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">})</span><br><span class="line"><span class="keyword">let</span> req = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =></span> {</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =></span> { res(<span class="string">'任务四'</span>) }, <span class="number">1000</span>)</span><br><span class="line">    }).then(<span class="function"><span class="params">result</span> =></span> {</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">})</span><br><span class="line">    <span class="built_in">console</span>.log(req)</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) {</span><br><span class="line">    <span class="keyword">return</span> req</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">throw</span> res</span><br><span class="line">}</span><br><span class="line"><span class="comment">//返回值通过then()调用，抛出值通过catch()调用</span></span><br><span class="line">}</span><br><span class="line">fn1().then(<span class="function"><span class="params">re</span> =></span> <span class="built_in">console</span>.log(re)).catch(<span class="function"><span class="params">re</span> =></span> <span class="built_in">console</span>.log(re))</span><br><span class="line"><span class="comment">//结果:</span></span><br><span class="line"><span class="comment">// 任务一</span></span><br><span class="line"><span class="comment">// 任务二</span></span><br><span class="line"><span class="comment">// 任务3</span></span><br><span class="line"><span class="comment">// 任务四</span></span><br><span class="line"><span class="comment">// 任务四</span></span><br><span class="line"><span class="comment">// 任务3</span></span><br><span class="line"><span class="comment">// 任务3</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="node-js中的-nextTick-setImmudiate"><a href="#node-js中的-nextTick-setImmudiate" class="headerlink" title="- node.js中的 nextTick setImmudiate"></a>- node.js中的 nextTick setImmudiate</h4> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nextTick()的回调函数执行的优先级要高于setImmediate();</span><br><span class="line">process.nextTick()属于idle观察者,setImmediate()属于check观察者.在每一轮循环检查中,idle观察者先于I/O观察者,I/O观察者先于check观察者.</span><br><span class="line">在具体实现上,process.nextTick()的回调函数保存在一个数组中,</span><br><span class="line">setImmediate()的结果则是保存在链表中.</span><br><span class="line">在行为上,process.nextTick()在每轮循环中会将数组中的回调函数全部执行完.</span><br><span class="line">而setImmediate()在每轮循环中执行链表中的一个回调函数.</span><br><span class="line">nextTick > 回调函数 > setImmediate</span><br></pre></td></tr></tbody></table></figure>   <figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Node.js提供的</span></span><br><span class="line"><span class="comment">nextTick</span></span><br><span class="line"><span class="comment">setImmediate</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//加入2个nextTick()的回调函数</span></span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"nextTick延迟执行A"</span>);</span><br><span class="line">});</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"nextTick延迟执行B"</span>);</span><br><span class="line">setImmediate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"setImmediate延迟执行C"</span>);</span><br><span class="line">});</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"nextTick延迟执行D"</span>);</span><br><span class="line">});</span><br><span class="line">});</span><br><span class="line"><span class="comment">//加入两个setImmediate()回调函数</span></span><br><span class="line">setImmediate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"setImmediate延迟执行E"</span>);</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"强势插入F"</span>);</span><br><span class="line">});</span><br><span class="line">setImmediate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"setImmediate延迟执行G"</span>);</span><br><span class="line">});</span><br><span class="line">});</span><br><span class="line">setImmediate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"setImmediate延迟执行H"</span>);</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"强势插入I"</span>);</span><br><span class="line">});</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"强势插入J"</span>);</span><br><span class="line">});</span><br><span class="line">setImmediate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"setImmediate延迟执行K"</span>);</span><br><span class="line">});</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"正常执行L"</span>);</span><br><span class="line"><span class="comment">// 正常执行L</span></span><br><span class="line"><span class="comment">// nextTick延迟执行A</span></span><br><span class="line"><span class="comment">// nextTick延迟执行B</span></span><br><span class="line"><span class="comment">// nextTick延迟执行D</span></span><br><span class="line"><span class="comment">// setImmediate延迟执行E</span></span><br><span class="line"><span class="comment">// setImmediate延迟执行H</span></span><br><span class="line"><span class="comment">// setImmediate延迟执行C</span></span><br><span class="line"><span class="comment">// 强势插入F</span></span><br><span class="line"><span class="comment">// 强势插入I</span></span><br><span class="line"><span class="comment">// 强势插入J</span></span><br><span class="line"><span class="comment">// setImmediate延迟执行G</span></span><br><span class="line"><span class="comment">// setImmediate延迟执行K</span></span><br></pre></td></tr></tbody></table></figure><h4 id="第三方的-async-js-库"><a href="#第三方的-async-js-库" class="headerlink" title="- 第三方的 async.js 库"></a>- 第三方的 async.js 库</h4>  <figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">async.js</span></span><br><span class="line"><span class="comment">第三方的库</span></span><br><span class="line"><span class="comment">案例：</span></span><br><span class="line"><span class="comment">parallel</span></span><br><span class="line"><span class="comment">series</span></span><br><span class="line"><span class="comment">功能：</span></span><br><span class="line"><span class="comment">1. 可以实现异步</span></span><br><span class="line"><span class="comment">2. 串行series和并行parallel</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="built_in">require</span>( <span class="string">'async'</span> )</span><br><span class="line">    <span class="keyword">async</span>.series({</span><br><span class="line">    one: <span class="function"><span class="keyword">function</span> (<span class="params"> callback </span>) </span>{</span><br><span class="line"> setTimeout( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  callback( <span class="literal">null</span>, <span class="number">1</span>)</span><br><span class="line">},<span class="number">200</span>)</span><br><span class="line">},</span><br><span class="line">two: <span class="function"><span class="keyword">function</span> (<span class="params"> callback </span>) </span>{</span><br><span class="line">setTimeout( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line"> callback ( <span class="literal">null</span> , <span class="number">2</span> )</span><br><span class="line">},<span class="number">100</span>)</span><br><span class="line">}</span><br><span class="line">}, <span class="function"><span class="keyword">function</span> (<span class="params"> error , results </span>) </span>{</span><br><span class="line"> <span class="built_in">console</span>.log( <span class="string">'series'</span>,results )</span><br><span class="line">})</span><br><span class="line"> <span class="built_in">console</span>.log( <span class="string">'主线程'</span> )</span><br><span class="line"><span class="keyword">async</span>.parallel({</span><br><span class="line"> one: <span class="function"><span class="keyword">function</span> (<span class="params"> callback </span>) </span>{</span><br><span class="line">setTimeout( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line"> callback( <span class="literal">null</span>, <span class="number">1</span>)</span><br><span class="line">},<span class="number">200</span>)</span><br><span class="line">},</span><br><span class="line">two: <span class="function"><span class="keyword">function</span> (<span class="params"> callback </span>) </span>{</span><br><span class="line"> setTimeout( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  callback ( <span class="literal">null</span> , <span class="number">2</span> )</span><br><span class="line">},<span class="number">100</span>)</span><br><span class="line">}</span><br><span class="line">}, <span class="function"><span class="keyword">function</span> (<span class="params"> error , results </span>) </span>{</span><br><span class="line"> <span class="built_in">console</span>.log( <span class="string">'parallel'</span>,results )</span><br><span class="line">})        </span><br><span class="line"><span class="comment">// 主线程</span></span><br><span class="line"><span class="comment">// parallel { two: 2, one: 1 }</span></span><br><span class="line"><span class="comment">// series { one: 1, two: 2 }</span></span><br></pre></td></tr></tbody></table></figure><pre><code>总结：异步流程的任务是放在异步队列中的，异步队列只有在主线程执行完之后采取执行</code></pre><ol start="3"><li>参考资料<ol><li>Promise<br><a href="https://blog.csdn.net/MrJavaweb/article/details/79475949" target="_blank" rel="noopener">https://blog.csdn.net/MrJavaweb/article/details/79475949</a></li><li>Generator<br><a href="https://www.cnblogs.com/imwtr/p/5913294.html" target="_blank" rel="noopener">https://www.cnblogs.com/imwtr/p/5913294.html</a></li><li>Async-await</li><li>Node.js 中的nextTick()和setimmediate()<br><a href="https://www.cnblogs.com/5ishare/p/5268273.html" target="_blank" rel="noopener">https://www.cnblogs.com/5ishare/p/5268273.html</a></li><li>async库<br><a href="https://caolan.github.io/async/" target="_blank" rel="noopener">https://caolan.github.io/async/</a><br>参考文档<br>Event-loop<br><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html?bsh_bid=983729729" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/10/event-loop.html?bsh_bid=983729729</a><br>史上最易读懂的 Promise/A+ 完全实现<br><a href="https://zhuanlan.zhihu.com/p/21834559" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/21834559</a></li></ol></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前端异步流程&quot;&gt;&lt;a href=&quot;#前端异步流程&quot; class=&quot;headerlink&quot; title=&quot;前端异步流程&quot;&gt;&lt;/a&gt;前端异步流程&lt;/h2&gt;&lt;h3 id=&quot;1-传统的原生异步&quot;&gt;&lt;a href=&quot;#1-传统的原生异步&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="前端" scheme="https://yhk15978.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://yhk15978.github.io/categories/%E5%89%8D%E7%AB%AF/js/"/>
    
    
      <category term="nodejs" scheme="https://yhk15978.github.io/tags/nodejs/"/>
    
      <category term="前端" scheme="https://yhk15978.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://yhk15978.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue基础语法</title>
    <link href="https://yhk15978.github.io//posts/4a17b157/"/>
    <id>https://yhk15978.github.io//posts/4a17b157/</id>
    <published>2019-06-19T11:59:36.232Z</published>
    <updated>2019-06-20T13:59:08.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue基础语法"><a href="#vue基础语法" class="headerlink" title="vue基础语法"></a>vue基础语法</h1><h2 id="mutache-语法糖"><a href="#mutache-语法糖" class="headerlink" title="mutache 语法糖"></a>mutache 语法糖</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;p&gt; {{ this.msg }} &lt;/p&gt;</span><br><span class="line">    &lt;p&gt; {{ this.$data.msg }} &lt;/p&gt;</span><br><span class="line">    &lt;p&gt; {{ this._data.msg }} &lt;/p&gt;</span><br><span class="line">    &lt;p&gt; {{ msg }} &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p><code>jsx</code>: javascript + xml<br>可以让我们在dom结构中输写javascript</p><p>是 this.msg 简写<br>this.$data.msg -> this.msg -> msg</p><a id="more"></a><h4 id="mustache语法糖对数据类型的支持（-js语法的支持-）"><a href="#mustache语法糖对数据类型的支持（-js语法的支持-）" class="headerlink" title="mustache语法糖对数据类型的支持（ js语法的支持 ）"></a>mustache语法糖对数据类型的支持（ js语法的支持 ）</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id="app"&gt;</span><br><span class="line">    &lt;p&gt; number: {{ num }} &lt;/p&gt;</span><br><span class="line">    &lt;p&gt; string: {{ str }} &lt;/p&gt;</span><br><span class="line">    &lt;p&gt; boolean: {{ bool }} &lt;/p&gt;</span><br><span class="line">    &lt;p&gt; null: {{ nul?'1':'2' }} &lt;/p&gt;</span><br><span class="line">    &lt;p&gt; undefined: {{ und && 1 || 2 }} &lt;/p&gt;</span><br><span class="line">    &lt;p&gt; object: {{ obj.name }} &lt;/p&gt;</span><br><span class="line">    &lt;p&gt; array: {{ arr[0] }} &lt;/p&gt;</span><br><span class="line">    &lt;p&gt; fn: {{ fn() }} &lt;/p&gt;</span><br><span class="line">    &lt;!-- &lt;p&gt; console.log: {{ console.log( 1 ) }} &lt;/p&gt;</span><br><span class="line">    &lt;p&gt; alert: {{ alert( 2 ) }} &lt;/p&gt; --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    /*</span><br><span class="line">    数据类型：</span><br><span class="line">    第一种划分：</span><br><span class="line">    基础数据类型： number string boolean</span><br><span class="line">    复杂数据类型: Object( array function )</span><br><span class="line">    特殊数据类型: null undefined</span><br><span class="line">    第二种划分：</span><br><span class="line">    初始数据类型: number string boolean null undefined</span><br><span class="line">    引用数据类型: object( array function )</span><br><span class="line">    结论： mustache支持我们js的数据类型的</span><br><span class="line">    conosle.log 和 alert 在我们mustache语法中是不支持的</span><br><span class="line">    */</span><br><span class="line">var vm = new Vue({</span><br><span class="line">    el: '#app',</span><br><span class="line">    data: {</span><br><span class="line">        num: 100,</span><br><span class="line">        str: 'hello Vue.js',</span><br><span class="line">        bool: true,</span><br><span class="line">        nul: null,</span><br><span class="line">        und: undefined,</span><br><span class="line">        obj: {</span><br><span class="line">             name: 'yhk'</span><br><span class="line">        },</span><br><span class="line">        arr: [1,2,3,4],</span><br><span class="line">        fn: function () {</span><br><span class="line">            alert( 2 )</span><br><span class="line">            return '这是一个函数'</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="mustache-绑定-dom的属性"><a href="#mustache-绑定-dom的属性" class="headerlink" title="mustache 绑定 dom的属性"></a>mustache 绑定 dom的属性</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;p v-html = "h"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p v-text = "msg"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p v-text = " flag && 1 || 2 " &gt; &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    /*</span><br><span class="line">    案例： v-html</span><br><span class="line">    分析： 发现dom元素直接有了一个内容</span><br><span class="line">    这种属性绑定就是为了操作dom</span><br><span class="line">    结论： 这种属性绑定的形式就是为了操作dom，我们给这种属性起了一个好听的名字</span><br><span class="line">    Vue 1.0 叫它 属性指令（ 借鉴Angular来的 ）</span><br><span class="line">    Vue 2.0 统称为 ‘指令’</span><br><span class="line">    指令是用一个 v-xxx 表示</span><br><span class="line">    指令是用来操作dom</span><br><span class="line">    Vue中不允许直接操作dom!!!</span><br><span class="line">    mustache语法 --- 属性写法 的属性值是直接写数据的，不需要使用 {{ }}</span><br><span class="line">    */</span><br><span class="line">var vm = new Vue({</span><br><span class="line">    el: '#app',</span><br><span class="line">    data: {</span><br><span class="line">        msg: 'hello Vue.js',</span><br><span class="line">        h: '&lt;h3&gt; hello Vue.js &lt;/h3&gt;',</span><br><span class="line">        flag: true</span><br><span class="line">    }</span><br><span class="line">    })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>问题： 我们说vue是 MVVM 框架， 那么谁是 M 谁是 V 谁是 VM</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- V --&gt;</span><br><span class="line">&lt;div id="app"&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    /*</span><br><span class="line">    M： Model 数据</span><br><span class="line">    V： View 视图</span><br><span class="line">    VM: ViewModel 视图模型（ new Vue() ）</span><br><span class="line">    */</span><br><span class="line">    var vm = new Vue({</span><br><span class="line">        el: '#app',//给跟实例一个模板（ 挂载 ）</span><br><span class="line">        data: { //M</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="指令：-是绑定在dom属性上"><a href="#指令：-是绑定在dom属性上" class="headerlink" title="指令： ( 是绑定在dom属性上 )"></a>指令： ( 是绑定在dom属性上 )</h2><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html:"></a>v-html:</h4><p>可以解析标签型数据( 可以将一个数据展示在一个dom的内容中（ 相当于使用了 innerHTML ）)</p><h4 id="v-text："><a href="#v-text：" class="headerlink" title="v-text："></a>v-text：</h4><p>可以将一个数据展示在一个dom的内容中（ 相当于使用了 innerHTML ）<br>条件渲染的指令</p><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><p>可以控制一个dom的显示隐藏（ 这个指令操作的是dom的display属性 ）</p><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><p>可以控制一个dom的存在与否（ 创建 和 销毁 ）</p><h4 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h4><h4 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;h3&gt; v-show &lt;/h3&gt;</span><br><span class="line">    &lt;p v-show = "showFlag"&gt; v-show指令 &lt;/p&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h3&gt; v-if - 单路分支 &lt;/h3&gt;</span><br><span class="line">    &lt;p v-if = "ifFlag"&gt; v-if - 指令的单路分支 &lt;/p&gt;</span><br><span class="line">    &lt;h3&gt; v-if - 双路分支 &lt;/h3&gt;</span><br><span class="line">    &lt;p v-if = "ifFlag"&gt; 双路分支 成立 &lt;/p&gt;</span><br><span class="line">    &lt;p v-else&gt; 双路分支不成立 &lt;/p&gt;</span><br><span class="line">    &lt;h3&gt; v-if - 多路分支 &lt;/h3&gt;</span><br><span class="line">    &lt;p v-if = " type === 'A'"&gt; A &lt;/p&gt;</span><br><span class="line">    &lt;p v-else-if = " type === 'B'"&gt; B &lt;/p&gt;</span><br><span class="line">    &lt;p v-else&gt; C &lt;/p&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue({</span><br><span class="line">    el: '#app',//给跟实例一个模板（ 挂载 ）</span><br><span class="line">    data: {</span><br><span class="line">        showFlag: true,</span><br><span class="line">        ifFlag: false,</span><br><span class="line">        type: 'A'</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p> 实用题 </p><ol><li>v-if vs v-show 区别</li><li>实用： 项目中 如何选择这两个使用</li></ol><ul><li>v-if 操作的是dom元素（ 组件 ） 的创建或是销毁</li><li>v-show 操作的是dom元素的display属性</li><li>v-if可以有多种使用形式： 单路分支， 多路分支， 双路分支</li><li>v-show 只能写一个单路形式<br>一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。<br>因此，如果需要非常频繁地切换，则使用 v-show 较好；<br>如果在运行时条件很少改变，则使用 v-if 较好。</li></ul><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><ol><li>数组 v-for = “ (item,index) in arr “ item是arr中每一个元素</li><li>对象 v-for = “(item,key,index) in obj “ item是obj的属性值</li><li>json类型数据</li><li>嵌套类型数据</li></ol><h4 id="key"><a href="#key" class="headerlink" title="key:"></a>key:</h4><p>给没一个循环的列表添加一个唯一的标识<br>使用指令 v-bind 来绑定 key<br><div v-for = “ (item,index) in lists” v-bind: key = “ item.id “></div><br>如果有id，那么我们就使用id，如果没有，我们才会选择index<br>v-bind: 单项数据绑定： 将一个数据绑定在一个dom的属性上<br>简写<br><div v-for = “ (item,index) in lists” :key = “ item.id “></div></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">   &lt;h3&gt; 数组 &lt;/h3&gt;</span><br><span class="line">   &lt;ul&gt;</span><br><span class="line">       &lt;li v-for = " (item,index) in arr " v-bind:key = "index"&gt;</span><br><span class="line">            &lt;p&gt; item :{{ item }} -- index: {{ index }}&lt;/p&gt;</span><br><span class="line">       &lt;/li&gt;</span><br><span class="line">   &lt;/ul&gt;</span><br><span class="line">   &lt;hr&gt;</span><br><span class="line">   &lt;h3&gt; 对象 &lt;/h3&gt;</span><br><span class="line">   &lt;ul&gt;</span><br><span class="line">       &lt;li v-for = "(item,key,index) in obj" v-bind:key = "index"&gt;</span><br><span class="line">          &lt;p&gt; value: {{ item }} -- key: {{ key }} -- {{ index }} &lt;/p&gt;</span><br><span class="line">       &lt;/li&gt;</span><br><span class="line">   &lt;/ul&gt;</span><br><span class="line">   &lt;hr&gt;</span><br><span class="line">   &lt;h3&gt; json &lt;/h3&gt;</span><br><span class="line">   &lt;ul&gt;</span><br><span class="line">       &lt;li v-for = "(item,index) of json" v-bind:key = " item.id "&gt;</span><br><span class="line">           &lt;p&gt; id: {{ item.id }} &lt;/p&gt;</span><br><span class="line">           &lt;p&gt; task: {{ item.task }} &lt;/p&gt;</span><br><span class="line">           &lt;p&gt; {{ index }} &lt;/p&gt;</span><br><span class="line">       &lt;/li&gt;</span><br><span class="line">   &lt;/ul&gt;</span><br><span class="line">   &lt;hr&gt;</span><br><span class="line">   &lt;h3&gt; 嵌套 &lt;/h3&gt;</span><br><span class="line">   &lt;ul&gt;</span><br><span class="line">       &lt;li v-for = " item in lists " :key = "item.id"&gt;</span><br><span class="line">           &lt;p&gt; id: {{ item.id }} &lt;/p&gt;</span><br><span class="line">           &lt;ul&gt;</span><br><span class="line">               &lt;li v-for = "todo in item.todos"&gt;</span><br><span class="line">                     todos中的数据 -- {{ todo }}</span><br><span class="line">               &lt;/li&gt;</span><br><span class="line">           &lt;/ul&gt;</span><br><span class="line">       &lt;/li&gt;</span><br><span class="line">   &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  new Vue({</span><br><span class="line">       el: '#app',</span><br><span class="line">       data: {</span><br><span class="line">           arr: [1,2,3,4],</span><br><span class="line">           obj: {</span><br><span class="line">               id: 1,</span><br><span class="line">               name: '骏哥',</span><br><span class="line">               sex: 'man',</span><br><span class="line">               age: 18</span><br><span class="line">           },</span><br><span class="line">           json: [</span><br><span class="line">               {</span><br><span class="line">                   id: 1,</span><br><span class="line">                   task: '敲代码1'</span><br><span class="line">               },</span><br><span class="line">               {</span><br><span class="line">                   id: 2,</span><br><span class="line">                   task: '敲代码2'</span><br><span class="line">               }</span><br><span class="line">               ],</span><br><span class="line">               lists: [</span><br><span class="line">               {</span><br><span class="line">                   id: 1,</span><br><span class="line">                   todos: {</span><br><span class="line">                   id: 1,</span><br><span class="line">                   name: '连城'</span><br><span class="line">               }</span><br><span class="line">               },</span><br><span class="line">               {</span><br><span class="line">                   id: 2,</span><br><span class="line">                   todos: {</span><br><span class="line">                       id: 2,</span><br><span class="line">                       name: '文武'</span><br><span class="line">                 }</span><br><span class="line">                   }</span><br><span class="line">                  ]</span><br><span class="line">           }</span><br><span class="line">   })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="vue中如何给dom添加类名"><a href="#vue中如何给dom添加类名" class="headerlink" title="vue中如何给dom添加类名"></a>vue中如何给dom添加类名</h4><ol><li>直接在dom上绑定类名</li><li>vue中类名绑定 - 对象形式<br>目的： dom身上属性class 要和 数据绑定<br>解决：<code>v-bind</code><br>数据中key，我们起的和绑定的对象中的key一样，但是你得知道这两个东西不一样<br><code>&lt;p :class = "{ size,bg_color }"&gt;&lt;/p&gt;</code><br>size是自定义的属性， 它的属性值是undefined， 相当于是false<br><code>&lt;p :class = "{ size: true, bg_color: true }"&gt;&lt;/p&gt;</code><br>size也是自定义属性，他的属性是true,那么就会加上去<br><code>&lt;p :class = "{ [s]: true, [bg_color]: true }"&gt;&lt;/p&gt;</code><br>格式： <code>v-bind:class = "{ 属性： boolean }"</code><br>格式： <code>v-bind:class = "{ [data]： boolean }"</code></li><li>vue中类名绑定的形式 - 数组的形式 【 推荐 】<br>格式： <code>v-bind:class = "[ 数据 ]"</code>  </li><li>类名绑定不会覆盖原先的类名</li><li>为什么要绑定类名<br>指令是用来操作dom<br>目的： 为了将来通过数据来操作类名，类名操作dom<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        .size{</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">        }</span><br><span class="line">        .bg_color{</span><br><span class="line">          background: red;</span><br><span class="line">        }</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;h3&gt; v-class &lt;/h3&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h3&gt; vue中类名添加第一种 &lt;/h3&gt;</span><br><span class="line">    &lt;p class="size bg_color"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h3&gt; vue中类名添加第二种 - 对象的形式&lt;/h3&gt;</span><br><span class="line">    &lt;p :class = "{ size: true,bg_color: false }"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p :class = "{ size: true, bg_color: true }"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p :class = "{ [s]: true, [bg_color]: true }"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p :class = "{ [s]: 5&gt;3?true: false, [bg_color]: true }"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h3&gt; vue中类名添加的第三种形式 - 数组形式（ 推荐 ）&lt;/h3&gt;</span><br><span class="line">    &lt;p :class = "['size','bg_color']"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p :class = "[ s, bg_color ]"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p :class = "[ flag? s:'box', bg_color]"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p :class = "[ flag? s:'box', bg_color]" class = "yyb"&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue({</span><br><span class="line">    el: '#app',</span><br><span class="line">    data: {</span><br><span class="line">        msg: 'hello Vue.js',</span><br><span class="line">        s: 'size',</span><br><span class="line">        bg_color: 'bg_color',</span><br><span class="line">        flag: true</span><br><span class="line">           }</span><br><span class="line">    });</span><br><span class="line">   var a = {</span><br><span class="line">        name: 'yhk'</span><br><span class="line">        }</span><br><span class="line">   var b = {</span><br><span class="line">        name: 'mjn'</span><br><span class="line">        }</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure></li></ol><p>样式的绑定：<br>v-bind:style = “”</p><ol><li>对象的形式</li><li>数组的形式<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id="app"&gt;</span><br><span class="line">        &lt;h3&gt; style &lt;/h3&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;h3&gt; style - 对象形式 &lt;/h3&gt;</span><br><span class="line">        &lt;p :style = "{ width: size.width,height: size.height,background: 'red'}"&gt;&lt;/p&gt;</span><br><span class="line">        &lt;h3&gt; style - 数组的形式 &lt;/h3&gt;</span><br><span class="line">        &lt;p :style = "[ { width: '100px',background: 'blue'},{ height: '100px' } ]"&gt; &lt;/p&gt;</span><br><span class="line">        &lt;p :style = "[ size,bg ]"&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue({</span><br><span class="line">        el: '#app',</span><br><span class="line">        data: {</span><br><span class="line">            size: {</span><br><span class="line">                width: '100px',</span><br><span class="line">                height: '100px'</span><br><span class="line">            },</span><br><span class="line">            bg: {</span><br><span class="line">                 background: 'purple'</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>问题： javascript事件添加有几种形式</p><ol><li>事件绑定<br><code>dom.onclick = function () {}</code><br>dom: 事件源<br>on: 绑定事件的形式<br>click: 事件类型<br>function（）{} 事件处理函数</li><li>事件监听 ：<code>addeventListener</code></li><li>直接在标签中绑定事件<br><code>&lt;div onclick = "事件名称"&gt;&lt;/div&gt;</code><br>vue采用了第三种，也是通过属性的形式绑定在dom身上<br><code>&lt;div v-on:click = "事件名称"&gt;&lt;/div&gt;</code><br>简写：<br><code>&lt;button @click = "helloHandler"&gt; 点击 &lt;/button&gt;</code><br>v-on使用<br>事件源<br>事件绑定形式<br>事件类型<br>事件处理程序<br>v-on:eventType = “ handlerName “<br>简写 v-on: — > @</li></ol><p>问题： 函数调用有哪些方法？<br>直接调用 ()<br>事件<br>事件对象也可以正常使用<br>在事件处理程序中， 写e就可以了<br>问题： 如果事件处理程序中有三个参数，第三个参数才是事件对象e,如何实现<br>分析： 我们发现事件处理程序中的第三个参数 e 不在是事件对象了，而是一个undefined<br>解决： 在函数执行时，传入一个实际参数 $event 来代表事件对象</p><p>问题： 如果我们通过 length = 0 , 来清空一个数组，那么vue检测不到这个变动<br>解决方法： 使用splice<br>问题： 我们直接修改一个数组下的一个数据时，发现下标不能检测变动了<br>解决方法： 使用 Vue.set / this.$set</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;button @click = "add"&gt; + &lt;/button&gt;</span><br><span class="line">    &lt;button @click = "remove"&gt; - &lt;/button&gt;</span><br><span class="line">    &lt;button @click = "indexHandler"&gt; 修改第二条数据 &lt;/button&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for =" item in lists " :key = "item.id"&gt;</span><br><span class="line">                  {{ item.task }}</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;button @click = "arrChange"&gt; 修改第二条数据 &lt;/button&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for = " (item,index ) in arr " :key = "index"&gt;</span><br><span class="line">                  {{ item }}</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">/*</span><br><span class="line">业务： 点击这个按钮，添加一条新的数据放在列表数据中</span><br><span class="line">*/</span><br><span class="line">new Vue({</span><br><span class="line">        el: '#app',</span><br><span class="line">        data: {</span><br><span class="line">                arr: [1,2,3],</span><br><span class="line">                lists: [</span><br><span class="line">                    {</span><br><span class="line">                        id: 1,</span><br><span class="line">                        task: '锻炼1'</span><br><span class="line">                    },</span><br><span class="line">                    {</span><br><span class="line">                        id: 2,</span><br><span class="line">                        task: '敲代码'</span><br><span class="line">                    }</span><br><span class="line">                ]</span><br><span class="line">        },</span><br><span class="line">        methods: {</span><br><span class="line">                add () {</span><br><span class="line">                    // console.log( this )</span><br><span class="line">                    this.lists.push({</span><br><span class="line">                    id: this.lists.length + 1,</span><br><span class="line">                    task: '打篮球'</span><br><span class="line">                    })</span><br><span class="line">                },</span><br><span class="line">                remove () {</span><br><span class="line">                    this.lists.pop()</span><br><span class="line">                },</span><br><span class="line">                indexHandler () {</span><br><span class="line">                    //将列表中的第二个数据中的task任务修改为 撸猫</span><br><span class="line">                    this.lists[1] = {</span><br><span class="line">                            id: 2,</span><br><span class="line">                            task: '骏哥'</span><br><span class="line">                       }</span><br><span class="line">                        // 将整个列表清空</span><br><span class="line">                        // this.lists.length = 0</span><br><span class="line">                        // this.lists.splice( 0 )</span><br><span class="line">                },</span><br><span class="line">                arrChange () {</span><br><span class="line">                        // this.arr[ 1 ] = '骏哥' 不可以检测到的</span><br><span class="line">                        // this.$set( this.arr,'1','骏哥' )</span><br><span class="line">                        Vue.set( this.arr,'1','骏哥')</span><br><span class="line">                }</span><br><span class="line">        }</span><br><span class="line"> })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p>双向数据绑定<br>默认绑定value值<br>v-model应用于表单元素</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;input type="text" v-model = "msg"&gt;</span><br><span class="line">    &lt;p&gt; {{ msg }} &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    new Vue({</span><br><span class="line">        el: '#app',</span><br><span class="line">        data: {</span><br><span class="line">         msg: 'hello Vue.js'</span><br><span class="line">    }</span><br><span class="line"> })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vue基础语法&quot;&gt;&lt;a href=&quot;#vue基础语法&quot; class=&quot;headerlink&quot; title=&quot;vue基础语法&quot;&gt;&lt;/a&gt;vue基础语法&lt;/h1&gt;&lt;h2 id=&quot;mutache-语法糖&quot;&gt;&lt;a href=&quot;#mutache-语法糖&quot; class=&quot;headerlink&quot; title=&quot;mutache 语法糖&quot;&gt;&lt;/a&gt;mutache 语法糖&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div id=&quot;app&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;p&amp;gt; {{ this.msg }} &amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;p&amp;gt; {{ this.$data.msg }} &amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;p&amp;gt; {{ this._data.msg }} &amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;p&amp;gt; {{ msg }} &amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;jsx&lt;/code&gt;: javascript + xml&lt;br&gt;可以让我们在dom结构中输写javascript&lt;/p&gt;

&lt;p&gt;是 this.msg 简写&lt;br&gt;this.$data.msg -&gt; this.msg -&gt; msg&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://yhk15978.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://yhk15978.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="https://yhk15978.github.io/tags/Vue/"/>
    
  </entry>
  
</feed>
